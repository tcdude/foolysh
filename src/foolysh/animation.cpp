/* Generated by Cython 0.29.16 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "extra_link_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "ext"
        ],
        "language": "c++",
        "name": "foolysh.animation",
        "sources": [
            "src/foolysh/animation.pyx"
        ]
    },
    "module_name": "foolysh.animation"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_16"
#define CYTHON_HEX_VERSION 0x001D10F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__foolysh__animation
#define __PYX_HAVE_API__foolysh__animation
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include "src/common.hpp"
#include "src/vec2.cpp"
#include "src/vec2.hpp"
#include "src/aabb.cpp"
#include "src/aabb.hpp"
#include "src/quadtree.cpp"
#include "src/quadtree.hpp"
#include "src/list_t.hpp"
#include "src/node.cpp"
#include "src/node.hpp"
#include "src/animation.cpp"
#include "src/animation.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/foolysh/animation.pyx",
  "stringsource",
  "src/foolysh/tools/aabb.pxd",
  "src/foolysh/tools/vec2.pxd",
  "src/foolysh/scene/node.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7foolysh_5tools_4aabb_AABB;
struct __pyx_obj_7foolysh_5tools_4vec2_Vec2;
struct __pyx_obj_7foolysh_5scene_4node_SceneGraphDataHandler;
struct __pyx_obj_7foolysh_5scene_4node_Node;
struct __pyx_obj_7foolysh_9animation_AnimationBase;
struct __pyx_obj_7foolysh_9animation_AnimationType;
struct __pyx_obj_7foolysh_9animation_Interval;
struct __pyx_obj_7foolysh_9animation_Animation;
struct __pyx_obj_7foolysh_9animation_Sequence;
struct __pyx_obj_7foolysh_9animation_AnimationManager;
struct __pyx_opt_args_7foolysh_5tools_4vec2_4Vec2_rotate;
struct __pyx_opt_args_7foolysh_5tools_4vec2_4Vec2_rotated;

/* "tools/vec2.pxd":39
 *     cdef double _dot(self, Vec2 other)
 *     cdef Vec2 _normalized(self) except +
 *     cpdef void rotate(self, double a, bint radians=*)             # <<<<<<<<<<<<<<
 *     cpdef Vec2 rotated(self, double a, bint radians=*)
 *     cpdef Vec2 _add(self, Vec2 other)
 */
struct __pyx_opt_args_7foolysh_5tools_4vec2_4Vec2_rotate {
  int __pyx_n;
  int radians;
};

/* "tools/vec2.pxd":40
 *     cdef Vec2 _normalized(self) except +
 *     cpdef void rotate(self, double a, bint radians=*)
 *     cpdef Vec2 rotated(self, double a, bint radians=*)             # <<<<<<<<<<<<<<
 *     cpdef Vec2 _add(self, Vec2 other)
 *     cdef void _iadd_vec(Vec2 self, Vec2 other)
 */
struct __pyx_opt_args_7foolysh_5tools_4vec2_4Vec2_rotated {
  int __pyx_n;
  int radians;
};

/* "tools/aabb.pxd":9
 * 
 * 
 * cdef class AABB:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[_AABB] thisptr
 * 
 */
struct __pyx_obj_7foolysh_5tools_4aabb_AABB {
  PyObject_HEAD
  struct __pyx_vtabstruct_7foolysh_5tools_4aabb_AABB *__pyx_vtab;
  std::unique_ptr<foolysh::tools::AABB>  thisptr;
};


/* "tools/vec2.pxd":34
 * 
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[_Vec2] thisptr
 * 
 */
struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7foolysh_5tools_4vec2_Vec2 *__pyx_vtab;
  std::unique_ptr<foolysh::tools::Vec2>  thisptr;
};


/* "scene/node.pxd":12
 * 
 * 
 * cdef class SceneGraphDataHandler:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[_SceneGraphDataHandler] thisptr
 * 
 */
struct __pyx_obj_7foolysh_5scene_4node_SceneGraphDataHandler {
  PyObject_HEAD
  std::unique_ptr<foolysh::scene::SceneGraphDataHandler>  thisptr;
};


/* "scene/node.pxd":16
 * 
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[_Node] thisptr
 *     cdef str __name
 */
struct __pyx_obj_7foolysh_5scene_4node_Node {
  PyObject_HEAD
  struct __pyx_vtabstruct_7foolysh_5scene_4node_Node *__pyx_vtab;
  std::unique_ptr<foolysh::scene::Node>  thisptr;
  PyObject *__pyx___name;
};


/* "foolysh/animation.pyx":63
 * 
 * 
 * cdef class AnimationBase:             # <<<<<<<<<<<<<<
 *     """
 *     Provides basic playback control for animations.
 */
struct __pyx_obj_7foolysh_9animation_AnimationBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase *__pyx_vtab;
  int _loop;
  int _id;
  struct __pyx_obj_7foolysh_5scene_4node_Node *_node;
};


/* "foolysh/animation.pyx":222
 * 
 * 
 * cdef class AnimationType(AnimationBase):             # <<<<<<<<<<<<<<
 *     """
 *     Provides shared functionality for :class:`Interval` and :class:`Animation`
 */
struct __pyx_obj_7foolysh_9animation_AnimationType {
  struct __pyx_obj_7foolysh_9animation_AnimationBase __pyx_base;
  PyObject *_modifiers;
  enum foolysh::animation::BlendType _blend_type;
};


/* "foolysh/animation.pyx":849
 * 
 * 
 * cdef class Interval(AnimationType):             # <<<<<<<<<<<<<<
 *     """
 *     Interval that allows for fixed time Node manipulation.
 */
struct __pyx_obj_7foolysh_9animation_Interval {
  struct __pyx_obj_7foolysh_9animation_AnimationType __pyx_base;
  float _duration;
};


/* "foolysh/animation.pyx":898
 * 
 * 
 * cdef class Animation(AnimationType):             # <<<<<<<<<<<<<<
 *     """
 *     Animation that allows for speed based Node manipulation.
 */
struct __pyx_obj_7foolysh_9animation_Animation {
  struct __pyx_obj_7foolysh_9animation_AnimationType __pyx_base;
  float _pos_speed;
  float _scale_speed;
  float _rotation_speed;
  float _rotation_center_speed;
  float _depth_speed;
};


/* "foolysh/animation.pyx":994
 * 
 * 
 * cdef class Sequence(AnimationBase):             # <<<<<<<<<<<<<<
 *     """
 *     Sequence that allows for playing multiple instances of descendants of
 */
struct __pyx_obj_7foolysh_9animation_Sequence {
  struct __pyx_obj_7foolysh_9animation_AnimationBase __pyx_base;
};


/* "foolysh/animation.pyx":1287
 * 
 * 
 * cdef class AnimationManager:             # <<<<<<<<<<<<<<
 *     """
 *     Provides control when to update all currently active :class:`AnimationBase`
 */
struct __pyx_obj_7foolysh_9animation_AnimationManager {
  PyObject_HEAD
  struct __pyx_vtabstruct_7foolysh_9animation_AnimationManager *__pyx_vtab;
};



/* "tools/aabb.pxd":9
 * 
 * 
 * cdef class AABB:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[_AABB] thisptr
 * 
 */

struct __pyx_vtabstruct_7foolysh_5tools_4aabb_AABB {
  int (*_inside_aabb)(struct __pyx_obj_7foolysh_5tools_4aabb_AABB *, struct __pyx_obj_7foolysh_5tools_4aabb_AABB *);
  int (*_overlap)(struct __pyx_obj_7foolysh_5tools_4aabb_AABB *, struct __pyx_obj_7foolysh_5tools_4aabb_AABB *);
  foolysh::tools::AABB (*_split)(struct __pyx_obj_7foolysh_5tools_4aabb_AABB *, enum foolysh::tools::Quadrant);
  foolysh::tools::AABB (*_split_point)(struct __pyx_obj_7foolysh_5tools_4aabb_AABB *, double, double, enum foolysh::tools::Quadrant);
  foolysh::tools::AABB (*aabb)(struct __pyx_obj_7foolysh_5tools_4aabb_AABB *);
};
static struct __pyx_vtabstruct_7foolysh_5tools_4aabb_AABB *__pyx_vtabptr_7foolysh_5tools_4aabb_AABB;


/* "tools/vec2.pxd":34
 * 
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[_Vec2] thisptr
 * 
 */

struct __pyx_vtabstruct_7foolysh_5tools_4vec2_Vec2 {
  double (*_dot)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_normalized)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  void (*rotate)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_7foolysh_5tools_4vec2_4Vec2_rotate *__pyx_optional_args);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*rotated)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double, int __pyx_skip_dispatch, struct __pyx_opt_args_7foolysh_5tools_4vec2_4Vec2_rotated *__pyx_optional_args);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_add)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, int __pyx_skip_dispatch);
  void (*_iadd_vec)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_add_scalar)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double const , int __pyx_skip_dispatch);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_sub)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, int __pyx_skip_dispatch);
  void (*_isub_vec)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_sub_scalar)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double const , int __pyx_skip_dispatch);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_sub_scalar_r)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double const , int __pyx_skip_dispatch);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_neg)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, int __pyx_skip_dispatch);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_mul)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double const , int __pyx_skip_dispatch);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_tdiv)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double, int __pyx_skip_dispatch);
  int (*_eq)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, int __pyx_skip_dispatch);
  int (*_eq_scalar)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double, int __pyx_skip_dispatch);
  int (*_ne)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, int __pyx_skip_dispatch);
  int (*_ne_scalar)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, double, int __pyx_skip_dispatch);
  foolysh::tools::Vec2 (*vec2)(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
};
static struct __pyx_vtabstruct_7foolysh_5tools_4vec2_Vec2 *__pyx_vtabptr_7foolysh_5tools_4vec2_Vec2;


/* "scene/node.pxd":16
 * 
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[_Node] thisptr
 *     cdef str __name
 */

struct __pyx_vtabstruct_7foolysh_5scene_4node_Node {
  void (*_setup)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_SceneGraphDataHandler *);
  void (*remove)(struct __pyx_obj_7foolysh_5scene_4node_Node *, int __pyx_skip_dispatch);
  void (*_attach_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*_reparent_to)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  PyObject *(*_query)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5tools_4aabb_AABB *, int);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_get_pos)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*_set_pos_single)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const );
  void (*_set_pos)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const , double const );
  void (*_set_pos_relative)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *, double const , double const );
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_get_pos_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  PyObject *(*_get_scale)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
  PyObject *(*_get_scale_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*_set_scale_single)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const );
  void (*_set_scale)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const , double const );
  void (*_set_scale_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *, double const , double const );
  double (*_get_angle_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*_set_angle)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const );
  void (*_set_angle_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *, double const );
  double (*_get_angle_rad_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*_set_angle_rad)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const );
  void (*_set_angle_rad_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *, double const );
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_get_rotation_center)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*_set_rotation_center)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const , double const );
  void (*_set_depth_node)(struct __pyx_obj_7foolysh_5scene_4node_Node *, struct __pyx_obj_7foolysh_5scene_4node_Node *, int);
  void (*_set_origin)(struct __pyx_obj_7foolysh_5scene_4node_Node *, enum foolysh::scene::Origin);
  struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *(*_get_relative_pos)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
  PyObject *(*_get_relative_scale)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
  PyObject *(*_get_size)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*_set_size)(struct __pyx_obj_7foolysh_5scene_4node_Node *, double const , double const );
  struct __pyx_obj_7foolysh_5tools_4aabb_AABB *(*_get_aabb)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
  PyObject *(*_get_relative_size)(struct __pyx_obj_7foolysh_5scene_4node_Node *);
};
static struct __pyx_vtabstruct_7foolysh_5scene_4node_Node *__pyx_vtabptr_7foolysh_5scene_4node_Node;


/* "foolysh/animation.pyx":63
 * 
 * 
 * cdef class AnimationBase:             # <<<<<<<<<<<<<<
 *     """
 *     Provides basic playback control for animations.
 */

struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase {
  char (*_status)(struct __pyx_obj_7foolysh_9animation_AnimationBase *);
};
static struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase *__pyx_vtabptr_7foolysh_9animation_AnimationBase;


/* "foolysh/animation.pyx":222
 * 
 * 
 * cdef class AnimationType(AnimationBase):             # <<<<<<<<<<<<<<
 *     """
 *     Provides shared functionality for :class:`Interval` and :class:`Animation`
 */

struct __pyx_vtabstruct_7foolysh_9animation_AnimationType {
  struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase __pyx_base;
  void (*_set_blend)(struct __pyx_obj_7foolysh_9animation_AnimationType *, enum foolysh::animation::BlendType);
  void (*_set_node)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_pos_e)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  void (*add_pos_es)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  void (*add_pos_er)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_pos_esr)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_scale_e)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *);
  void (*add_scale_es)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *, PyObject *);
  void (*add_scale_er)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_scale_esr)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *, PyObject *, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_rotation_e)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float);
  void (*add_rotation_es)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float, float);
  void (*add_rotation_er)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_rotation_esr)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float, float, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_rot_center_e)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  void (*add_rot_center_es)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *);
  void (*add_depth_e)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int);
  void (*add_depth_es)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int, int);
  void (*add_depth_er)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int, struct __pyx_obj_7foolysh_5scene_4node_Node *);
  void (*add_depth_esr)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int, int, struct __pyx_obj_7foolysh_5scene_4node_Node *);
};
static struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *__pyx_vtabptr_7foolysh_9animation_AnimationType;


/* "foolysh/animation.pyx":849
 * 
 * 
 * cdef class Interval(AnimationType):             # <<<<<<<<<<<<<<
 *     """
 *     Interval that allows for fixed time Node manipulation.
 */

struct __pyx_vtabstruct_7foolysh_9animation_Interval {
  struct __pyx_vtabstruct_7foolysh_9animation_AnimationType __pyx_base;
  void (*_iadd)(struct __pyx_obj_7foolysh_9animation_Interval *, struct __pyx_obj_7foolysh_9animation_Interval *);
};
static struct __pyx_vtabstruct_7foolysh_9animation_Interval *__pyx_vtabptr_7foolysh_9animation_Interval;


/* "foolysh/animation.pyx":898
 * 
 * 
 * cdef class Animation(AnimationType):             # <<<<<<<<<<<<<<
 *     """
 *     Animation that allows for speed based Node manipulation.
 */

struct __pyx_vtabstruct_7foolysh_9animation_Animation {
  struct __pyx_vtabstruct_7foolysh_9animation_AnimationType __pyx_base;
  void (*_iadd)(struct __pyx_obj_7foolysh_9animation_Animation *, struct __pyx_obj_7foolysh_9animation_Animation *);
};
static struct __pyx_vtabstruct_7foolysh_9animation_Animation *__pyx_vtabptr_7foolysh_9animation_Animation;


/* "foolysh/animation.pyx":994
 * 
 * 
 * cdef class Sequence(AnimationBase):             # <<<<<<<<<<<<<<
 *     """
 *     Sequence that allows for playing multiple instances of descendants of
 */

struct __pyx_vtabstruct_7foolysh_9animation_Sequence {
  struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase __pyx_base;
  void (*_set_loop)(struct __pyx_obj_7foolysh_9animation_Sequence *, int);
  void (*_append_interval)(struct __pyx_obj_7foolysh_9animation_Sequence *, struct __pyx_obj_7foolysh_9animation_Interval *);
  void (*_append_animation)(struct __pyx_obj_7foolysh_9animation_Sequence *, struct __pyx_obj_7foolysh_9animation_Animation *);
  void (*_append_sequence)(struct __pyx_obj_7foolysh_9animation_Sequence *, struct __pyx_obj_7foolysh_9animation_Sequence *);
};
static struct __pyx_vtabstruct_7foolysh_9animation_Sequence *__pyx_vtabptr_7foolysh_9animation_Sequence;


/* "foolysh/animation.pyx":1287
 * 
 * 
 * cdef class AnimationManager:             # <<<<<<<<<<<<<<
 *     """
 *     Provides control when to update all currently active :class:`AnimationBase`
 */

struct __pyx_vtabstruct_7foolysh_9animation_AnimationManager {
  void (*_animate)(struct __pyx_obj_7foolysh_9animation_AnimationManager *, double const );
  void (*clean_up)(struct __pyx_obj_7foolysh_9animation_AnimationManager *);
};
static struct __pyx_vtabstruct_7foolysh_9animation_AnimationManager *__pyx_vtabptr_7foolysh_9animation_AnimationManager;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* py_dict_pop.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__foolysh_3a__3a_animation_3a__3a_BlendType(enum foolysh::animation::BlendType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum foolysh::animation::BlendType __Pyx_PyInt_As_enum__foolysh_3a__3a_animation_3a__3a_BlendType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static char __pyx_f_7foolysh_9animation_13AnimationBase__status(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType__set_blend(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, enum foolysh::animation::BlendType __pyx_v_blend); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType__set_node(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_node); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v1, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v2); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v1, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d1, float __pyx_v_d2); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d1, float __pyx_v_d2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_rot_center_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_rot_center_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v1, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v2); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d1, int __pyx_v_d2); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d1, int __pyx_v_d2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel); /* proto*/
static void __pyx_f_7foolysh_9animation_8Interval__iadd(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_other); /* proto*/
static void __pyx_f_7foolysh_9animation_9Animation__iadd(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_other); /* proto*/
static void __pyx_f_7foolysh_9animation_8Sequence__set_loop(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, int __pyx_v_l); /* proto*/
static void __pyx_f_7foolysh_9animation_8Sequence__append_interval(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_item); /* proto*/
static void __pyx_f_7foolysh_9animation_8Sequence__append_animation(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_item); /* proto*/
static void __pyx_f_7foolysh_9animation_8Sequence__append_sequence(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_item); /* proto*/
static void __pyx_f_7foolysh_9animation_16AnimationManager__animate(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self, double const __pyx_v_dt); /* proto*/
static void __pyx_f_7foolysh_9animation_16AnimationManager_clean_up(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'foolysh.tools.cppvec2' */

/* Module declarations from 'foolysh.tools.cppaabb' */

/* Module declarations from 'foolysh.scene.cppnode' */

/* Module declarations from 'foolysh.tools.aabb' */
static PyTypeObject *__pyx_ptype_7foolysh_5tools_4aabb_AABB = 0;

/* Module declarations from 'foolysh.tools.vec2' */
static PyTypeObject *__pyx_ptype_7foolysh_5tools_4vec2_Vec2 = 0;

/* Module declarations from 'foolysh.scene.node' */
static PyTypeObject *__pyx_ptype_7foolysh_5scene_4node_SceneGraphDataHandler = 0;
static PyTypeObject *__pyx_ptype_7foolysh_5scene_4node_Node = 0;

/* Module declarations from 'foolysh.cppanimation' */

/* Module declarations from 'foolysh.animation' */
static PyTypeObject *__pyx_ptype_7foolysh_9animation_AnimationBase = 0;
static PyTypeObject *__pyx_ptype_7foolysh_9animation_AnimationType = 0;
static PyTypeObject *__pyx_ptype_7foolysh_9animation_Interval = 0;
static PyTypeObject *__pyx_ptype_7foolysh_9animation_Animation = 0;
static PyTypeObject *__pyx_ptype_7foolysh_9animation_Sequence = 0;
static PyTypeObject *__pyx_ptype_7foolysh_9animation_AnimationManager = 0;
static std::unique_ptr<foolysh::animation::AnimationManager>  __pyx_v_7foolysh_9animation___am;
static PyObject *__pyx_v_7foolysh_9animation___ivals = 0;
static PyObject *__pyx_v_7foolysh_9animation___anims = 0;
static PyObject *__pyx_v_7foolysh_9animation___seqs = 0;
static PyObject *__pyx_f_7foolysh_9animation___pyx_unpickle_AnimationManager__set_state(struct __pyx_obj_7foolysh_9animation_AnimationManager *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "foolysh.animation"
extern int __pyx_module_is_main_foolysh__animation;
int __pyx_module_is_main_foolysh__animation = 0;

/* Implementation of 'foolysh.animation' */
static PyObject *__pyx_builtin_ArithmeticError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k__8[] = "\"";
static const char __pyx_k_d1[] = "d1";
static const char __pyx_k_d2[] = "d2";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k_v1[] = "v1";
static const char __pyx_k_v2[] = "v2";
static const char __pyx_k_0_1[] = "0.1";
static const char __pyx_k_MIT[] = "MIT";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_rel[] = "rel";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k_anim[] = "anim";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_ival[] = "ival";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_blend[] = "blend";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_speed[] = "speed";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_EASE_IN[] = "EASE_IN";
static const char __pyx_k_add_pos[] = "add_pos";
static const char __pyx_k_license[] = "__license__";
static const char __pyx_k_node_id[] = "node_id";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_EASE_OUT[] = "EASE_OUT";
static const char __pyx_k_Interval[] = "Interval";
static const char __pyx_k_NO_BLEND[] = "NO_BLEND";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_duration[] = "duration";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rotation[] = "rotation";
static const char __pyx_k_set_node[] = "set_node";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Animation[] = "Animation";
static const char __pyx_k_BlendType[] = "BlendType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_depth[] = "add_depth";
static const char __pyx_k_add_scale[] = "add_scale";
static const char __pyx_k_copyright[] = "__copyright__";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_EASE_IN_OUT[] = "EASE_IN_OUT";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_PosInterval[] = "PosInterval";
static const char __pyx_k_PosAnimation[] = "PosAnimation";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_add_rotation[] = "add_rotation";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_set_duration[] = "set_duration";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_AnimationBase[] = "AnimationBase";
static const char __pyx_k_AnimationType[] = "AnimationType";
static const char __pyx_k_DepthInterval[] = "DepthInterval";
static const char __pyx_k_ScaleInterval[] = "ScaleInterval";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_set_pos_speed[] = "set_pos_speed";
static const char __pyx_k_DepthAnimation[] = "DepthAnimation";
static const char __pyx_k_ScaleAnimation[] = "ScaleAnimation";
static const char __pyx_k_Tiziano_Bettio[] = "Tiziano Bettio";
static const char __pyx_k_ArithmeticError[] = "ArithmeticError";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_rotation_center[] = "rotation_center";
static const char __pyx_k_set_depth_speed[] = "set_depth_speed";
static const char __pyx_k_set_scale_speed[] = "set_scale_speed";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_AnimationManager[] = "AnimationManager";
static const char __pyx_k_RotationInterval[] = "RotationInterval";
static const char __pyx_k_Not_the_same_Node[] = "Not the same Node";
static const char __pyx_k_RotationAnimation[] = "RotationAnimation";
static const char __pyx_k_foolysh_animation[] = "foolysh.animation";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_set_rotation_speed[] = "set_rotation_speed";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_add_rotation_center[] = "add_rotation_center";
static const char __pyx_k_RotationCenterInterval[] = "RotationCenterInterval";
static const char __pyx_k_Could_not_play_Interval[] = "Could not play Interval";
static const char __pyx_k_Could_not_play_Sequence[] = "Could not play Sequence";
static const char __pyx_k_Could_not_stop_Interval[] = "Could not stop Interval";
static const char __pyx_k_Could_not_stop_Sequence[] = "Could not stop Sequence";
static const char __pyx_k_RotationCenterAnimation[] = "RotationCenterAnimation";
static const char __pyx_k_Could_not_pause_Interval[] = "Could not pause Interval";
static const char __pyx_k_Could_not_pause_Sequence[] = "Could not pause Sequence";
static const char __pyx_k_Could_not_play_Animation[] = "Could not play Animation";
static const char __pyx_k_Could_not_stop_Animation[] = "Could not stop Animation";
static const char __pyx_k_Could_not_pause_Animation[] = "Could not pause Animation";
static const char __pyx_k_Could_not_resume_Interval[] = "Could not resume Interval";
static const char __pyx_k_Could_not_resume_Sequence[] = "Could not resume Sequence";
static const char __pyx_k_set_rotation_center_speed[] = "set_rotation_center_speed";
static const char __pyx_k_src_foolysh_animation_pyx[] = "src/foolysh/animation.pyx";
static const char __pyx_k_Could_not_resume_Animation[] = "Could not resume Animation";
static const char __pyx_k_Enumerations_of_blend_types[] = "Enumerations of blend types.";
static const char __pyx_k_pyx_unpickle_AnimationManager[] = "__pyx_unpickle_AnimationManager";
static const char __pyx_k_Unable_to_set_loop_to_Sequence[] = "Unable to set loop to Sequence";
static const char __pyx_k_An_exception_prevented_resuming[] = "An exception prevented resuming the Interval: \"";
static const char __pyx_k_Copyright_c_2020_Tiziano_Bettio[] = "Copyright (c) 2020 Tiziano Bettio\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.";
static const char __pyx_k_Provides_wrapper_for_the_Animat[] = "\nProvides wrapper for the Animation System.\n";
static const char __pyx_k_Unable_to_add_depth_to_Interval[] = "Unable to add depth to Interval";
static const char __pyx_k_Unable_to_add_scale_to_Interval[] = "Unable to add scale to Interval";
static const char __pyx_k_An_exception_prevented_pausing_t[] = "An exception prevented pausing the Interval: \"";
static const char __pyx_k_Expected_positive_non_zero_value[] = "Expected positive, non zero value";
static const char __pyx_k_Illegal_combination_of_arguments[] = "Illegal combination of arguments";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_Unable_to_add_depth_to_Animation[] = "Unable to add depth to Animation";
static const char __pyx_k_Unable_to_add_position_to_Animat[] = "Unable to add position to Animation";
static const char __pyx_k_Unable_to_add_position_to_Interv[] = "Unable to add position to Interval";
static const char __pyx_k_Unable_to_add_rotation_center_to[] = "Unable to add rotation center to Interval";
static const char __pyx_k_Unable_to_add_rotation_to_Animat[] = "Unable to add rotation to Animation";
static const char __pyx_k_Unable_to_add_rotation_to_Interv[] = "Unable to add rotation to Interval";
static const char __pyx_k_Unable_to_add_scale_to_Animation[] = "Unable to add scale to Animation";
static const char __pyx_k_Unable_to_retrieve_Animation_sta[] = "Unable to retrieve Animation status";
static const char __pyx_k_Unable_to_retrieve_Interval_stat[] = "Unable to retrieve Interval status";
static const char __pyx_k_Unable_to_retrieve_Sequence_stat[] = "Unable to retrieve Sequence status";
static const char __pyx_k_Unable_to_set_BlendType_to_Anima[] = "Unable to set BlendType to Animation";
static const char __pyx_k_Unable_to_set_BlendType_to_Inter[] = "Unable to set BlendType to Interval";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_An_exception_prevented_resuming_2[] = "An exception prevented resuming the Animation: \"";
static const char __pyx_k_An_exception_prevented_resuming_3[] = "An exception prevented resuming the Sequence: \"";
static const char __pyx_k_An_exception_prevented_pausing_t_2[] = "An exception prevented pausing the Animation: \"";
static const char __pyx_k_An_exception_prevented_pausing_t_3[] = "An exception prevented pausing the Sequence: \"";
static const char __pyx_k_Unable_to_add_rotation_center_to_2[] = "Unable to add rotation center to Animation";
static PyObject *__pyx_kp_u_0_1;
static PyObject *__pyx_kp_u_An_exception_prevented_pausing_t;
static PyObject *__pyx_kp_u_An_exception_prevented_pausing_t_2;
static PyObject *__pyx_kp_u_An_exception_prevented_pausing_t_3;
static PyObject *__pyx_kp_u_An_exception_prevented_resuming;
static PyObject *__pyx_kp_u_An_exception_prevented_resuming_2;
static PyObject *__pyx_kp_u_An_exception_prevented_resuming_3;
static PyObject *__pyx_n_s_Animation;
static PyObject *__pyx_n_s_AnimationBase;
static PyObject *__pyx_n_s_AnimationManager;
static PyObject *__pyx_n_s_AnimationType;
static PyObject *__pyx_n_s_ArithmeticError;
static PyObject *__pyx_n_s_BlendType;
static PyObject *__pyx_kp_u_Copyright_c_2020_Tiziano_Bettio;
static PyObject *__pyx_kp_u_Could_not_pause_Animation;
static PyObject *__pyx_kp_u_Could_not_pause_Interval;
static PyObject *__pyx_kp_u_Could_not_pause_Sequence;
static PyObject *__pyx_kp_u_Could_not_play_Animation;
static PyObject *__pyx_kp_u_Could_not_play_Interval;
static PyObject *__pyx_kp_u_Could_not_play_Sequence;
static PyObject *__pyx_kp_u_Could_not_resume_Animation;
static PyObject *__pyx_kp_u_Could_not_resume_Interval;
static PyObject *__pyx_kp_u_Could_not_resume_Sequence;
static PyObject *__pyx_kp_u_Could_not_stop_Animation;
static PyObject *__pyx_kp_u_Could_not_stop_Interval;
static PyObject *__pyx_kp_u_Could_not_stop_Sequence;
static PyObject *__pyx_n_s_DepthAnimation;
static PyObject *__pyx_n_s_DepthInterval;
static PyObject *__pyx_n_s_EASE_IN;
static PyObject *__pyx_n_s_EASE_IN_OUT;
static PyObject *__pyx_n_s_EASE_OUT;
static PyObject *__pyx_n_s_Enum;
static PyObject *__pyx_kp_s_Enumerations_of_blend_types;
static PyObject *__pyx_kp_u_Expected_positive_non_zero_value;
static PyObject *__pyx_kp_u_Illegal_combination_of_arguments;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_Interval;
static PyObject *__pyx_n_u_MIT;
static PyObject *__pyx_n_s_NO_BLEND;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_u_Not_the_same_Node;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PosAnimation;
static PyObject *__pyx_n_s_PosInterval;
static PyObject *__pyx_n_s_RotationAnimation;
static PyObject *__pyx_n_s_RotationCenterAnimation;
static PyObject *__pyx_n_s_RotationCenterInterval;
static PyObject *__pyx_n_s_RotationInterval;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_ScaleAnimation;
static PyObject *__pyx_n_s_ScaleInterval;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_kp_u_Tiziano_Bettio;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Unable_to_add_depth_to_Animation;
static PyObject *__pyx_kp_u_Unable_to_add_depth_to_Interval;
static PyObject *__pyx_kp_u_Unable_to_add_position_to_Animat;
static PyObject *__pyx_kp_u_Unable_to_add_position_to_Interv;
static PyObject *__pyx_kp_u_Unable_to_add_rotation_center_to;
static PyObject *__pyx_kp_u_Unable_to_add_rotation_center_to_2;
static PyObject *__pyx_kp_u_Unable_to_add_rotation_to_Animat;
static PyObject *__pyx_kp_u_Unable_to_add_rotation_to_Interv;
static PyObject *__pyx_kp_u_Unable_to_add_scale_to_Animation;
static PyObject *__pyx_kp_u_Unable_to_add_scale_to_Interval;
static PyObject *__pyx_kp_u_Unable_to_retrieve_Animation_sta;
static PyObject *__pyx_kp_u_Unable_to_retrieve_Interval_stat;
static PyObject *__pyx_kp_u_Unable_to_retrieve_Sequence_stat;
static PyObject *__pyx_kp_u_Unable_to_set_BlendType_to_Anima;
static PyObject *__pyx_kp_u_Unable_to_set_BlendType_to_Inter;
static PyObject *__pyx_kp_u_Unable_to_set_loop_to_Sequence;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_n_s_add_depth;
static PyObject *__pyx_n_s_add_pos;
static PyObject *__pyx_n_s_add_rotation;
static PyObject *__pyx_n_s_add_rotation_center;
static PyObject *__pyx_n_s_add_scale;
static PyObject *__pyx_n_s_anim;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_blend;
static PyObject *__pyx_n_u_blend;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_copyright;
static PyObject *__pyx_n_s_d1;
static PyObject *__pyx_n_s_d2;
static PyObject *__pyx_n_u_depth;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_duration;
static PyObject *__pyx_n_s_enum;
static PyObject *__pyx_n_s_foolysh_animation;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_ival;
static PyObject *__pyx_n_s_license;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_node_id;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_u_pos;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_AnimationManager;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rel;
static PyObject *__pyx_n_u_rotation;
static PyObject *__pyx_n_u_rotation_center;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_s2;
static PyObject *__pyx_n_u_scale;
static PyObject *__pyx_n_s_set_depth_speed;
static PyObject *__pyx_n_s_set_duration;
static PyObject *__pyx_n_s_set_node;
static PyObject *__pyx_n_s_set_pos_speed;
static PyObject *__pyx_n_s_set_rotation_center_speed;
static PyObject *__pyx_n_s_set_rotation_speed;
static PyObject *__pyx_n_s_set_scale_speed;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_speed;
static PyObject *__pyx_kp_s_src_foolysh_animation_pyx;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_v1;
static PyObject *__pyx_n_s_v2;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_version;
static int __pyx_pf_7foolysh_9animation_13AnimationBase___cinit__(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_2play(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_4stop(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_6pause(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_8resume(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_10status(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7foolysh_9animation_13AnimationType___cinit__(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_5blend___get__(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self); /* proto */
static int __pyx_pf_7foolysh_9animation_13AnimationType_5blend_2__set__(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_2set_node(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_4add_pos(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_rel); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_6add_scale(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_rel); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_8add_rotation(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_10add_rotation_center(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_12add_depth(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7foolysh_9animation_8Interval___cinit__(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, PyObject *__pyx_v_node, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_7foolysh_9animation_8Interval_2__dealloc__(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Interval_4set_duration(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Interval_6__iadd__(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Interval_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Interval_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7foolysh_9animation_9Animation___cinit__(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_node, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_7foolysh_9animation_9Animation_2__dealloc__(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_4set_pos_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_6set_scale_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_8set_rotation_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_10set_rotation_center_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_12set_depth_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_14__iadd__(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_9Animation_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7foolysh_9animation_8Sequence___cinit__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_7foolysh_9animation_8Sequence_2__dealloc__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_4loop___get__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self); /* proto */
static int __pyx_pf_7foolysh_9animation_8Sequence_4loop_2__set__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_loop); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_4append(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_6__iadd__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_PosInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_2ScaleInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_4RotationInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_6RotationCenterInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_8DepthInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_10PosAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_12ScaleAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_14RotationAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_16RotationCenterAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_18DepthAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_16AnimationManager_animate(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self, PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_16AnimationManager_2__reduce_cython__(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_16AnimationManager_4__setstate_cython__(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7foolysh_9animation_20__pyx_unpickle_AnimationManager(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7foolysh_9animation_AnimationBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7foolysh_9animation_AnimationType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7foolysh_9animation_Interval(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7foolysh_9animation_Animation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7foolysh_9animation_Sequence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7foolysh_9animation_AnimationManager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
/* Late includes */

/* "foolysh/animation.pyx":71
 *     cdef Node _node
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._loop = False
 * 
 */

/* Python wrapper */
static int __pyx_pw_7foolysh_9animation_13AnimationBase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7foolysh_9animation_13AnimationBase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase___cinit__(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7foolysh_9animation_13AnimationBase___cinit__(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "foolysh/animation.pyx":72
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self._loop = False             # <<<<<<<<<<<<<<
 * 
 *     def play(self):
 */
  __pyx_v_self->_loop = 0;

  /* "foolysh/animation.pyx":71
 *     cdef Node _node
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._loop = False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":74
 *         self._loop = False
 * 
 *     def play(self):             # <<<<<<<<<<<<<<
 *         """
 *         Starts the Animation on the next animation cycle. A reference is stored
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_3play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationBase_2play[] = "AnimationBase.play(self)\n\n        Starts the Animation on the next animation cycle. A reference is stored\n        to assure playback, even when the Animation goes out of scope.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_3play(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase_2play(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_2play(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self) {
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  char const *__pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("play", 0);

  /* "foolysh/animation.pyx":79
 *         to assure playback, even when the Animation goes out of scope.
 *         """
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             __ivals[self._id] = self
 *             try:
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":80
 *         """
 *         if isinstance(self, Interval):
 *             __ivals[self._id] = self             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).play_interval(self._id)
 */
    if (unlikely(__pyx_v_7foolysh_9animation___ivals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 80, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_7foolysh_9animation___ivals, __pyx_t_3, ((PyObject *)__pyx_v_self)) < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":81
 *         if isinstance(self, Interval):
 *             __ivals[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_interval(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "foolysh/animation.pyx":82
 *             __ivals[self._id] = self
 *             try:
 *                 deref(__am).play_interval(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not play Interval')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).play_interval(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 82, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":81
 *         if isinstance(self, Interval):
 *             __ivals[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_interval(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "foolysh/animation.pyx":83
 *             try:
 *                 deref(__am).play_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not play Interval')
 *                 __ivals.pop(self._id)
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 83, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":84
 *                 deref(__am).play_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not play Interval')             # <<<<<<<<<<<<<<
 *                 __ivals.pop(self._id)
 *                 raise e
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 84, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":85
 *             except ArithmeticError as e:
 *                 print('Could not play Interval')
 *                 __ivals.pop(self._id)             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          if (unlikely(__pyx_v_7foolysh_9animation___ivals == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
            __PYX_ERR(0, 85, __pyx_L15_error)
          }
          __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 85, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyDict_Pop(__pyx_v_7foolysh_9animation___ivals, __pyx_t_10, ((PyObject *)NULL)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 85, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":86
 *                 print('Could not play Interval')
 *                 __ivals.pop(self._id)
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             __anims[self._id] = self
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 86, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":83
 *             try:
 *                 deref(__am).play_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not play Interval')
 *                 __ivals.pop(self._id)
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":81
 *         if isinstance(self, Interval):
 *             __ivals[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_interval(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":79
 *         to assure playback, even when the Animation goes out of scope.
 *         """
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             __ivals[self._id] = self
 *             try:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":87
 *                 __ivals.pop(self._id)
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             __anims[self._id] = self
 *             try:
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":88
 *                 raise e
 *         elif isinstance(self, Animation):
 *             __anims[self._id] = self             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).play_animation(self._id)
 */
    if (unlikely(__pyx_v_7foolysh_9animation___anims == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 88, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (unlikely(PyDict_SetItem(__pyx_v_7foolysh_9animation___anims, __pyx_t_9, ((PyObject *)__pyx_v_self)) < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "foolysh/animation.pyx":89
 *         elif isinstance(self, Animation):
 *             __anims[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_animation(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "foolysh/animation.pyx":90
 *             __anims[self._id] = self
 *             try:
 *                 deref(__am).play_animation(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not play Animation')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).play_animation(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 90, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":89
 *         elif isinstance(self, Animation):
 *             __anims[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_animation(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":91
 *             try:
 *                 deref(__am).play_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not play Animation')
 *                 __anims.pop(self._id)
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_3) < 0) __PYX_ERR(0, 91, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":92
 *                 deref(__am).play_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not play Animation')             # <<<<<<<<<<<<<<
 *                 __anims.pop(self._id)
 *                 raise e
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 92, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":93
 *             except ArithmeticError as e:
 *                 print('Could not play Animation')
 *                 __anims.pop(self._id)             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Sequence):
 */
          if (unlikely(__pyx_v_7foolysh_9animation___anims == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
            __PYX_ERR(0, 93, __pyx_L32_error)
          }
          __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 93, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_10 = __Pyx_PyDict_Pop(__pyx_v_7foolysh_9animation___anims, __pyx_t_11, ((PyObject *)NULL)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 93, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":94
 *                 print('Could not play Animation')
 *                 __anims.pop(self._id)
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Sequence):
 *             __seqs[self._id] = self
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 94, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":91
 *             try:
 *                 deref(__am).play_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not play Animation')
 *                 __anims.pop(self._id)
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_20;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":89
 *         elif isinstance(self, Animation):
 *             __anims[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_animation(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":87
 *                 __ivals.pop(self._id)
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             __anims[self._id] = self
 *             try:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":95
 *                 __anims.pop(self._id)
 *                 raise e
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             __seqs[self._id] = self
 *             try:
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Sequence); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":96
 *                 raise e
 *         elif isinstance(self, Sequence):
 *             __seqs[self._id] = self             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).play_sequence(self._id)
 */
    if (unlikely(__pyx_v_7foolysh_9animation___seqs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 96, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_7foolysh_9animation___seqs, __pyx_t_3, ((PyObject *)__pyx_v_self)) < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":97
 *         elif isinstance(self, Sequence):
 *             __seqs[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_sequence(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "foolysh/animation.pyx":98
 *             __seqs[self._id] = self
 *             try:
 *                 deref(__am).play_sequence(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not play Sequence')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).play_sequence(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 98, __pyx_L38_error)
        }

        /* "foolysh/animation.pyx":97
 *         elif isinstance(self, Sequence):
 *             __seqs[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_sequence(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L43_try_end;
      __pyx_L38_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":99
 *             try:
 *                 deref(__am).play_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not play Sequence')
 *                 __seqs.pop(self._id)
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 99, __pyx_L40_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":100
 *                 deref(__am).play_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not play Sequence')             # <<<<<<<<<<<<<<
 *                 __seqs.pop(self._id)
 *                 raise e
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 100, __pyx_L49_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":101
 *             except ArithmeticError as e:
 *                 print('Could not play Sequence')
 *                 __seqs.pop(self._id)             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          if (unlikely(__pyx_v_7foolysh_9animation___seqs == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
            __PYX_ERR(0, 101, __pyx_L49_error)
          }
          __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 101, __pyx_L49_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyDict_Pop(__pyx_v_7foolysh_9animation___seqs, __pyx_t_10, ((PyObject *)NULL)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 101, __pyx_L49_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":102
 *                 print('Could not play Sequence')
 *                 __seqs.pop(self._id)
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 102, __pyx_L49_error)
        }

        /* "foolysh/animation.pyx":99
 *             try:
 *                 deref(__am).play_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not play Sequence')
 *                 __seqs.pop(self._id)
 */
        /*finally:*/ {
          __pyx_L49_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_21;
            goto __pyx_L40_except_error;
          }
        }
      }
      goto __pyx_L40_except_error;
      __pyx_L40_except_error:;

      /* "foolysh/animation.pyx":97
 *         elif isinstance(self, Sequence):
 *             __seqs[self._id] = self
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).play_sequence(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L43_try_end:;
    }

    /* "foolysh/animation.pyx":95
 *                 __anims.pop(self._id)
 *                 raise e
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             __seqs[self._id] = self
 *             try:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":104
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def stop(self):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 104, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":74
 *         self._loop = False
 * 
 *     def play(self):             # <<<<<<<<<<<<<<
 *         """
 *         Starts the Animation on the next animation cycle. A reference is stored
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("foolysh.animation.AnimationBase.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":106
 *             raise NotImplementedError
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         """
 *         Stop the Animation and remove eventual reference to allow for the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_5stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationBase_4stop[] = "AnimationBase.stop(self)\n\n        Stop the Animation and remove eventual reference to allow for the\n        Animation to go out of scope.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_5stop(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase_4stop(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_4stop(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self) {
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  char const *__pyx_t_19;
  char const *__pyx_t_20;
  __Pyx_RefNannySetupContext("stop", 0);

  /* "foolysh/animation.pyx":111
 *         Animation to go out of scope.
 *         """
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             if self._id in __ivals:
 *                 __ivals.pop(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":112
 *         """
 *         if isinstance(self, Interval):
 *             if self._id in __ivals:             # <<<<<<<<<<<<<<
 *                 __ivals.pop(self._id)
 *             try:
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_7foolysh_9animation___ivals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 112, __pyx_L1_error)
    }
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_3, __pyx_v_7foolysh_9animation___ivals, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "foolysh/animation.pyx":113
 *         if isinstance(self, Interval):
 *             if self._id in __ivals:
 *                 __ivals.pop(self._id)             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).stop_interval(self._id)
 */
      if (unlikely(__pyx_v_7foolysh_9animation___ivals == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
        __PYX_ERR(0, 113, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyDict_Pop(__pyx_v_7foolysh_9animation___ivals, __pyx_t_3, ((PyObject *)NULL)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "foolysh/animation.pyx":112
 *         """
 *         if isinstance(self, Interval):
 *             if self._id in __ivals:             # <<<<<<<<<<<<<<
 *                 __ivals.pop(self._id)
 *             try:
 */
    }

    /* "foolysh/animation.pyx":114
 *             if self._id in __ivals:
 *                 __ivals.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_interval(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "foolysh/animation.pyx":115
 *                 __ivals.pop(self._id)
 *             try:
 *                 deref(__am).stop_interval(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not stop Interval')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).stop_interval(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 115, __pyx_L5_error)
        }

        /* "foolysh/animation.pyx":114
 *             if self._id in __ivals:
 *                 __ivals.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_interval(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L10_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "foolysh/animation.pyx":116
 *             try:
 *                 deref(__am).stop_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not stop Interval')
 *                 raise e
 */
      __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_8) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_9) < 0) __PYX_ERR(0, 116, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_e = __pyx_t_3;
        /*try:*/ {

          /* "foolysh/animation.pyx":117
 *                 deref(__am).stop_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not stop Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 117, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":118
 *             except ArithmeticError as e:
 *                 print('Could not stop Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             if self._id in __anims:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 118, __pyx_L16_error)
        }

        /* "foolysh/animation.pyx":116
 *             try:
 *                 deref(__am).stop_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not stop Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L16_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_8 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
            goto __pyx_L7_except_error;
          }
        }
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "foolysh/animation.pyx":114
 *             if self._id in __ivals:
 *                 __ivals.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_interval(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L10_try_end:;
    }

    /* "foolysh/animation.pyx":111
 *         Animation to go out of scope.
 *         """
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             if self._id in __ivals:
 *                 __ivals.pop(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":119
 *                 print('Could not stop Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             if self._id in __anims:
 *                 __anims.pop(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":120
 *                 raise e
 *         elif isinstance(self, Animation):
 *             if self._id in __anims:             # <<<<<<<<<<<<<<
 *                 __anims.pop(self._id)
 *             try:
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (unlikely(__pyx_v_7foolysh_9animation___anims == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 120, __pyx_L1_error)
    }
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_9, __pyx_v_7foolysh_9animation___anims, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "foolysh/animation.pyx":121
 *         elif isinstance(self, Animation):
 *             if self._id in __anims:
 *                 __anims.pop(self._id)             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).stop_animation(self._id)
 */
      if (unlikely(__pyx_v_7foolysh_9animation___anims == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
        __PYX_ERR(0, 121, __pyx_L1_error)
      }
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = __Pyx_PyDict_Pop(__pyx_v_7foolysh_9animation___anims, __pyx_t_9, ((PyObject *)NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "foolysh/animation.pyx":120
 *                 raise e
 *         elif isinstance(self, Animation):
 *             if self._id in __anims:             # <<<<<<<<<<<<<<
 *                 __anims.pop(self._id)
 *             try:
 */
    }

    /* "foolysh/animation.pyx":122
 *             if self._id in __anims:
 *                 __anims.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_animation(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":123
 *                 __anims.pop(self._id)
 *             try:
 *                 deref(__am).stop_animation(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not stop Animation')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).stop_animation(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 123, __pyx_L23_error)
        }

        /* "foolysh/animation.pyx":122
 *             if self._id in __anims:
 *                 __anims.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_animation(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L28_try_end;
      __pyx_L23_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":124
 *             try:
 *                 deref(__am).stop_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not stop Animation')
 *                 raise e
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_9, &__pyx_t_4) < 0) __PYX_ERR(0, 124, __pyx_L25_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":125
 *                 deref(__am).stop_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not stop Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Sequence):
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 125, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":126
 *             except ArithmeticError as e:
 *                 print('Could not stop Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Sequence):
 *             if self._id in __seqs:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 126, __pyx_L34_error)
        }

        /* "foolysh/animation.pyx":124
 *             try:
 *                 deref(__am).stop_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not stop Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L34_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_11 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_19;
            goto __pyx_L25_except_error;
          }
        }
      }
      goto __pyx_L25_except_error;
      __pyx_L25_except_error:;

      /* "foolysh/animation.pyx":122
 *             if self._id in __anims:
 *                 __anims.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_animation(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L28_try_end:;
    }

    /* "foolysh/animation.pyx":119
 *                 print('Could not stop Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             if self._id in __anims:
 *                 __anims.pop(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":127
 *                 print('Could not stop Animation')
 *                 raise e
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             if self._id in __seqs:
 *                 __seqs.pop(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Sequence); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":128
 *                 raise e
 *         elif isinstance(self, Sequence):
 *             if self._id in __seqs:             # <<<<<<<<<<<<<<
 *                 __seqs.pop(self._id)
 *             try:
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_7foolysh_9animation___seqs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 128, __pyx_L1_error)
    }
    __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_4, __pyx_v_7foolysh_9animation___seqs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "foolysh/animation.pyx":129
 *         elif isinstance(self, Sequence):
 *             if self._id in __seqs:
 *                 __seqs.pop(self._id)             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).stop_sequence(self._id)
 */
      if (unlikely(__pyx_v_7foolysh_9animation___seqs == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
        __PYX_ERR(0, 129, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyDict_Pop(__pyx_v_7foolysh_9animation___seqs, __pyx_t_4, ((PyObject *)NULL)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":128
 *                 raise e
 *         elif isinstance(self, Sequence):
 *             if self._id in __seqs:             # <<<<<<<<<<<<<<
 *                 __seqs.pop(self._id)
 *             try:
 */
    }

    /* "foolysh/animation.pyx":130
 *             if self._id in __seqs:
 *                 __seqs.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_sequence(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "foolysh/animation.pyx":131
 *                 __seqs.pop(self._id)
 *             try:
 *                 deref(__am).stop_sequence(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not stop Sequence')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).stop_sequence(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 131, __pyx_L41_error)
        }

        /* "foolysh/animation.pyx":130
 *             if self._id in __seqs:
 *                 __seqs.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_sequence(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L46_try_end;
      __pyx_L41_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":132
 *             try:
 *                 deref(__am).stop_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not stop Sequence')
 *                 raise e
 */
      __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_8) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_4, &__pyx_t_3) < 0) __PYX_ERR(0, 132, __pyx_L43_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_e = __pyx_t_4;
        /*try:*/ {

          /* "foolysh/animation.pyx":133
 *                 deref(__am).stop_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not stop Sequence')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 133, __pyx_L52_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":134
 *             except ArithmeticError as e:
 *                 print('Could not stop Sequence')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 134, __pyx_L52_error)
        }

        /* "foolysh/animation.pyx":132
 *             try:
 *                 deref(__am).stop_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not stop Sequence')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L52_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_8 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_20;
            goto __pyx_L43_except_error;
          }
        }
      }
      goto __pyx_L43_except_error;
      __pyx_L43_except_error:;

      /* "foolysh/animation.pyx":130
 *             if self._id in __seqs:
 *                 __seqs.pop(self._id)
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).stop_sequence(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L46_try_end:;
    }

    /* "foolysh/animation.pyx":127
 *                 print('Could not stop Animation')
 *                 raise e
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             if self._id in __seqs:
 *                 __seqs.pop(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":136
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def pause(self):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":106
 *             raise NotImplementedError
 * 
 *     def stop(self):             # <<<<<<<<<<<<<<
 *         """
 *         Stop the Animation and remove eventual reference to allow for the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("foolysh.animation.AnimationBase.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":138
 *             raise NotImplementedError
 * 
 *     def pause(self):             # <<<<<<<<<<<<<<
 *         """Pause the Animation."""
 *         if isinstance(self, Interval):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_7pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationBase_6pause[] = "AnimationBase.pause(self)\nPause the Animation.";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_7pause(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase_6pause(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_6pause(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self) {
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  Py_UCS4 __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  char const *__pyx_t_22;
  char const *__pyx_t_23;
  char const *__pyx_t_24;
  char const *__pyx_t_25;
  char const *__pyx_t_26;
  __Pyx_RefNannySetupContext("pause", 0);

  /* "foolysh/animation.pyx":140
 *     def pause(self):
 *         """Pause the Animation."""
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).pause_interval(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":141
 *         """Pause the Animation."""
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_interval(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":142
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).pause_interval(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not pause Interval')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).pause_interval(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 142, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":141
 *         """Pause the Animation."""
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_interval(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":143
 *             try:
 *                 deref(__am).pause_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not pause Interval')
 *                 raise e
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 143, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":144
 *                 deref(__am).pause_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not pause Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 144, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":145
 *             except ArithmeticError as e:
 *                 print('Could not pause Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 145, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":143
 *             try:
 *                 deref(__am).pause_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not pause Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_6 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
            goto __pyx_L6_except_error;
          }
        }
      }

      /* "foolysh/animation.pyx":146
 *                 print('Could not pause Interval')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 146, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":147
 *                 raise e
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Interval: "{e}"')             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 147, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_An_exception_prevented_pausing_t);
          __pyx_t_19 += 46;
          __Pyx_GIVEREF(__pyx_kp_u_An_exception_prevented_pausing_t);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_An_exception_prevented_pausing_t);
          __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 147, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_21);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_INCREF(__pyx_kp_u__8);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__8);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__8);
          __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 147, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 147, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "foolysh/animation.pyx":146
 *                 print('Could not pause Interval')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
            goto __pyx_L27;
          }
          __pyx_L26_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_11 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_22;
            goto __pyx_L6_except_error;
          }
          __pyx_L27:;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":141
 *         """Pause the Animation."""
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_interval(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":140
 *     def pause(self):
 *         """Pause the Animation."""
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).pause_interval(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":148
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).pause_animation(self._id)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":149
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_animation(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":150
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).pause_animation(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not pause Animation')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).pause_animation(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 150, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":149
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_animation(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L37_try_end;
      __pyx_L32_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":151
 *             try:
 *                 deref(__am).pause_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not pause Animation')
 *                 raise e
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 151, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":152
 *                 deref(__am).pause_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not pause Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 152, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":153
 *             except ArithmeticError as e:
 *                 print('Could not pause Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 153, __pyx_L43_error)
        }

        /* "foolysh/animation.pyx":151
 *             try:
 *                 deref(__am).pause_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not pause Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L43_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_6 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_23 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_23;
            goto __pyx_L34_except_error;
          }
        }
      }

      /* "foolysh/animation.pyx":154
 *                 print('Could not pause Animation')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 154, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":155
 *                 raise e
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Animation: "{e}"')             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Sequence):
 *             try:
 */
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 155, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_An_exception_prevented_pausing_t_2);
          __pyx_t_19 += 47;
          __Pyx_GIVEREF(__pyx_kp_u_An_exception_prevented_pausing_t_2);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_An_exception_prevented_pausing_t_2);
          __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 155, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_21);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_INCREF(__pyx_kp_u__8);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__8);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__8);
          __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 155, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 155, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "foolysh/animation.pyx":154
 *                 print('Could not pause Animation')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
            goto __pyx_L55;
          }
          __pyx_L54_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_11 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_24 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_24;
            goto __pyx_L34_except_error;
          }
          __pyx_L55:;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L33_exception_handled;
      }
      goto __pyx_L34_except_error;
      __pyx_L34_except_error:;

      /* "foolysh/animation.pyx":149
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_animation(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L33_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      __pyx_L37_try_end:;
    }

    /* "foolysh/animation.pyx":148
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Interval: "{e}"')
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).pause_animation(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":156
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).pause_sequence(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Sequence); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":157
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_sequence(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":158
 *         elif isinstance(self, Sequence):
 *             try:
 *                 deref(__am).pause_sequence(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not pause Sequence')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).pause_sequence(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 158, __pyx_L60_error)
        }

        /* "foolysh/animation.pyx":157
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_sequence(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L65_try_end;
      __pyx_L60_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":159
 *             try:
 *                 deref(__am).pause_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not pause Sequence')
 *                 raise e
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 159, __pyx_L62_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":160
 *                 deref(__am).pause_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not pause Sequence')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 160, __pyx_L71_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":161
 *             except ArithmeticError as e:
 *                 print('Could not pause Sequence')
 *                 raise e             # <<<<<<<<<<<<<<
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Sequence: "{e}"')
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 161, __pyx_L71_error)
        }

        /* "foolysh/animation.pyx":159
 *             try:
 *                 deref(__am).pause_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not pause Sequence')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L71_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_6 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_25 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_25;
            goto __pyx_L62_except_error;
          }
        }
      }

      /* "foolysh/animation.pyx":162
 *                 print('Could not pause Sequence')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented pausing the Sequence: "{e}"')
 *         else:
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 162, __pyx_L62_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":163
 *                 raise e
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Sequence: "{e}"')             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 163, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_An_exception_prevented_pausing_t_3);
          __pyx_t_19 += 46;
          __Pyx_GIVEREF(__pyx_kp_u_An_exception_prevented_pausing_t_3);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_An_exception_prevented_pausing_t_3);
          __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 163, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_21);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_INCREF(__pyx_kp_u__8);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__8);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__8);
          __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 163, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 163, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "foolysh/animation.pyx":162
 *                 print('Could not pause Sequence')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented pausing the Sequence: "{e}"')
 *         else:
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
            goto __pyx_L83;
          }
          __pyx_L82_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_11 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_26 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_26;
            goto __pyx_L62_except_error;
          }
          __pyx_L83:;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L61_exception_handled;
      }
      goto __pyx_L62_except_error;
      __pyx_L62_except_error:;

      /* "foolysh/animation.pyx":157
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).pause_sequence(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L61_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L65_try_end:;
    }

    /* "foolysh/animation.pyx":156
 *             except RuntimeError as e:
 *                 print(f'An exception prevented pausing the Animation: "{e}"')
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).pause_sequence(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":165
 *                 print(f'An exception prevented pausing the Sequence: "{e}"')
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def resume(self):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 165, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":138
 *             raise NotImplementedError
 * 
 *     def pause(self):             # <<<<<<<<<<<<<<
 *         """Pause the Animation."""
 *         if isinstance(self, Interval):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("foolysh.animation.AnimationBase.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":167
 *             raise NotImplementedError
 * 
 *     def resume(self):             # <<<<<<<<<<<<<<
 *         """Resume the Animation."""
 *         if isinstance(self, Interval):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_9resume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationBase_8resume[] = "AnimationBase.resume(self)\nResume the Animation.";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_9resume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resume (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase_8resume(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_8resume(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self) {
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  Py_UCS4 __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  char const *__pyx_t_22;
  char const *__pyx_t_23;
  char const *__pyx_t_24;
  char const *__pyx_t_25;
  char const *__pyx_t_26;
  __Pyx_RefNannySetupContext("resume", 0);

  /* "foolysh/animation.pyx":169
 *     def resume(self):
 *         """Resume the Animation."""
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).resume_interval(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":170
 *         """Resume the Animation."""
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_interval(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":171
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).resume_interval(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not resume Interval')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).resume_interval(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 171, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":170
 *         """Resume the Animation."""
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_interval(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":172
 *             try:
 *                 deref(__am).resume_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not resume Interval')
 *                 raise e
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 172, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":173
 *                 deref(__am).resume_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not resume Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 173, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":174
 *             except ArithmeticError as e:
 *                 print('Could not resume Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 174, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":172
 *             try:
 *                 deref(__am).resume_interval(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not resume Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_6 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
            goto __pyx_L6_except_error;
          }
        }
      }

      /* "foolysh/animation.pyx":175
 *                 print('Could not resume Interval')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 175, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":176
 *                 raise e
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Interval: "{e}"')             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 176, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_An_exception_prevented_resuming);
          __pyx_t_19 += 47;
          __Pyx_GIVEREF(__pyx_kp_u_An_exception_prevented_resuming);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_An_exception_prevented_resuming);
          __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 176, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_21);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_INCREF(__pyx_kp_u__8);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__8);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__8);
          __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 176, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 176, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "foolysh/animation.pyx":175
 *                 print('Could not resume Interval')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
            goto __pyx_L27;
          }
          __pyx_L26_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_11 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_22;
            goto __pyx_L6_except_error;
          }
          __pyx_L27:;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":170
 *         """Resume the Animation."""
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_interval(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":169
 *     def resume(self):
 *         """Resume the Animation."""
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).resume_interval(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":177
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).resume_animation(self._id)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":178
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_animation(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":179
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).resume_animation(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not resume Animation')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).resume_animation(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 179, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":178
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_animation(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L37_try_end;
      __pyx_L32_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":180
 *             try:
 *                 deref(__am).resume_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not resume Animation')
 *                 raise e
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 180, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":181
 *                 deref(__am).resume_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not resume Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 181, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":182
 *             except ArithmeticError as e:
 *                 print('Could not resume Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 182, __pyx_L43_error)
        }

        /* "foolysh/animation.pyx":180
 *             try:
 *                 deref(__am).resume_animation(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not resume Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L43_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_6 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_23 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_23;
            goto __pyx_L34_except_error;
          }
        }
      }

      /* "foolysh/animation.pyx":183
 *                 print('Could not resume Animation')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 183, __pyx_L34_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":184
 *                 raise e
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Animation: "{e}"')             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Sequence):
 *             try:
 */
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 184, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_An_exception_prevented_resuming_2);
          __pyx_t_19 += 48;
          __Pyx_GIVEREF(__pyx_kp_u_An_exception_prevented_resuming_2);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_An_exception_prevented_resuming_2);
          __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 184, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_21);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_INCREF(__pyx_kp_u__8);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__8);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__8);
          __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 184, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 184, __pyx_L54_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "foolysh/animation.pyx":183
 *                 print('Could not resume Animation')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
            goto __pyx_L55;
          }
          __pyx_L54_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_11 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_24 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_24;
            goto __pyx_L34_except_error;
          }
          __pyx_L55:;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L33_exception_handled;
      }
      goto __pyx_L34_except_error;
      __pyx_L34_except_error:;

      /* "foolysh/animation.pyx":178
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_animation(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L33_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      __pyx_L37_try_end:;
    }

    /* "foolysh/animation.pyx":177
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Interval: "{e}"')
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).resume_animation(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":185
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).resume_sequence(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Sequence); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":186
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_sequence(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":187
 *         elif isinstance(self, Sequence):
 *             try:
 *                 deref(__am).resume_sequence(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Could not resume Sequence')
 */
        try {
          (*__pyx_v_7foolysh_9animation___am).resume_sequence(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 187, __pyx_L60_error)
        }

        /* "foolysh/animation.pyx":186
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_sequence(self._id)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L65_try_end;
      __pyx_L60_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":188
 *             try:
 *                 deref(__am).resume_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not resume Sequence')
 *                 raise e
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 188, __pyx_L62_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":189
 *                 deref(__am).resume_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not resume Sequence')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 189, __pyx_L71_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "foolysh/animation.pyx":190
 *             except ArithmeticError as e:
 *                 print('Could not resume Sequence')
 *                 raise e             # <<<<<<<<<<<<<<
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Sequence: "{e}"')
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 190, __pyx_L71_error)
        }

        /* "foolysh/animation.pyx":188
 *             try:
 *                 deref(__am).resume_sequence(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Could not resume Sequence')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L71_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_6 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_25 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            }
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
            __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_25;
            goto __pyx_L62_except_error;
          }
        }
      }

      /* "foolysh/animation.pyx":191
 *                 print('Could not resume Sequence')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented resuming the Sequence: "{e}"')
 *         else:
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 191, __pyx_L62_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __pyx_v_e = __pyx_t_8;
        /*try:*/ {

          /* "foolysh/animation.pyx":192
 *                 raise e
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Sequence: "{e}"')             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 192, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_19 = 0;
          __pyx_t_20 = 127;
          __Pyx_INCREF(__pyx_kp_u_An_exception_prevented_resuming_3);
          __pyx_t_19 += 47;
          __Pyx_GIVEREF(__pyx_kp_u_An_exception_prevented_resuming_3);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_An_exception_prevented_resuming_3);
          __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 192, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_21);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_INCREF(__pyx_kp_u__8);
          __pyx_t_19 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__8);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__8);
          __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 192, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 192, __pyx_L82_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "foolysh/animation.pyx":191
 *                 print('Could not resume Sequence')
 *                 raise e
 *             except RuntimeError as e:             # <<<<<<<<<<<<<<
 *                 print(f'An exception prevented resuming the Sequence: "{e}"')
 *         else:
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
            goto __pyx_L83;
          }
          __pyx_L82_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_11 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_26 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
            __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_13 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_26;
            goto __pyx_L62_except_error;
          }
          __pyx_L83:;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L61_exception_handled;
      }
      goto __pyx_L62_except_error;
      __pyx_L62_except_error:;

      /* "foolysh/animation.pyx":186
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).resume_sequence(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L61_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L65_try_end:;
    }

    /* "foolysh/animation.pyx":185
 *             except RuntimeError as e:
 *                 print(f'An exception prevented resuming the Animation: "{e}"')
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).resume_sequence(self._id)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":194
 *                 print(f'An exception prevented resuming the Sequence: "{e}"')
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def status(self):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 194, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":167
 *             raise NotImplementedError
 * 
 *     def resume(self):             # <<<<<<<<<<<<<<
 *         """Resume the Animation."""
 *         if isinstance(self, Interval):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("foolysh.animation.AnimationBase.resume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":196
 *             raise NotImplementedError
 * 
 *     def status(self):             # <<<<<<<<<<<<<<
 *         return self._status()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_11status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationBase_10status[] = "AnimationBase.status(self)";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_11status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("status (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase_10status(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_10status(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("status", 0);

  /* "foolysh/animation.pyx":197
 * 
 *     def status(self):
 *         return self._status()             # <<<<<<<<<<<<<<
 * 
 *     cdef char _status(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_char(((struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase *)__pyx_v_self->__pyx_vtab)->_status(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foolysh/animation.pyx":196
 *             raise NotImplementedError
 * 
 *     def status(self):             # <<<<<<<<<<<<<<
 *         return self._status()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.AnimationBase.status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":199
 *         return self._status()
 * 
 *     cdef char _status(self):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static char __pyx_f_7foolysh_9animation_13AnimationBase__status(struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self) {
  PyObject *__pyx_v_e = NULL;
  char __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  char const *__pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("_status", 0);

  /* "foolysh/animation.pyx":200
 * 
 *     cdef char _status(self):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 return deref(__am).get_interval_status(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":201
 *     cdef char _status(self):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_interval_status(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":202
 *         if isinstance(self, Interval):
 *             try:
 *                 return deref(__am).get_interval_status(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Interval status')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval_status(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 202, __pyx_L4_error)
        }
        __pyx_r = __pyx_t_6;
        goto __pyx_L8_try_return;

        /* "foolysh/animation.pyx":201
 *     cdef char _status(self):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_interval_status(self._id)
 *             except ArithmeticError as e:
 */
      }
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":203
 *             try:
 *                 return deref(__am).get_interval_status(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to retrieve Interval status')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase._status", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 203, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":204
 *                 return deref(__am).get_interval_status(self._id)
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Interval status')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 204, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":205
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Interval status')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 205, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":203
 *             try:
 *                 return deref(__am).get_interval_status(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to retrieve Interval status')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":201
 *     cdef char _status(self):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_interval_status(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
    }

    /* "foolysh/animation.pyx":200
 * 
 *     cdef char _status(self):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 return deref(__am).get_interval_status(self._id)
 */
  }

  /* "foolysh/animation.pyx":206
 *                 print('Unable to retrieve Interval status')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 return deref(__am).get_animation_status(self._id)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":207
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_animation_status(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":208
 *         elif isinstance(self, Animation):
 *             try:
 *                 return deref(__am).get_animation_status(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Animation status')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_animation_status(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 208, __pyx_L21_error)
        }
        __pyx_r = __pyx_t_6;
        goto __pyx_L25_try_return;

        /* "foolysh/animation.pyx":207
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_animation_status(self._id)
 *             except ArithmeticError as e:
 */
      }
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":209
 *             try:
 *                 return deref(__am).get_animation_status(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to retrieve Animation status')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase._status", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 209, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":210
 *                 return deref(__am).get_animation_status(self._id)
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Animation status')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Sequence):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 210, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":211
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Animation status')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Sequence):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 211, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":209
 *             try:
 *                 return deref(__am).get_animation_status(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to retrieve Animation status')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_20;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":207
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_animation_status(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L25_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L0;
    }

    /* "foolysh/animation.pyx":206
 *                 print('Unable to retrieve Interval status')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 return deref(__am).get_animation_status(self._id)
 */
  }

  /* "foolysh/animation.pyx":212
 *                 print('Unable to retrieve Animation status')
 *                 raise e
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             try:
 *                 return deref(__am).get_sequence_status(self._id)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Sequence); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":213
 *                 raise e
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_sequence_status(self._id)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":214
 *         elif isinstance(self, Sequence):
 *             try:
 *                 return deref(__am).get_sequence_status(self._id)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Sequence status')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_sequence_status(__pyx_v_self->_id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 214, __pyx_L38_error)
        }
        __pyx_r = __pyx_t_6;
        goto __pyx_L42_try_return;

        /* "foolysh/animation.pyx":213
 *                 raise e
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_sequence_status(self._id)
 *             except ArithmeticError as e:
 */
      }
      __pyx_L38_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":215
 *             try:
 *                 return deref(__am).get_sequence_status(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to retrieve Sequence status')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationBase._status", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 215, __pyx_L40_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":216
 *                 return deref(__am).get_sequence_status(self._id)
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Sequence status')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 216, __pyx_L49_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":217
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Sequence status')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 217, __pyx_L49_error)
        }

        /* "foolysh/animation.pyx":215
 *             try:
 *                 return deref(__am).get_sequence_status(self._id)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to retrieve Sequence status')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L49_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_21;
            goto __pyx_L40_except_error;
          }
        }
      }
      goto __pyx_L40_except_error;
      __pyx_L40_except_error:;

      /* "foolysh/animation.pyx":213
 *                 raise e
 *         elif isinstance(self, Sequence):
 *             try:             # <<<<<<<<<<<<<<
 *                 return deref(__am).get_sequence_status(self._id)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L42_try_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
    }

    /* "foolysh/animation.pyx":212
 *                 print('Unable to retrieve Animation status')
 *                 raise e
 *         elif isinstance(self, Sequence):             # <<<<<<<<<<<<<<
 *             try:
 *                 return deref(__am).get_sequence_status(self._id)
 */
  }

  /* "foolysh/animation.pyx":219
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 219, __pyx_L1_error)
  }

  /* "foolysh/animation.pyx":199
 *         return self._status()
 * 
 *     cdef char _status(self):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationBase._status", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationBase_12__reduce_cython__[] = "AnimationBase.__reduce_cython__(self)";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase_12__reduce_cython__(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.AnimationBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationBase_14__setstate_cython__[] = "AnimationBase.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationBase_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationBase_14__setstate_cython__(((struct __pyx_obj_7foolysh_9animation_AnimationBase *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationBase_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.AnimationBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":229
 *     cdef _BlendType _blend_type
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._modifiers = {}
 *         if 'blend' in kwargs:
 */

/* Python wrapper */
static int __pyx_pw_7foolysh_9animation_13AnimationType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7foolysh_9animation_13AnimationType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType___cinit__(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7foolysh_9animation_13AnimationType___cinit__(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  enum foolysh::animation::BlendType __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "foolysh/animation.pyx":230
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self._modifiers = {}             # <<<<<<<<<<<<<<
 *         if 'blend' in kwargs:
 *             if not isinstance(kwargs['blend'], BlendType):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_modifiers);
  __Pyx_DECREF(__pyx_v_self->_modifiers);
  __pyx_v_self->_modifiers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":231
 *     def __cinit__(self, *args, **kwargs):
 *         self._modifiers = {}
 *         if 'blend' in kwargs:             # <<<<<<<<<<<<<<
 *             if not isinstance(kwargs['blend'], BlendType):
 *                 raise TypeError
 */
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_blend, __pyx_v_kwargs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "foolysh/animation.pyx":232
 *         self._modifiers = {}
 *         if 'blend' in kwargs:
 *             if not isinstance(kwargs['blend'], BlendType):             # <<<<<<<<<<<<<<
 *                 raise TypeError
 *             self._blend_type = kwargs['blend'].value
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_kwargs, __pyx_n_u_blend); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_BlendType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_IsInstance(__pyx_t_1, __pyx_t_4); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "foolysh/animation.pyx":233
 *         if 'blend' in kwargs:
 *             if not isinstance(kwargs['blend'], BlendType):
 *                 raise TypeError             # <<<<<<<<<<<<<<
 *             self._blend_type = kwargs['blend'].value
 *         else:
 */
      __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
      __PYX_ERR(0, 233, __pyx_L1_error)

      /* "foolysh/animation.pyx":232
 *         self._modifiers = {}
 *         if 'blend' in kwargs:
 *             if not isinstance(kwargs['blend'], BlendType):             # <<<<<<<<<<<<<<
 *                 raise TypeError
 *             self._blend_type = kwargs['blend'].value
 */
    }

    /* "foolysh/animation.pyx":234
 *             if not isinstance(kwargs['blend'], BlendType):
 *                 raise TypeError
 *             self._blend_type = kwargs['blend'].value             # <<<<<<<<<<<<<<
 *         else:
 *             self._blend_type = _BlendType.NO_BLEND
 */
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_kwargs, __pyx_n_u_blend); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = ((enum foolysh::animation::BlendType)__Pyx_PyInt_As_enum__foolysh_3a__3a_animation_3a__3a_BlendType(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->_blend_type = __pyx_t_5;

    /* "foolysh/animation.pyx":231
 *     def __cinit__(self, *args, **kwargs):
 *         self._modifiers = {}
 *         if 'blend' in kwargs:             # <<<<<<<<<<<<<<
 *             if not isinstance(kwargs['blend'], BlendType):
 *                 raise TypeError
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":236
 *             self._blend_type = kwargs['blend'].value
 *         else:
 *             self._blend_type = _BlendType.NO_BLEND             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_v_self->_blend_type = foolysh::animation::NO_BLEND;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":229
 *     cdef _BlendType _blend_type
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._modifiers = {}
 *         if 'blend' in kwargs:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":239
 * 
 *     @property
 *     def blend(self):             # <<<<<<<<<<<<<<
 *         """
 *         :class:`BlendType` to be used.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_5blend_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_5blend_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_5blend___get__(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_5blend___get__(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "foolysh/animation.pyx":246
 *             :class:`BlendType` -> sets the blend type being used.
 *         """
 *         return BlendType(self._blend_type)             # <<<<<<<<<<<<<<
 * 
 *     @blend.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BlendType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_enum__foolysh_3a__3a_animation_3a__3a_BlendType(__pyx_v_self->_blend_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foolysh/animation.pyx":239
 * 
 *     @property
 *     def blend(self):             # <<<<<<<<<<<<<<
 *         """
 *         :class:`BlendType` to be used.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.blend.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":249
 * 
 *     @blend.setter
 *     def blend(self, blend):             # <<<<<<<<<<<<<<
 *         if not isinstance(blend, BlendType):
 *             raise TypeError
 */

/* Python wrapper */
static int __pyx_pw_7foolysh_9animation_13AnimationType_5blend_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_blend); /*proto*/
static int __pyx_pw_7foolysh_9animation_13AnimationType_5blend_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_blend) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_5blend_2__set__(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), ((PyObject *)__pyx_v_blend));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7foolysh_9animation_13AnimationType_5blend_2__set__(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_blend) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  enum foolysh::animation::BlendType __pyx_t_4;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "foolysh/animation.pyx":250
 *     @blend.setter
 *     def blend(self, blend):
 *         if not isinstance(blend, BlendType):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._set_blend(blend.value)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BlendType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_blend, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "foolysh/animation.pyx":251
 *     def blend(self, blend):
 *         if not isinstance(blend, BlendType):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         self._set_blend(blend.value)
 * 
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 251, __pyx_L1_error)

    /* "foolysh/animation.pyx":250
 *     @blend.setter
 *     def blend(self, blend):
 *         if not isinstance(blend, BlendType):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._set_blend(blend.value)
 */
  }

  /* "foolysh/animation.pyx":252
 *         if not isinstance(blend, BlendType):
 *             raise TypeError
 *         self._set_blend(blend.value)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _set_blend(self, _BlendType blend):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_blend, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = ((enum foolysh::animation::BlendType)__Pyx_PyInt_As_enum__foolysh_3a__3a_animation_3a__3a_BlendType(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_blend(__pyx_v_self, __pyx_t_4);

  /* "foolysh/animation.pyx":249
 * 
 *     @blend.setter
 *     def blend(self, blend):             # <<<<<<<<<<<<<<
 *         if not isinstance(blend, BlendType):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.blend.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":254
 *         self._set_blend(blend.value)
 * 
 *     cdef void _set_blend(self, _BlendType blend):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType__set_blend(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, enum foolysh::animation::BlendType __pyx_v_blend) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("_set_blend", 0);

  /* "foolysh/animation.pyx":255
 * 
 *     cdef void _set_blend(self, _BlendType blend):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":256
 *     cdef void _set_blend(self, _BlendType blend):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":257
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).set_blend(blend)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Interval')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 257, __pyx_L4_error)
        }
        __pyx_t_6->set_blend(__pyx_v_blend);

        /* "foolysh/animation.pyx":256
 *     cdef void _set_blend(self, _BlendType blend):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":258
 *             try:
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to set BlendType to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType._set_blend", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 258, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":259
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 259, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":260
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 260, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":258
 *             try:
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to set BlendType to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":256
 *     cdef void _set_blend(self, _BlendType blend):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":255
 * 
 *     cdef void _set_blend(self, _BlendType blend):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":261
 *                 print('Unable to set BlendType to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":262
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":263
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).set_blend(blend)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Animation')
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 263, __pyx_L21_error)
        }
        __pyx_t_20->set_blend(__pyx_v_blend);

        /* "foolysh/animation.pyx":262
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":264
 *             try:
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to set BlendType to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType._set_blend", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 264, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":265
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 265, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":266
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 266, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":264
 *             try:
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to set BlendType to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":262
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":261
 *                 print('Unable to set BlendType to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":268
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def set_node(self, node):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 268, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":254
 *         self._set_blend(blend.value)
 * 
 *     cdef void _set_blend(self, _BlendType blend):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType._set_blend", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":270
 *             raise NotImplementedError
 * 
 *     def set_node(self, node):             # <<<<<<<<<<<<<<
 *         """
 *         Set the :class:`~foolysh.scene.node.Node` that will be manipulated
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_3set_node(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_2set_node[] = "AnimationType.set_node(self, node)\n\n        Set the :class:`~foolysh.scene.node.Node` that will be manipulated\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_3set_node(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_node (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_2set_node(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_2set_node(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_node", 0);

  /* "foolysh/animation.pyx":274
 *         Set the :class:`~foolysh.scene.node.Node` that will be manipulated
 *         """
 *         if not isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._set_node(node)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_7foolysh_5scene_4node_Node); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":275
 *         """
 *         if not isinstance(node, Node):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         self._set_node(node)
 * 
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 275, __pyx_L1_error)

    /* "foolysh/animation.pyx":274
 *         Set the :class:`~foolysh.scene.node.Node` that will be manipulated
 *         """
 *         if not isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._set_node(node)
 */
  }

  /* "foolysh/animation.pyx":276
 *         if not isinstance(node, Node):
 *             raise TypeError
 *         self._set_node(node)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _set_node(self, Node node):
 */
  if (!(likely(((__pyx_v_node) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_node, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 276, __pyx_L1_error)
  ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_node(__pyx_v_self, ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_node));

  /* "foolysh/animation.pyx":270
 *             raise NotImplementedError
 * 
 *     def set_node(self, node):             # <<<<<<<<<<<<<<
 *         """
 *         Set the :class:`~foolysh.scene.node.Node` that will be manipulated
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("foolysh.animation.AnimationType.set_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":278
 *         self._set_node(node)
 * 
 *     cdef void _set_node(self, Node node):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))
 */

static void __pyx_f_7foolysh_9animation_13AnimationType__set_node(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_node) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_3;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_4;
  __Pyx_RefNannySetupContext("_set_node", 0);

  /* "foolysh/animation.pyx":279
 * 
 *     cdef void _set_node(self, Node node):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))
 *         elif isinstance(self, Animation):
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":280
 *     cdef void _set_node(self, Node node):
 *         if isinstance(self, Interval):
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             deref(__am).get_animation(self._id).set_node(deref(node.thisptr))
 */
    try {
      __pyx_t_3 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 280, __pyx_L1_error)
    }
    __pyx_t_3->set_node((*__pyx_v_node->thisptr));

    /* "foolysh/animation.pyx":279
 * 
 *     cdef void _set_node(self, Node node):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))
 *         elif isinstance(self, Animation):
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":281
 *         if isinstance(self, Interval):
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             deref(__am).get_animation(self._id).set_node(deref(node.thisptr))
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":282
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))
 *         elif isinstance(self, Animation):
 *             deref(__am).get_animation(self._id).set_node(deref(node.thisptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
    try {
      __pyx_t_4 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 282, __pyx_L1_error)
    }
    __pyx_t_4->set_node((*__pyx_v_node->thisptr));

    /* "foolysh/animation.pyx":281
 *         if isinstance(self, Interval):
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             deref(__am).get_animation(self._id).set_node(deref(node.thisptr))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":284
 *             deref(__am).get_animation(self._id).set_node(deref(node.thisptr))
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def add_pos(self, v1, v2=None, rel=None):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":278
 *         self._set_node(node)
 * 
 *     cdef void _set_node(self, Node node):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             deref(__am).get_interval(self._id).set_node(deref(node.thisptr))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType._set_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":286
 *             raise NotImplementedError
 * 
 *     def add_pos(self, v1, v2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add position modifier to AnimationType.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_5add_pos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_4add_pos[] = "AnimationType.add_pos(self, v1, v2=None, rel=None)\n\n        Add position modifier to AnimationType.\n\n        Args:\n            v1: :class:`~foolysh.tools.vec2.Vec2` end position or start\n                position, if `v2` is provided.\n            v2: :class:`~foolysh.tools.vec2.Vec2` see `v1`.\n            rel: :class:`~foolysh.scene.node.Node` optional relative Node.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_5add_pos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_pos (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v1,&__pyx_n_s_v2,&__pyx_n_s_rel,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_pos") < 0)) __PYX_ERR(0, 286, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_v1 = values[0];
    __pyx_v_v2 = values[1];
    __pyx_v_rel = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_pos", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_4add_pos(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), __pyx_v_v1, __pyx_v_v2, __pyx_v_rel);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_4add_pos(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_rel) {
  int __pyx_v_v1a;
  int __pyx_v_v2a;
  int __pyx_v_rela;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("add_pos", 0);

  /* "foolysh/animation.pyx":296
 *             rel: :class:`~foolysh.scene.node.Node` optional relative Node.
 *         """
 *         v1a = isinstance(v1, Vec2)             # <<<<<<<<<<<<<<
 *         v2a = isinstance(v2, Vec2)
 *         rela = isinstance(rel, Node)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2); 
  __pyx_v_v1a = __pyx_t_1;

  /* "foolysh/animation.pyx":297
 *         """
 *         v1a = isinstance(v1, Vec2)
 *         v2a = isinstance(v2, Vec2)             # <<<<<<<<<<<<<<
 *         rela = isinstance(rel, Node)
 *         if v1a and v2 is None and rel is None:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_v2, __pyx_ptype_7foolysh_5tools_4vec2_Vec2); 
  __pyx_v_v2a = __pyx_t_1;

  /* "foolysh/animation.pyx":298
 *         v1a = isinstance(v1, Vec2)
 *         v2a = isinstance(v2, Vec2)
 *         rela = isinstance(rel, Node)             # <<<<<<<<<<<<<<
 *         if v1a and v2 is None and rel is None:
 *             self.add_pos_e(v1)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node); 
  __pyx_v_rela = __pyx_t_1;

  /* "foolysh/animation.pyx":299
 *         v2a = isinstance(v2, Vec2)
 *         rela = isinstance(rel, Node)
 *         if v1a and v2 is None and rel is None:             # <<<<<<<<<<<<<<
 *             self.add_pos_e(v1)
 *         elif v1a and v2a and rel is None:
 */
  __pyx_t_2 = (__pyx_v_v1a != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_v2 == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_rel == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":300
 *         rela = isinstance(rel, Node)
 *         if v1a and v2 is None and rel is None:
 *             self.add_pos_e(v1)             # <<<<<<<<<<<<<<
 *         elif v1a and v2a and rel is None:
 *             self.add_pos_es(v1, v2)
 */
    if (!(likely(((__pyx_v_v1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 300, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_pos_e(__pyx_v_self, ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v1));

    /* "foolysh/animation.pyx":299
 *         v2a = isinstance(v2, Vec2)
 *         rela = isinstance(rel, Node)
 *         if v1a and v2 is None and rel is None:             # <<<<<<<<<<<<<<
 *             self.add_pos_e(v1)
 *         elif v1a and v2a and rel is None:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":301
 *         if v1a and v2 is None and rel is None:
 *             self.add_pos_e(v1)
 *         elif v1a and v2a and rel is None:             # <<<<<<<<<<<<<<
 *             self.add_pos_es(v1, v2)
 *         elif v1a and v2 is None and rela:
 */
  __pyx_t_2 = (__pyx_v_v1a != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_v2a != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_rel == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":302
 *             self.add_pos_e(v1)
 *         elif v1a and v2a and rel is None:
 *             self.add_pos_es(v1, v2)             # <<<<<<<<<<<<<<
 *         elif v1a and v2 is None and rela:
 *             self.add_pos_er(v1, rel)
 */
    if (!(likely(((__pyx_v_v1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 302, __pyx_L1_error)
    if (!(likely(((__pyx_v_v2) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v2, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 302, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_pos_es(__pyx_v_self, ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v1), ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v2));

    /* "foolysh/animation.pyx":301
 *         if v1a and v2 is None and rel is None:
 *             self.add_pos_e(v1)
 *         elif v1a and v2a and rel is None:             # <<<<<<<<<<<<<<
 *             self.add_pos_es(v1, v2)
 *         elif v1a and v2 is None and rela:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":303
 *         elif v1a and v2a and rel is None:
 *             self.add_pos_es(v1, v2)
 *         elif v1a and v2 is None and rela:             # <<<<<<<<<<<<<<
 *             self.add_pos_er(v1, rel)
 *         elif v1a and v2a and rela:
 */
  __pyx_t_3 = (__pyx_v_v1a != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_v2 == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_rela != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":304
 *             self.add_pos_es(v1, v2)
 *         elif v1a and v2 is None and rela:
 *             self.add_pos_er(v1, rel)             # <<<<<<<<<<<<<<
 *         elif v1a and v2a and rela:
 *             self.add_pos_esr(v1, v2, rel)
 */
    if (!(likely(((__pyx_v_v1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 304, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 304, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_pos_er(__pyx_v_self, ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v1), ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":303
 *         elif v1a and v2a and rel is None:
 *             self.add_pos_es(v1, v2)
 *         elif v1a and v2 is None and rela:             # <<<<<<<<<<<<<<
 *             self.add_pos_er(v1, rel)
 *         elif v1a and v2a and rela:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":305
 *         elif v1a and v2 is None and rela:
 *             self.add_pos_er(v1, rel)
 *         elif v1a and v2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_pos_esr(v1, v2, rel)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_v1a != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_v2a != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_rela != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L13_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":306
 *             self.add_pos_er(v1, rel)
 *         elif v1a and v2a and rela:
 *             self.add_pos_esr(v1, v2, rel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 */
    if (!(likely(((__pyx_v_v1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 306, __pyx_L1_error)
    if (!(likely(((__pyx_v_v2) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v2, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 306, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 306, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_pos_esr(__pyx_v_self, ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v1), ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v2), ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":305
 *         elif v1a and v2 is None and rela:
 *             self.add_pos_er(v1, rel)
 *         elif v1a and v2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_pos_esr(v1, v2, rel)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":308
 *             self.add_pos_esr(v1, v2, rel)
 *         else:
 *             raise TypeError('Illegal combination of arguments')             # <<<<<<<<<<<<<<
 *         self._modifiers['pos'] = (v1, v2, rel)
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 308, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":309
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 *         self._modifiers['pos'] = (v1, v2, rel)             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_pos_e(self, Vec2 v):
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_v1);
  __Pyx_GIVEREF(__pyx_v_v1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_v1);
  __Pyx_INCREF(__pyx_v_v2);
  __Pyx_GIVEREF(__pyx_v_v2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_v2);
  __Pyx_INCREF(__pyx_v_rel);
  __Pyx_GIVEREF(__pyx_v_rel);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_rel);
  if (unlikely(__pyx_v_self->_modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 309, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->_modifiers, __pyx_n_u_pos, __pyx_t_4) < 0)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "foolysh/animation.pyx":286
 *             raise NotImplementedError
 * 
 *     def add_pos(self, v1, v2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add position modifier to AnimationType.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":311
 *         self._modifiers['pos'] = (v1, v2, rel)
 * 
 *     cdef void add_pos_e(self, Vec2 v):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_pos_e", 0);

  /* "foolysh/animation.pyx":312
 * 
 *     cdef void add_pos_e(self, Vec2 v):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":313
 *     cdef void add_pos_e(self, Vec2 v):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":314
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 314, __pyx_L4_error)
        }
        __pyx_t_6->add_pos((*__pyx_v_v->thisptr));

        /* "foolysh/animation.pyx":313
 *     cdef void add_pos_e(self, Vec2 v):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":315
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 315, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":316
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":317
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 317, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":315
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":313
 *     cdef void add_pos_e(self, Vec2 v):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":312
 * 
 *     cdef void add_pos_e(self, Vec2 v):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":318
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":319
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":320
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 320, __pyx_L21_error)
        }
        __pyx_t_20->add_pos((*__pyx_v_v->thisptr));

        /* "foolysh/animation.pyx":319
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":321
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 321, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":322
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 322, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":323
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 323, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":321
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":319
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":318
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":325
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 325, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":311
 *         self._modifiers['pos'] = (v1, v2, rel)
 * 
 *     cdef void add_pos_e(self, Vec2 v):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_pos_e", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":327
 *             raise NotImplementedError
 * 
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v1, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v2) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_pos_es", 0);

  /* "foolysh/animation.pyx":328
 * 
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":329
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":330
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(             # <<<<<<<<<<<<<<
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 330, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":332
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_pos((*__pyx_v_v1->thisptr), (*__pyx_v_v2->thisptr));

        /* "foolysh/animation.pyx":329
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":334
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 334, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":335
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 335, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":336
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 336, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":334
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":329
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":328
 * 
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":337
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":338
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":339
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(             # <<<<<<<<<<<<<<
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 339, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":341
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_pos((*__pyx_v_v1->thisptr), (*__pyx_v_v2->thisptr));

        /* "foolysh/animation.pyx":338
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":343
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 343, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":344
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 344, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":345
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 345, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":343
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":338
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":337
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":347
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_pos_er(self, Vec2 v, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 347, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":327
 *             raise NotImplementedError
 * 
 *     cdef void add_pos_es(self, Vec2 v1, Vec2 v2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_pos_es", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":349
 *             raise NotImplementedError
 * 
 *     cdef void add_pos_er(self, Vec2 v, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_pos_er", 0);

  /* "foolysh/animation.pyx":350
 * 
 *     cdef void add_pos_er(self, Vec2 v, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":351
 *     cdef void add_pos_er(self, Vec2 v, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":352
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(             # <<<<<<<<<<<<<<
 *                     deref(v.thisptr),
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 352, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":354
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v.thisptr),
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_pos((*__pyx_v_v->thisptr), (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":351
 *     cdef void add_pos_er(self, Vec2 v, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":356
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 356, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":357
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 357, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":358
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 358, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":356
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":351
 *     cdef void add_pos_er(self, Vec2 v, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":350
 * 
 *     cdef void add_pos_er(self, Vec2 v, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":359
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":360
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":361
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(             # <<<<<<<<<<<<<<
 *                     deref(v.thisptr),
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 361, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":363
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v.thisptr),
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_pos((*__pyx_v_v->thisptr), (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":360
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":365
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 365, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":366
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 366, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":367
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 367, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":365
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":360
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":359
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":369
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 369, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":349
 *             raise NotImplementedError
 * 
 *     cdef void add_pos_er(self, Vec2 v, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_pos_er", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":371
 *             raise NotImplementedError
 * 
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_pos_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v1, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_pos_esr", 0);

  /* "foolysh/animation.pyx":372
 * 
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":373
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":374
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(             # <<<<<<<<<<<<<<
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr),
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 374, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":377
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr),
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_pos((*__pyx_v_v1->thisptr), (*__pyx_v_v2->thisptr), (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":373
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":379
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 379, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":380
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 380, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":381
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 381, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":379
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":373
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":372
 * 
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_pos(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":382
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":383
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":384
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(             # <<<<<<<<<<<<<<
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr),
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 384, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":387
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr),
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_pos((*__pyx_v_v1->thisptr), (*__pyx_v_v2->thisptr), (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":383
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":389
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_pos_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 389, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":390
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 390, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":391
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 391, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":389
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add position to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":383
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_pos(
 *                     deref(v1.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":382
 *                 print('Unable to add position to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_pos(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":393
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def add_scale(self, s1, s2=None, rel=None):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 393, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":371
 *             raise NotImplementedError
 * 
 *     cdef void add_pos_esr(self, Vec2 v1, Vec2 v2, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_pos_esr", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":395
 *             raise NotImplementedError
 * 
 *     def add_scale(self, s1, s2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add scale modifier to AnimationType.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_7add_scale(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_6add_scale[] = "AnimationType.add_scale(self, s1, s2=None, rel=None)\n\n        Add scale modifier to AnimationType.\n\n        Args:\n            s1: ``float``/``tuple[float, float]`` end scale or start scale, if\n                `s2` is provided.\n            s2: ``float``/``tuple[float, float]`` see `s1`.\n            rel: :class:`~foolysh.scene.node.Node` optional relative Node.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_7add_scale(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_scale (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_rel,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_scale") < 0)) __PYX_ERR(0, 395, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s1 = values[0];
    __pyx_v_s2 = values[1];
    __pyx_v_rel = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_scale", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 395, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_6add_scale(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), __pyx_v_s1, __pyx_v_s2, __pyx_v_rel);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_6add_scale(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_rel) {
  int __pyx_v_s1a;
  int __pyx_v_s2a;
  int __pyx_v_rela;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("add_scale", 0);
  __Pyx_INCREF(__pyx_v_s1);
  __Pyx_INCREF(__pyx_v_s2);

  /* "foolysh/animation.pyx":405
 *             rel: :class:`~foolysh.scene.node.Node` optional relative Node.
 *         """
 *         if isinstance(s1, (int, float)):             # <<<<<<<<<<<<<<
 *             s1 = (s1, ) * 2
 *             s1a = True
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_s1); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_s1); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":406
 *         """
 *         if isinstance(s1, (int, float)):
 *             s1 = (s1, ) * 2             # <<<<<<<<<<<<<<
 *             s1a = True
 *         elif isinstance(s1, (tuple, list)) and len(s1) == 2:
 */
    __pyx_t_4 = PyTuple_New(1 * 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 2; __pyx_temp++) {
        __Pyx_INCREF(__pyx_v_s1);
        __Pyx_GIVEREF(__pyx_v_s1);
        PyTuple_SET_ITEM(__pyx_t_4, __pyx_temp, __pyx_v_s1);
      }
    }
    __Pyx_DECREF_SET(__pyx_v_s1, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "foolysh/animation.pyx":407
 *         if isinstance(s1, (int, float)):
 *             s1 = (s1, ) * 2
 *             s1a = True             # <<<<<<<<<<<<<<
 *         elif isinstance(s1, (tuple, list)) and len(s1) == 2:
 *             s1a = isinstance(s1[0], (int, float))
 */
    __pyx_v_s1a = 1;

    /* "foolysh/animation.pyx":405
 *             rel: :class:`~foolysh.scene.node.Node` optional relative Node.
 *         """
 *         if isinstance(s1, (int, float)):             # <<<<<<<<<<<<<<
 *             s1 = (s1, ) * 2
 *             s1a = True
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":408
 *             s1 = (s1, ) * 2
 *             s1a = True
 *         elif isinstance(s1, (tuple, list)) and len(s1) == 2:             # <<<<<<<<<<<<<<
 *             s1a = isinstance(s1[0], (int, float))
 *             s1a = s1a and isinstance(s1[1], (int, float))
 */
  __pyx_t_3 = PyTuple_Check(__pyx_v_s1); 
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_5 = PyList_Check(__pyx_v_s1); 
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_6 = PyObject_Length(__pyx_v_s1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_6 == 2) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":409
 *             s1a = True
 *         elif isinstance(s1, (tuple, list)) and len(s1) == 2:
 *             s1a = isinstance(s1[0], (int, float))             # <<<<<<<<<<<<<<
 *             s1a = s1a and isinstance(s1[1], (int, float))
 *         else:
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_s1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_Check(__pyx_t_4); 
    __pyx_t_1 = (__pyx_t_3 != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
    __pyx_t_3 = (__pyx_t_1 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L10_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_s1a = __pyx_t_2;

    /* "foolysh/animation.pyx":410
 *         elif isinstance(s1, (tuple, list)) and len(s1) == 2:
 *             s1a = isinstance(s1[0], (int, float))
 *             s1a = s1a and isinstance(s1[1], (int, float))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_t_3 = (__pyx_v_s1a != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_s1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyInt_Check(__pyx_t_4); 
    __pyx_t_5 = (__pyx_t_1 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_5 = PyFloat_Check(__pyx_t_4); 
    __pyx_t_1 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_1;
    __pyx_L14_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_3 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L12_bool_binop_done:;
    __pyx_v_s1a = __pyx_t_2;

    /* "foolysh/animation.pyx":408
 *             s1 = (s1, ) * 2
 *             s1a = True
 *         elif isinstance(s1, (tuple, list)) and len(s1) == 2:             # <<<<<<<<<<<<<<
 *             s1a = isinstance(s1[0], (int, float))
 *             s1a = s1a and isinstance(s1[1], (int, float))
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":412
 *             s1a = s1a and isinstance(s1[1], (int, float))
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(s2, (int, float)):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 412, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":414
 *             raise TypeError
 * 
 *         if isinstance(s2, (int, float)):             # <<<<<<<<<<<<<<
 *             s2 = (s2, ) * 2
 *             s2a = True
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_s2); 
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_s2); 
  __pyx_t_1 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L17_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":415
 * 
 *         if isinstance(s2, (int, float)):
 *             s2 = (s2, ) * 2             # <<<<<<<<<<<<<<
 *             s2a = True
 *         elif isinstance(s2, (tuple, list)) and len(s2) == 2:
 */
    __pyx_t_4 = PyTuple_New(1 * 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 2; __pyx_temp++) {
        __Pyx_INCREF(__pyx_v_s2);
        __Pyx_GIVEREF(__pyx_v_s2);
        PyTuple_SET_ITEM(__pyx_t_4, __pyx_temp, __pyx_v_s2);
      }
    }
    __Pyx_DECREF_SET(__pyx_v_s2, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "foolysh/animation.pyx":416
 *         if isinstance(s2, (int, float)):
 *             s2 = (s2, ) * 2
 *             s2a = True             # <<<<<<<<<<<<<<
 *         elif isinstance(s2, (tuple, list)) and len(s2) == 2:
 *             s2a = isinstance(s2[0], (int, float))
 */
    __pyx_v_s2a = 1;

    /* "foolysh/animation.pyx":414
 *             raise TypeError
 * 
 *         if isinstance(s2, (int, float)):             # <<<<<<<<<<<<<<
 *             s2 = (s2, ) * 2
 *             s2a = True
 */
    goto __pyx_L16;
  }

  /* "foolysh/animation.pyx":417
 *             s2 = (s2, ) * 2
 *             s2a = True
 *         elif isinstance(s2, (tuple, list)) and len(s2) == 2:             # <<<<<<<<<<<<<<
 *             s2a = isinstance(s2[0], (int, float))
 *             s2a = s2a and isinstance(s2[1], (int, float))
 */
  __pyx_t_3 = PyTuple_Check(__pyx_v_s2); 
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L21_bool_binop_done;
  }
  __pyx_t_5 = PyList_Check(__pyx_v_s2); 
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L21_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_6 = PyObject_Length(__pyx_v_s2); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 417, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_6 == 2) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L19_bool_binop_done:;
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":418
 *             s2a = True
 *         elif isinstance(s2, (tuple, list)) and len(s2) == 2:
 *             s2a = isinstance(s2[0], (int, float))             # <<<<<<<<<<<<<<
 *             s2a = s2a and isinstance(s2[1], (int, float))
 *         elif s2 is None:
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_s2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_Check(__pyx_t_4); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_2 = PyFloat_Check(__pyx_t_4); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L23_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_s2a = __pyx_t_1;

    /* "foolysh/animation.pyx":419
 *         elif isinstance(s2, (tuple, list)) and len(s2) == 2:
 *             s2a = isinstance(s2[0], (int, float))
 *             s2a = s2a and isinstance(s2[1], (int, float))             # <<<<<<<<<<<<<<
 *         elif s2 is None:
 *             s2a = False
 */
    __pyx_t_3 = (__pyx_v_s2a != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_s2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyInt_Check(__pyx_t_4); 
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L27_bool_binop_done;
    }
    __pyx_t_5 = PyFloat_Check(__pyx_t_4); 
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L27_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L25_bool_binop_done:;
    __pyx_v_s2a = __pyx_t_1;

    /* "foolysh/animation.pyx":417
 *             s2 = (s2, ) * 2
 *             s2a = True
 *         elif isinstance(s2, (tuple, list)) and len(s2) == 2:             # <<<<<<<<<<<<<<
 *             s2a = isinstance(s2[0], (int, float))
 *             s2a = s2a and isinstance(s2[1], (int, float))
 */
    goto __pyx_L16;
  }

  /* "foolysh/animation.pyx":420
 *             s2a = isinstance(s2[0], (int, float))
 *             s2a = s2a and isinstance(s2[1], (int, float))
 *         elif s2 is None:             # <<<<<<<<<<<<<<
 *             s2a = False
 *         else:
 */
  __pyx_t_1 = (__pyx_v_s2 == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":421
 *             s2a = s2a and isinstance(s2[1], (int, float))
 *         elif s2 is None:
 *             s2a = False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_s2a = 0;

    /* "foolysh/animation.pyx":420
 *             s2a = isinstance(s2[0], (int, float))
 *             s2a = s2a and isinstance(s2[1], (int, float))
 *         elif s2 is None:             # <<<<<<<<<<<<<<
 *             s2a = False
 *         else:
 */
    goto __pyx_L16;
  }

  /* "foolysh/animation.pyx":423
 *             s2a = False
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(rel, Node):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 423, __pyx_L1_error)
  }
  __pyx_L16:;

  /* "foolysh/animation.pyx":425
 *             raise TypeError
 * 
 *         if isinstance(rel, Node):             # <<<<<<<<<<<<<<
 *             rela = True
 *         elif rel is None:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":426
 * 
 *         if isinstance(rel, Node):
 *             rela = True             # <<<<<<<<<<<<<<
 *         elif rel is None:
 *             rela = False
 */
    __pyx_v_rela = 1;

    /* "foolysh/animation.pyx":425
 *             raise TypeError
 * 
 *         if isinstance(rel, Node):             # <<<<<<<<<<<<<<
 *             rela = True
 *         elif rel is None:
 */
    goto __pyx_L29;
  }

  /* "foolysh/animation.pyx":427
 *         if isinstance(rel, Node):
 *             rela = True
 *         elif rel is None:             # <<<<<<<<<<<<<<
 *             rela = False
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rel == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":428
 *             rela = True
 *         elif rel is None:
 *             rela = False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_rela = 0;

    /* "foolysh/animation.pyx":427
 *         if isinstance(rel, Node):
 *             rela = True
 *         elif rel is None:             # <<<<<<<<<<<<<<
 *             rela = False
 *         else:
 */
    goto __pyx_L29;
  }

  /* "foolysh/animation.pyx":430
 *             rela = False
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if s1a and not s2a and not rela:
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 430, __pyx_L1_error)
  }
  __pyx_L29:;

  /* "foolysh/animation.pyx":432
 *             raise TypeError
 * 
 *         if s1a and not s2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_e(s1)
 *         elif s1a and s2a and not rela:
 */
  __pyx_t_1 = (__pyx_v_s1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L31_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_s2a != 0)) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L31_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_rela != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L31_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":433
 * 
 *         if s1a and not s2a and not rela:
 *             self.add_scale_e(s1)             # <<<<<<<<<<<<<<
 *         elif s1a and s2a and not rela:
 *             self.add_scale_es(s1, s2)
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v_s1))||((__pyx_v_s1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_s1)->tp_name), 0))) __PYX_ERR(0, 433, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_scale_e(__pyx_v_self, ((PyObject*)__pyx_v_s1));

    /* "foolysh/animation.pyx":432
 *             raise TypeError
 * 
 *         if s1a and not s2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_e(s1)
 *         elif s1a and s2a and not rela:
 */
    goto __pyx_L30;
  }

  /* "foolysh/animation.pyx":434
 *         if s1a and not s2a and not rela:
 *             self.add_scale_e(s1)
 *         elif s1a and s2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_es(s1, s2)
 *         elif s1a and not s2a and rela:
 */
  __pyx_t_1 = (__pyx_v_s1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L34_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_s2a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L34_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_rela != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L34_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":435
 *             self.add_scale_e(s1)
 *         elif s1a and s2a and not rela:
 *             self.add_scale_es(s1, s2)             # <<<<<<<<<<<<<<
 *         elif s1a and not s2a and rela:
 *             self.add_scale_er(s1, rel)
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v_s1))||((__pyx_v_s1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_s1)->tp_name), 0))) __PYX_ERR(0, 435, __pyx_L1_error)
    if (!(likely(PyTuple_CheckExact(__pyx_v_s2))||((__pyx_v_s2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_s2)->tp_name), 0))) __PYX_ERR(0, 435, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_scale_es(__pyx_v_self, ((PyObject*)__pyx_v_s1), ((PyObject*)__pyx_v_s2));

    /* "foolysh/animation.pyx":434
 *         if s1a and not s2a and not rela:
 *             self.add_scale_e(s1)
 *         elif s1a and s2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_es(s1, s2)
 *         elif s1a and not s2a and rela:
 */
    goto __pyx_L30;
  }

  /* "foolysh/animation.pyx":436
 *         elif s1a and s2a and not rela:
 *             self.add_scale_es(s1, s2)
 *         elif s1a and not s2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_er(s1, rel)
 *         elif s1a and s2a and rela:
 */
  __pyx_t_1 = (__pyx_v_s1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L37_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_s2a != 0)) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L37_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_rela != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L37_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":437
 *             self.add_scale_es(s1, s2)
 *         elif s1a and not s2a and rela:
 *             self.add_scale_er(s1, rel)             # <<<<<<<<<<<<<<
 *         elif s1a and s2a and rela:
 *             self.add_scale_esr(s1, s2, rel)
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v_s1))||((__pyx_v_s1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_s1)->tp_name), 0))) __PYX_ERR(0, 437, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 437, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_scale_er(__pyx_v_self, ((PyObject*)__pyx_v_s1), ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":436
 *         elif s1a and s2a and not rela:
 *             self.add_scale_es(s1, s2)
 *         elif s1a and not s2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_er(s1, rel)
 *         elif s1a and s2a and rela:
 */
    goto __pyx_L30;
  }

  /* "foolysh/animation.pyx":438
 *         elif s1a and not s2a and rela:
 *             self.add_scale_er(s1, rel)
 *         elif s1a and s2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_esr(s1, s2, rel)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_s1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L40_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_s2a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L40_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_rela != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L40_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":439
 *             self.add_scale_er(s1, rel)
 *         elif s1a and s2a and rela:
 *             self.add_scale_esr(s1, s2, rel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v_s1))||((__pyx_v_s1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_s1)->tp_name), 0))) __PYX_ERR(0, 439, __pyx_L1_error)
    if (!(likely(PyTuple_CheckExact(__pyx_v_s2))||((__pyx_v_s2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_s2)->tp_name), 0))) __PYX_ERR(0, 439, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 439, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_scale_esr(__pyx_v_self, ((PyObject*)__pyx_v_s1), ((PyObject*)__pyx_v_s2), ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":438
 *         elif s1a and not s2a and rela:
 *             self.add_scale_er(s1, rel)
 *         elif s1a and s2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_scale_esr(s1, s2, rel)
 *         else:
 */
    goto __pyx_L30;
  }

  /* "foolysh/animation.pyx":441
 *             self.add_scale_esr(s1, s2, rel)
 *         else:
 *             raise TypeError('Illegal combination of arguments')             # <<<<<<<<<<<<<<
 *         self._modifiers['scale'] = (s1, s2, rel)
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 441, __pyx_L1_error)
  }
  __pyx_L30:;

  /* "foolysh/animation.pyx":442
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 *         self._modifiers['scale'] = (s1, s2, rel)             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_scale_e(self, tuple s):
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_s1);
  __Pyx_GIVEREF(__pyx_v_s1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_s1);
  __Pyx_INCREF(__pyx_v_s2);
  __Pyx_GIVEREF(__pyx_v_s2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_s2);
  __Pyx_INCREF(__pyx_v_rel);
  __Pyx_GIVEREF(__pyx_v_rel);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_rel);
  if (unlikely(__pyx_v_self->_modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 442, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->_modifiers, __pyx_n_u_scale, __pyx_t_4) < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "foolysh/animation.pyx":395
 *             raise NotImplementedError
 * 
 *     def add_scale(self, s1, s2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add scale modifier to AnimationType.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s1);
  __Pyx_XDECREF(__pyx_v_s2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":444
 *         self._modifiers['scale'] = (s1, s2, rel)
 * 
 *     cdef void add_scale_e(self, tuple s):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s
 *         _s.sx = s[0]
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s) {
  foolysh::scene::Scale __pyx_v__s;
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_21;
  char const *__pyx_t_22;
  __Pyx_RefNannySetupContext("add_scale_e", 0);

  /* "foolysh/animation.pyx":446
 *     cdef void add_scale_e(self, tuple s):
 *         cdef _Scale _s
 *         _s.sx = s[0]             # <<<<<<<<<<<<<<
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 */
  if (unlikely(__pyx_v_s == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 446, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s.sx = __pyx_t_2;

  /* "foolysh/animation.pyx":447
 *         cdef _Scale _s
 *         _s.sx = s[0]
 *         _s.sy = s[1]             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */
  if (unlikely(__pyx_v_s == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 447, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s.sy = __pyx_t_2;

  /* "foolysh/animation.pyx":448
 *         _s.sx = s[0]
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 */
  __pyx_t_3 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":449
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "foolysh/animation.pyx":450
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')
 */
        try {
          __pyx_t_8 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 450, __pyx_L4_error)
        }
        __pyx_t_8->add_scale(__pyx_v__s);

        /* "foolysh/animation.pyx":449
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "foolysh/animation.pyx":451
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(0, 451, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":452
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 452, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":453
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 453, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":451
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            }
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":449
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":448
 *         _s.sx = s[0]
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":454
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_3)) {

    /* "foolysh/animation.pyx":455
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":456
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')
 */
        try {
          __pyx_t_21 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 456, __pyx_L21_error)
        }
        __pyx_t_21->add_scale(__pyx_v__s);

        /* "foolysh/animation.pyx":455
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "foolysh/animation.pyx":457
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_13) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_10, &__pyx_t_1) < 0) __PYX_ERR(0, 457, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":458
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 458, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":459
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 459, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":457
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __pyx_t_13 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_16, __pyx_t_15);
            }
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ErrRestore(__pyx_t_20, __pyx_t_19, __pyx_t_18);
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_22;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":455
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":454
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":461
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_scale_es(self, tuple s1, tuple s2):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 461, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":444
 *         self._modifiers['scale'] = (s1, s2, rel)
 * 
 *     cdef void add_scale_e(self, tuple s):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s
 *         _s.sx = s[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_scale_e", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":463
 *             raise NotImplementedError
 * 
 *     cdef void add_scale_es(self, tuple s1, tuple s2):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2) {
  foolysh::scene::Scale __pyx_v__s1;
  foolysh::scene::Scale __pyx_v__s2;
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_21;
  char const *__pyx_t_22;
  __Pyx_RefNannySetupContext("add_scale_es", 0);

  /* "foolysh/animation.pyx":465
 *     cdef void add_scale_es(self, tuple s1, tuple s2):
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]             # <<<<<<<<<<<<<<
 *         _s1.sy = s1[1]
 *         cdef _Scale _s2
 */
  if (unlikely(__pyx_v_s1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 465, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s1.sx = __pyx_t_2;

  /* "foolysh/animation.pyx":466
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]
 *         _s1.sy = s1[1]             # <<<<<<<<<<<<<<
 *         cdef _Scale _s2
 *         _s2.sx = s2[0]
 */
  if (unlikely(__pyx_v_s1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 466, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s1.sy = __pyx_t_2;

  /* "foolysh/animation.pyx":468
 *         _s1.sy = s1[1]
 *         cdef _Scale _s2
 *         _s2.sx = s2[0]             # <<<<<<<<<<<<<<
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 */
  if (unlikely(__pyx_v_s2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 468, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s2.sx = __pyx_t_2;

  /* "foolysh/animation.pyx":469
 *         cdef _Scale _s2
 *         _s2.sx = s2[0]
 *         _s2.sy = s2[1]             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */
  if (unlikely(__pyx_v_s2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 469, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s2.sy = __pyx_t_2;

  /* "foolysh/animation.pyx":470
 *         _s2.sx = s2[0]
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 */
  __pyx_t_3 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":471
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "foolysh/animation.pyx":472
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')
 */
        try {
          __pyx_t_8 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 472, __pyx_L4_error)
        }
        __pyx_t_8->add_scale(__pyx_v__s1, __pyx_v__s2);

        /* "foolysh/animation.pyx":471
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "foolysh/animation.pyx":473
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(0, 473, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":474
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 474, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":475
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 475, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":473
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            }
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":471
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":470
 *         _s2.sx = s2[0]
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(_s1, _s2)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":476
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_3)) {

    /* "foolysh/animation.pyx":477
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":478
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')
 */
        try {
          __pyx_t_21 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 478, __pyx_L21_error)
        }
        __pyx_t_21->add_scale(__pyx_v__s1, __pyx_v__s2);

        /* "foolysh/animation.pyx":477
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "foolysh/animation.pyx":479
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_13) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_10, &__pyx_t_1) < 0) __PYX_ERR(0, 479, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":480
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 480, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":481
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 481, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":479
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __pyx_t_13 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_16, __pyx_t_15);
            }
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ErrRestore(__pyx_t_20, __pyx_t_19, __pyx_t_18);
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_22;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":477
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":476
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(_s1, _s2)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":483
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_scale_er(self, tuple s, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 483, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":463
 *             raise NotImplementedError
 * 
 *     cdef void add_scale_es(self, tuple s1, tuple s2):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_scale_es", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":485
 *             raise NotImplementedError
 * 
 *     cdef void add_scale_er(self, tuple s, Node rel):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s
 *         _s.sx = s[0]
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  foolysh::scene::Scale __pyx_v__s;
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_21;
  char const *__pyx_t_22;
  __Pyx_RefNannySetupContext("add_scale_er", 0);

  /* "foolysh/animation.pyx":487
 *     cdef void add_scale_er(self, tuple s, Node rel):
 *         cdef _Scale _s
 *         _s.sx = s[0]             # <<<<<<<<<<<<<<
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 */
  if (unlikely(__pyx_v_s == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 487, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s.sx = __pyx_t_2;

  /* "foolysh/animation.pyx":488
 *         cdef _Scale _s
 *         _s.sx = s[0]
 *         _s.sy = s[1]             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */
  if (unlikely(__pyx_v_s == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 488, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s.sy = __pyx_t_2;

  /* "foolysh/animation.pyx":489
 *         _s.sx = s[0]
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(
 */
  __pyx_t_3 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":490
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(
 *                     _s,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "foolysh/animation.pyx":491
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(             # <<<<<<<<<<<<<<
 *                     _s,
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_8 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 491, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":493
 *                 deref(__am).get_interval(self._id).add_scale(
 *                     _s,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_8->add_scale(__pyx_v__s, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":490
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(
 *                     _s,
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "foolysh/animation.pyx":495
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(0, 495, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":496
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 496, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":497
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 497, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":495
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            }
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":490
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(
 *                     _s,
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":489
 *         _s.sx = s[0]
 *         _s.sy = s[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":498
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_3)) {

    /* "foolysh/animation.pyx":499
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(
 *                     _s,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":500
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(             # <<<<<<<<<<<<<<
 *                     _s,
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_21 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 500, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":502
 *                 deref(__am).get_animation(self._id).add_scale(
 *                     _s,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_21->add_scale(__pyx_v__s, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":499
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(
 *                     _s,
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "foolysh/animation.pyx":504
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_13) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_10, &__pyx_t_1) < 0) __PYX_ERR(0, 504, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":505
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 505, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":506
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 506, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":504
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __pyx_t_13 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_16, __pyx_t_15);
            }
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ErrRestore(__pyx_t_20, __pyx_t_19, __pyx_t_18);
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_22;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":499
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(
 *                     _s,
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":498
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":508
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_scale_esr(self, tuple s1, tuple s2, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 508, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":485
 *             raise NotImplementedError
 * 
 *     cdef void add_scale_er(self, tuple s, Node rel):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s
 *         _s.sx = s[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_scale_er", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":510
 *             raise NotImplementedError
 * 
 *     cdef void add_scale_esr(self, tuple s1, tuple s2, Node rel):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_scale_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  foolysh::scene::Scale __pyx_v__s1;
  foolysh::scene::Scale __pyx_v__s2;
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_21;
  char const *__pyx_t_22;
  __Pyx_RefNannySetupContext("add_scale_esr", 0);

  /* "foolysh/animation.pyx":512
 *     cdef void add_scale_esr(self, tuple s1, tuple s2, Node rel):
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]             # <<<<<<<<<<<<<<
 *         _s1.sy = s1[1]
 *         cdef _Scale _s2
 */
  if (unlikely(__pyx_v_s1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 512, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s1.sx = __pyx_t_2;

  /* "foolysh/animation.pyx":513
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]
 *         _s1.sy = s1[1]             # <<<<<<<<<<<<<<
 *         cdef _Scale _s2
 *         _s2.sx = s2[0]
 */
  if (unlikely(__pyx_v_s1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 513, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s1.sy = __pyx_t_2;

  /* "foolysh/animation.pyx":515
 *         _s1.sy = s1[1]
 *         cdef _Scale _s2
 *         _s2.sx = s2[0]             # <<<<<<<<<<<<<<
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 */
  if (unlikely(__pyx_v_s2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 515, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s2.sx = __pyx_t_2;

  /* "foolysh/animation.pyx":516
 *         cdef _Scale _s2
 *         _s2.sx = s2[0]
 *         _s2.sy = s2[1]             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */
  if (unlikely(__pyx_v_s2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 516, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_s2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v__s2.sy = __pyx_t_2;

  /* "foolysh/animation.pyx":517
 *         _s2.sx = s2[0]
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(
 */
  __pyx_t_3 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":518
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(
 *                     _s1,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "foolysh/animation.pyx":519
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(             # <<<<<<<<<<<<<<
 *                     _s1,
 *                     _s2,
 */
        try {
          __pyx_t_8 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 519, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":522
 *                     _s1,
 *                     _s2,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_8->add_scale(__pyx_v__s1, __pyx_v__s2, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":518
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(
 *                     _s1,
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "foolysh/animation.pyx":524
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(0, 524, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":525
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 525, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":526
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 526, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":524
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            }
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":518
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_scale(
 *                     _s1,
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":517
 *         _s2.sx = s2[0]
 *         _s2.sy = s2[1]
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_scale(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":527
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(
 */
  __pyx_t_4 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_3)) {

    /* "foolysh/animation.pyx":528
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(
 *                     _s1,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":529
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(             # <<<<<<<<<<<<<<
 *                     _s1,
 *                     _s2,
 */
        try {
          __pyx_t_21 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 529, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":532
 *                     _s1,
 *                     _s2,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_21->add_scale(__pyx_v__s1, __pyx_v__s2, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":528
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(
 *                     _s1,
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "foolysh/animation.pyx":534
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_13) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_scale_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_10, &__pyx_t_1) < 0) __PYX_ERR(0, 534, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_e = __pyx_t_10;
        /*try:*/ {

          /* "foolysh/animation.pyx":535
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 535, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "foolysh/animation.pyx":536
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 536, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":534
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add scale to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __pyx_t_13 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_16, __pyx_t_15);
            }
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ErrRestore(__pyx_t_20, __pyx_t_19, __pyx_t_18);
            __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
            __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_22;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":528
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_scale(
 *                     _s1,
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":527
 *                 print('Unable to add scale to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_scale(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":538
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def add_rotation(self, d1, d2=None, rel=None):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 538, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":510
 *             raise NotImplementedError
 * 
 *     cdef void add_scale_esr(self, tuple s1, tuple s2, Node rel):             # <<<<<<<<<<<<<<
 *         cdef _Scale _s1
 *         _s1.sx = s1[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_scale_esr", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":540
 *             raise NotImplementedError
 * 
 *     def add_rotation(self, d1, d2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add rotation modifier to AnimationType.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_9add_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_8add_rotation[] = "AnimationType.add_rotation(self, d1, d2=None, rel=None)\n\n        Add rotation modifier to AnimationType.\n\n        Args:\n            d1: ``float`` end angle in degrees or start angle, if `d2` is\n                provided.\n            d2: ``float`` see `d1`.\n            rel: :class:`~foolysh.scene.node.Node` optional relative Node.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_9add_rotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_d1 = 0;
  PyObject *__pyx_v_d2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rotation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d1,&__pyx_n_s_d2,&__pyx_n_s_rel,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_rotation") < 0)) __PYX_ERR(0, 540, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_d1 = values[0];
    __pyx_v_d2 = values[1];
    __pyx_v_rel = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_rotation", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 540, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_8add_rotation(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), __pyx_v_d1, __pyx_v_d2, __pyx_v_rel);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_8add_rotation(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel) {
  int __pyx_v_d1a;
  int __pyx_v_d2a;
  int __pyx_v_rela;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  float __pyx_t_4;
  float __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("add_rotation", 0);

  /* "foolysh/animation.pyx":550
 *             rel: :class:`~foolysh.scene.node.Node` optional relative Node.
 *         """
 *         if isinstance(d1, (int, float)):             # <<<<<<<<<<<<<<
 *             d1a = True
 *         else:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_d1); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_d1); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":551
 *         """
 *         if isinstance(d1, (int, float)):
 *             d1a = True             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_d1a = 1;

    /* "foolysh/animation.pyx":550
 *             rel: :class:`~foolysh.scene.node.Node` optional relative Node.
 *         """
 *         if isinstance(d1, (int, float)):             # <<<<<<<<<<<<<<
 *             d1a = True
 *         else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":553
 *             d1a = True
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(d2, (int, float)):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 553, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":555
 *             raise TypeError
 * 
 *         if isinstance(d2, (int, float)):             # <<<<<<<<<<<<<<
 *             d2a = True
 *         elif d2 is None:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_d2); 
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_d2); 
  __pyx_t_1 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L7_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":556
 * 
 *         if isinstance(d2, (int, float)):
 *             d2a = True             # <<<<<<<<<<<<<<
 *         elif d2 is None:
 *             d2a = False
 */
    __pyx_v_d2a = 1;

    /* "foolysh/animation.pyx":555
 *             raise TypeError
 * 
 *         if isinstance(d2, (int, float)):             # <<<<<<<<<<<<<<
 *             d2a = True
 *         elif d2 is None:
 */
    goto __pyx_L6;
  }

  /* "foolysh/animation.pyx":557
 *         if isinstance(d2, (int, float)):
 *             d2a = True
 *         elif d2 is None:             # <<<<<<<<<<<<<<
 *             d2a = False
 *         else:
 */
  __pyx_t_1 = (__pyx_v_d2 == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":558
 *             d2a = True
 *         elif d2 is None:
 *             d2a = False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_d2a = 0;

    /* "foolysh/animation.pyx":557
 *         if isinstance(d2, (int, float)):
 *             d2a = True
 *         elif d2 is None:             # <<<<<<<<<<<<<<
 *             d2a = False
 *         else:
 */
    goto __pyx_L6;
  }

  /* "foolysh/animation.pyx":560
 *             d2a = False
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(rel, Node):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 560, __pyx_L1_error)
  }
  __pyx_L6:;

  /* "foolysh/animation.pyx":562
 *             raise TypeError
 * 
 *         if isinstance(rel, Node):             # <<<<<<<<<<<<<<
 *             rela = True
 *         elif rel is None:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":563
 * 
 *         if isinstance(rel, Node):
 *             rela = True             # <<<<<<<<<<<<<<
 *         elif rel is None:
 *             rela = False
 */
    __pyx_v_rela = 1;

    /* "foolysh/animation.pyx":562
 *             raise TypeError
 * 
 *         if isinstance(rel, Node):             # <<<<<<<<<<<<<<
 *             rela = True
 *         elif rel is None:
 */
    goto __pyx_L9;
  }

  /* "foolysh/animation.pyx":564
 *         if isinstance(rel, Node):
 *             rela = True
 *         elif rel is None:             # <<<<<<<<<<<<<<
 *             rela = False
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rel == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":565
 *             rela = True
 *         elif rel is None:
 *             rela = False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_rela = 0;

    /* "foolysh/animation.pyx":564
 *         if isinstance(rel, Node):
 *             rela = True
 *         elif rel is None:             # <<<<<<<<<<<<<<
 *             rela = False
 *         else:
 */
    goto __pyx_L9;
  }

  /* "foolysh/animation.pyx":567
 *             rela = False
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if d1a and not d2a and not rela:
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 567, __pyx_L1_error)
  }
  __pyx_L9:;

  /* "foolysh/animation.pyx":569
 *             raise TypeError
 * 
 *         if d1a and not d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_e(d1)
 *         elif d1a and d2a and not rela:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_d2a != 0)) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_rela != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":570
 * 
 *         if d1a and not d2a and not rela:
 *             self.add_rotation_e(d1)             # <<<<<<<<<<<<<<
 *         elif d1a and d2a and not rela:
 *             self.add_rotation_es(d1, d2)
 */
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_d1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_rotation_e(__pyx_v_self, __pyx_t_4);

    /* "foolysh/animation.pyx":569
 *             raise TypeError
 * 
 *         if d1a and not d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_e(d1)
 *         elif d1a and d2a and not rela:
 */
    goto __pyx_L10;
  }

  /* "foolysh/animation.pyx":571
 *         if d1a and not d2a and not rela:
 *             self.add_rotation_e(d1)
 *         elif d1a and d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_es(d1, d2)
 *         elif d1a and not d2a and rela:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_d2a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_rela != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":572
 *             self.add_rotation_e(d1)
 *         elif d1a and d2a and not rela:
 *             self.add_rotation_es(d1, d2)             # <<<<<<<<<<<<<<
 *         elif d1a and not d2a and rela:
 *             self.add_rotation_er(d1, rel)
 */
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_d1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L1_error)
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_d2); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_rotation_es(__pyx_v_self, __pyx_t_4, __pyx_t_5);

    /* "foolysh/animation.pyx":571
 *         if d1a and not d2a and not rela:
 *             self.add_rotation_e(d1)
 *         elif d1a and d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_es(d1, d2)
 *         elif d1a and not d2a and rela:
 */
    goto __pyx_L10;
  }

  /* "foolysh/animation.pyx":573
 *         elif d1a and d2a and not rela:
 *             self.add_rotation_es(d1, d2)
 *         elif d1a and not d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_er(d1, rel)
 *         elif d1a and d2a and rela:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_d2a != 0)) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_rela != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L17_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":574
 *             self.add_rotation_es(d1, d2)
 *         elif d1a and not d2a and rela:
 *             self.add_rotation_er(d1, rel)             # <<<<<<<<<<<<<<
 *         elif d1a and d2a and rela:
 *             self.add_rotation_esr(d1, d2, rel)
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_d1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 574, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_rotation_er(__pyx_v_self, __pyx_t_5, ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":573
 *         elif d1a and d2a and not rela:
 *             self.add_rotation_es(d1, d2)
 *         elif d1a and not d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_er(d1, rel)
 *         elif d1a and d2a and rela:
 */
    goto __pyx_L10;
  }

  /* "foolysh/animation.pyx":575
 *         elif d1a and not d2a and rela:
 *             self.add_rotation_er(d1, rel)
 *         elif d1a and d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_esr(d1, d2, rel)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_d2a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_rela != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L20_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":576
 *             self.add_rotation_er(d1, rel)
 *         elif d1a and d2a and rela:
 *             self.add_rotation_esr(d1, d2, rel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_d1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L1_error)
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_d2); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 576, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_rotation_esr(__pyx_v_self, __pyx_t_5, __pyx_t_4, ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":575
 *         elif d1a and not d2a and rela:
 *             self.add_rotation_er(d1, rel)
 *         elif d1a and d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_rotation_esr(d1, d2, rel)
 *         else:
 */
    goto __pyx_L10;
  }

  /* "foolysh/animation.pyx":578
 *             self.add_rotation_esr(d1, d2, rel)
 *         else:
 *             raise TypeError('Illegal combination of arguments')             # <<<<<<<<<<<<<<
 *         self._modifiers['rotation'] = (d1, d2, rel)
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 578, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "foolysh/animation.pyx":579
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 *         self._modifiers['rotation'] = (d1, d2, rel)             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_rotation_e(self, float d):
 */
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_d1);
  __Pyx_GIVEREF(__pyx_v_d1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_d1);
  __Pyx_INCREF(__pyx_v_d2);
  __Pyx_GIVEREF(__pyx_v_d2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_d2);
  __Pyx_INCREF(__pyx_v_rel);
  __Pyx_GIVEREF(__pyx_v_rel);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_rel);
  if (unlikely(__pyx_v_self->_modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 579, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->_modifiers, __pyx_n_u_rotation, __pyx_t_6) < 0)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "foolysh/animation.pyx":540
 *             raise NotImplementedError
 * 
 *     def add_rotation(self, d1, d2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add rotation modifier to AnimationType.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":581
 *         self._modifiers['rotation'] = (d1, d2, rel)
 * 
 *     cdef void add_rotation_e(self, float d):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_rotation_e", 0);

  /* "foolysh/animation.pyx":582
 * 
 *     cdef void add_rotation_e(self, float d):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":583
 *     cdef void add_rotation_e(self, float d):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":584
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 584, __pyx_L4_error)
        }
        __pyx_t_6->add_rotation(__pyx_v_d);

        /* "foolysh/animation.pyx":583
 *     cdef void add_rotation_e(self, float d):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":585
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 585, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":586
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 586, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":587
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 587, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":585
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":583
 *     cdef void add_rotation_e(self, float d):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":582
 * 
 *     cdef void add_rotation_e(self, float d):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":588
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":589
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":590
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 590, __pyx_L21_error)
        }
        __pyx_t_20->add_rotation(__pyx_v_d);

        /* "foolysh/animation.pyx":589
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":591
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 591, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":592
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 592, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":593
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 593, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":591
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":589
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":588
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":595
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_rotation_es(self, float d1, float d2):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 595, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":581
 *         self._modifiers['rotation'] = (d1, d2, rel)
 * 
 *     cdef void add_rotation_e(self, float d):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_rotation_e", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":597
 *             raise NotImplementedError
 * 
 *     cdef void add_rotation_es(self, float d1, float d2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d1, float __pyx_v_d2) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_rotation_es", 0);

  /* "foolysh/animation.pyx":598
 * 
 *     cdef void add_rotation_es(self, float d1, float d2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":599
 *     cdef void add_rotation_es(self, float d1, float d2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":600
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 600, __pyx_L4_error)
        }
        __pyx_t_6->add_rotation(__pyx_v_d1, __pyx_v_d2);

        /* "foolysh/animation.pyx":599
 *     cdef void add_rotation_es(self, float d1, float d2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":601
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 601, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":602
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 602, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":603
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 603, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":601
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":599
 *     cdef void add_rotation_es(self, float d1, float d2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":598
 * 
 *     cdef void add_rotation_es(self, float d1, float d2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(d1, d2)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":604
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":605
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":606
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 606, __pyx_L21_error)
        }
        __pyx_t_20->add_rotation(__pyx_v_d1, __pyx_v_d2);

        /* "foolysh/animation.pyx":605
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":607
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 607, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":608
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 608, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":609
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 609, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":607
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":605
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":604
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(d1, d2)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":611
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_rotation_er(self, float d, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 611, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":597
 *             raise NotImplementedError
 * 
 *     cdef void add_rotation_es(self, float d1, float d2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_rotation_es", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":613
 *             raise NotImplementedError
 * 
 *     cdef void add_rotation_er(self, float d, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_rotation_er", 0);

  /* "foolysh/animation.pyx":614
 * 
 *     cdef void add_rotation_er(self, float d, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":615
 *     cdef void add_rotation_er(self, float d, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(
 *                     d,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":616
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(             # <<<<<<<<<<<<<<
 *                     d,
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 616, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":618
 *                 deref(__am).get_interval(self._id).add_rotation(
 *                     d,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_rotation(__pyx_v_d, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":615
 *     cdef void add_rotation_er(self, float d, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(
 *                     d,
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":620
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 620, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":621
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 621, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":622
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 622, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":620
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":615
 *     cdef void add_rotation_er(self, float d, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(
 *                     d,
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":614
 * 
 *     cdef void add_rotation_er(self, float d, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":623
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":624
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(
 *                     d,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":625
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(             # <<<<<<<<<<<<<<
 *                     d,
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 625, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":627
 *                 deref(__am).get_animation(self._id).add_rotation(
 *                     d,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_rotation(__pyx_v_d, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":624
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(
 *                     d,
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":629
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 629, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":630
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 630, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":631
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 631, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":629
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":624
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(
 *                     d,
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":623
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":633
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 633, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":613
 *             raise NotImplementedError
 * 
 *     cdef void add_rotation_er(self, float d, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_rotation_er", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":635
 *             raise NotImplementedError
 * 
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_rotation_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, float __pyx_v_d1, float __pyx_v_d2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_rotation_esr", 0);

  /* "foolysh/animation.pyx":636
 * 
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":637
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(
 *                     d1,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":638
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(             # <<<<<<<<<<<<<<
 *                     d1,
 *                     d2,
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 638, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":641
 *                     d1,
 *                     d2,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_rotation(__pyx_v_d1, __pyx_v_d2, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":637
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(
 *                     d1,
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":643
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 643, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":644
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 644, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":645
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 645, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":643
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":637
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation(
 *                     d1,
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":636
 * 
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":646
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":647
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(
 *                     d1,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":648
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(             # <<<<<<<<<<<<<<
 *                     d1,
 *                     d2,
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 648, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":651
 *                     d1,
 *                     d2,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_rotation(__pyx_v_d1, __pyx_v_d2, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":647
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(
 *                     d1,
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":653
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 653, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":654
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 654, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":655
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 655, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":653
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":647
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation(
 *                     d1,
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":646
 *                 print('Unable to add rotation to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":657
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def add_rotation_center(self, v1, v2=None):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 657, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":635
 *             raise NotImplementedError
 * 
 *     cdef void add_rotation_esr(self, float d1, float d2, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_rotation_esr", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":659
 *             raise NotImplementedError
 * 
 *     def add_rotation_center(self, v1, v2=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add rotation center position modifier to AnimationType.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_11add_rotation_center(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_10add_rotation_center[] = "AnimationType.add_rotation_center(self, v1, v2=None)\n\n        Add rotation center position modifier to AnimationType.\n\n        Args:\n            v1: :class:`~foolysh.tools.vec2.Vec2` end position or start\n                position, if `v2` is provided.\n            v2: :class:`~foolysh.tools.vec2.Vec2` see `v1`.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_11add_rotation_center(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_rotation_center (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v1,&__pyx_n_s_v2,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v2);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_rotation_center") < 0)) __PYX_ERR(0, 659, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_v1 = values[0];
    __pyx_v_v2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_rotation_center", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 659, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_center", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_10add_rotation_center(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), __pyx_v_v1, __pyx_v_v2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_10add_rotation_center(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2) {
  int __pyx_v_v1a;
  int __pyx_v_v2a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_rotation_center", 0);

  /* "foolysh/animation.pyx":668
 *             v2: :class:`~foolysh.tools.vec2.Vec2` see `v1`.
 *         """
 *         if isinstance(v1, Vec2):             # <<<<<<<<<<<<<<
 *             v1a = True
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":669
 *         """
 *         if isinstance(v1, Vec2):
 *             v1a = True             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_v1a = 1;

    /* "foolysh/animation.pyx":668
 *             v2: :class:`~foolysh.tools.vec2.Vec2` see `v1`.
 *         """
 *         if isinstance(v1, Vec2):             # <<<<<<<<<<<<<<
 *             v1a = True
 *         else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":671
 *             v1a = True
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(v2, Vec2):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 671, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":673
 *             raise TypeError
 * 
 *         if isinstance(v2, Vec2):             # <<<<<<<<<<<<<<
 *             v2a = True
 *         elif v2 is None:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_v2, __pyx_ptype_7foolysh_5tools_4vec2_Vec2); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":674
 * 
 *         if isinstance(v2, Vec2):
 *             v2a = True             # <<<<<<<<<<<<<<
 *         elif v2 is None:
 *             v2a = False
 */
    __pyx_v_v2a = 1;

    /* "foolysh/animation.pyx":673
 *             raise TypeError
 * 
 *         if isinstance(v2, Vec2):             # <<<<<<<<<<<<<<
 *             v2a = True
 *         elif v2 is None:
 */
    goto __pyx_L4;
  }

  /* "foolysh/animation.pyx":675
 *         if isinstance(v2, Vec2):
 *             v2a = True
 *         elif v2 is None:             # <<<<<<<<<<<<<<
 *             v2a = False
 *         else:
 */
  __pyx_t_1 = (__pyx_v_v2 == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":676
 *             v2a = True
 *         elif v2 is None:
 *             v2a = False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_v2a = 0;

    /* "foolysh/animation.pyx":675
 *         if isinstance(v2, Vec2):
 *             v2a = True
 *         elif v2 is None:             # <<<<<<<<<<<<<<
 *             v2a = False
 *         else:
 */
    goto __pyx_L4;
  }

  /* "foolysh/animation.pyx":678
 *             v2a = False
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if v1a and not v2a:
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 678, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "foolysh/animation.pyx":680
 *             raise TypeError
 * 
 *         if v1a and not v2a:             # <<<<<<<<<<<<<<
 *             self.add_rot_center_e(v1)
 *         elif v1a and v2a:
 */
  __pyx_t_1 = (__pyx_v_v1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_v2a != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":681
 * 
 *         if v1a and not v2a:
 *             self.add_rot_center_e(v1)             # <<<<<<<<<<<<<<
 *         elif v1a and v2a:
 *             self.add_rot_center_es(v1, v2)
 */
    if (!(likely(((__pyx_v_v1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 681, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_rot_center_e(__pyx_v_self, ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v1));

    /* "foolysh/animation.pyx":680
 *             raise TypeError
 * 
 *         if v1a and not v2a:             # <<<<<<<<<<<<<<
 *             self.add_rot_center_e(v1)
 *         elif v1a and v2a:
 */
    goto __pyx_L5;
  }

  /* "foolysh/animation.pyx":682
 *         if v1a and not v2a:
 *             self.add_rot_center_e(v1)
 *         elif v1a and v2a:             # <<<<<<<<<<<<<<
 *             self.add_rot_center_es(v1, v2)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_v1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_v2a != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L8_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":683
 *             self.add_rot_center_e(v1)
 *         elif v1a and v2a:
 *             self.add_rot_center_es(v1, v2)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 */
    if (!(likely(((__pyx_v_v1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v1, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 683, __pyx_L1_error)
    if (!(likely(((__pyx_v_v2) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v2, __pyx_ptype_7foolysh_5tools_4vec2_Vec2))))) __PYX_ERR(0, 683, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_rot_center_es(__pyx_v_self, ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v1), ((struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *)__pyx_v_v2));

    /* "foolysh/animation.pyx":682
 *         if v1a and not v2a:
 *             self.add_rot_center_e(v1)
 *         elif v1a and v2a:             # <<<<<<<<<<<<<<
 *             self.add_rot_center_es(v1, v2)
 *         else:
 */
    goto __pyx_L5;
  }

  /* "foolysh/animation.pyx":685
 *             self.add_rot_center_es(v1, v2)
 *         else:
 *             raise TypeError('Illegal combination of arguments')             # <<<<<<<<<<<<<<
 *         self._modifiers['rotation_center'] = (v1, v2)
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 685, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "foolysh/animation.pyx":686
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 *         self._modifiers['rotation_center'] = (v1, v2)             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_rot_center_e(self, Vec2 v):
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_v1);
  __Pyx_GIVEREF(__pyx_v_v1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_v1);
  __Pyx_INCREF(__pyx_v_v2);
  __Pyx_GIVEREF(__pyx_v_v2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_v2);
  if (unlikely(__pyx_v_self->_modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 686, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->_modifiers, __pyx_n_u_rotation_center, __pyx_t_3) < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "foolysh/animation.pyx":659
 *             raise NotImplementedError
 * 
 *     def add_rotation_center(self, v1, v2=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add rotation center position modifier to AnimationType.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rotation_center", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":688
 *         self._modifiers['rotation_center'] = (v1, v2)
 * 
 *     cdef void add_rot_center_e(self, Vec2 v):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_rot_center_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_rot_center_e", 0);

  /* "foolysh/animation.pyx":689
 * 
 *     cdef void add_rot_center_e(self, Vec2 v):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":690
 *     cdef void add_rot_center_e(self, Vec2 v):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v.thisptr)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":691
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation_center(             # <<<<<<<<<<<<<<
 *                     deref(v.thisptr)
 *                 )
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 691, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":692
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_rotation_center((*__pyx_v_v->thisptr));

        /* "foolysh/animation.pyx":690
 *     cdef void add_rot_center_e(self, Vec2 v):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v.thisptr)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":694
 *                     deref(v.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rot_center_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 694, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":695
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 695, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":696
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 696, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":694
 *                     deref(v.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":690
 *     cdef void add_rot_center_e(self, Vec2 v):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v.thisptr)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":689
 * 
 *     cdef void add_rot_center_e(self, Vec2 v):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":697
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":698
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v.thisptr)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":699
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation_center(             # <<<<<<<<<<<<<<
 *                     deref(v.thisptr)
 *                 )
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 699, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":700
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_rotation_center((*__pyx_v_v->thisptr));

        /* "foolysh/animation.pyx":698
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v.thisptr)
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":702
 *                     deref(v.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rot_center_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 702, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":703
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 703, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":704
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 704, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":702
 *                     deref(v.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":698
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v.thisptr)
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":697
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":706
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 706, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":688
 *         self._modifiers['rotation_center'] = (v1, v2)
 * 
 *     cdef void add_rot_center_e(self, Vec2 v):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_rot_center_e", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":708
 *             raise NotImplementedError
 * 
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_rot_center_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v1, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *__pyx_v_v2) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_rot_center_es", 0);

  /* "foolysh/animation.pyx":709
 * 
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":710
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":711
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation_center(             # <<<<<<<<<<<<<<
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 711, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":713
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_rotation_center((*__pyx_v_v1->thisptr), (*__pyx_v_v2->thisptr));

        /* "foolysh/animation.pyx":710
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":715
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rot_center_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 715, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":716
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 716, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":717
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 717, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":715
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":710
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":709
 * 
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_rotation_center(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":718
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":719
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":720
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation_center(             # <<<<<<<<<<<<<<
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 720, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":722
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 *                     deref(v2.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_rotation_center((*__pyx_v_v1->thisptr), (*__pyx_v_v2->thisptr));

        /* "foolysh/animation.pyx":719
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":724
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_rot_center_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 724, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":725
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 725, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":726
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 726, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":724
 *                     deref(v2.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add rotation center to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":719
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 *                     deref(v1.thisptr),
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":718
 *                 print('Unable to add rotation center to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_rotation_center(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":728
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def add_depth(self, d1, d2=None, rel=None):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 728, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":708
 *             raise NotImplementedError
 * 
 *     cdef void add_rot_center_es(self, Vec2 v1, Vec2 v2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_rot_center_es", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":730
 *             raise NotImplementedError
 * 
 *     def add_depth(self, d1, d2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add depth modifier to AnimationType.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_13add_depth(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_12add_depth[] = "AnimationType.add_depth(self, d1, d2=None, rel=None)\n\n        Add depth modifier to AnimationType.\n\n        Args:\n            d1: ``int`` end depth or start depth, if `d2` is provided.\n            d2: ``int`` see `d1`.\n            rel: :class:`~foolysh.scene.node.Node` optional relative Node.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_13add_depth(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_d1 = 0;
  PyObject *__pyx_v_d2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_depth (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d1,&__pyx_n_s_d2,&__pyx_n_s_rel,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_depth") < 0)) __PYX_ERR(0, 730, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_d1 = values[0];
    __pyx_v_d2 = values[1];
    __pyx_v_rel = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_depth", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 730, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_12add_depth(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), __pyx_v_d1, __pyx_v_d2, __pyx_v_rel);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_12add_depth(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel) {
  int __pyx_v_d1a;
  int __pyx_v_d2a;
  int __pyx_v_rela;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("add_depth", 0);

  /* "foolysh/animation.pyx":739
 *             rel: :class:`~foolysh.scene.node.Node` optional relative Node.
 *         """
 *         if isinstance(d1, int):             # <<<<<<<<<<<<<<
 *             d1a = True
 *         else:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_d1); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":740
 *         """
 *         if isinstance(d1, int):
 *             d1a = True             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_d1a = 1;

    /* "foolysh/animation.pyx":739
 *             rel: :class:`~foolysh.scene.node.Node` optional relative Node.
 *         """
 *         if isinstance(d1, int):             # <<<<<<<<<<<<<<
 *             d1a = True
 *         else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":742
 *             d1a = True
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(d2, int):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 742, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":744
 *             raise TypeError
 * 
 *         if isinstance(d2, int):             # <<<<<<<<<<<<<<
 *             d2a = True
 *         elif d2 is None:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_d2); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":745
 * 
 *         if isinstance(d2, int):
 *             d2a = True             # <<<<<<<<<<<<<<
 *         elif d2 is None:
 *             d2a = False
 */
    __pyx_v_d2a = 1;

    /* "foolysh/animation.pyx":744
 *             raise TypeError
 * 
 *         if isinstance(d2, int):             # <<<<<<<<<<<<<<
 *             d2a = True
 *         elif d2 is None:
 */
    goto __pyx_L4;
  }

  /* "foolysh/animation.pyx":746
 *         if isinstance(d2, int):
 *             d2a = True
 *         elif d2 is None:             # <<<<<<<<<<<<<<
 *             d2a = False
 *         else:
 */
  __pyx_t_1 = (__pyx_v_d2 == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":747
 *             d2a = True
 *         elif d2 is None:
 *             d2a = False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_d2a = 0;

    /* "foolysh/animation.pyx":746
 *         if isinstance(d2, int):
 *             d2a = True
 *         elif d2 is None:             # <<<<<<<<<<<<<<
 *             d2a = False
 *         else:
 */
    goto __pyx_L4;
  }

  /* "foolysh/animation.pyx":749
 *             d2a = False
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(rel, Node):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 749, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "foolysh/animation.pyx":751
 *             raise TypeError
 * 
 *         if isinstance(rel, Node):             # <<<<<<<<<<<<<<
 *             rela = True
 *         elif rel is None:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":752
 * 
 *         if isinstance(rel, Node):
 *             rela = True             # <<<<<<<<<<<<<<
 *         elif rel is None:
 *             rela = False
 */
    __pyx_v_rela = 1;

    /* "foolysh/animation.pyx":751
 *             raise TypeError
 * 
 *         if isinstance(rel, Node):             # <<<<<<<<<<<<<<
 *             rela = True
 *         elif rel is None:
 */
    goto __pyx_L5;
  }

  /* "foolysh/animation.pyx":753
 *         if isinstance(rel, Node):
 *             rela = True
 *         elif rel is None:             # <<<<<<<<<<<<<<
 *             rela = False
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rel == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":754
 *             rela = True
 *         elif rel is None:
 *             rela = False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    __pyx_v_rela = 0;

    /* "foolysh/animation.pyx":753
 *         if isinstance(rel, Node):
 *             rela = True
 *         elif rel is None:             # <<<<<<<<<<<<<<
 *             rela = False
 *         else:
 */
    goto __pyx_L5;
  }

  /* "foolysh/animation.pyx":756
 *             rela = False
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *         if d1a and not d2a and not rela:
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 756, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "foolysh/animation.pyx":758
 *             raise TypeError
 * 
 *         if d1a and not d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_e(d1)
 *         elif d1a and d2a and not rela:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_d2a != 0)) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_rela != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":759
 * 
 *         if d1a and not d2a and not rela:
 *             self.add_depth_e(d1)             # <<<<<<<<<<<<<<
 *         elif d1a and d2a and not rela:
 *             self.add_depth_es(d1, d2)
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_d1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_depth_e(__pyx_v_self, __pyx_t_3);

    /* "foolysh/animation.pyx":758
 *             raise TypeError
 * 
 *         if d1a and not d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_e(d1)
 *         elif d1a and d2a and not rela:
 */
    goto __pyx_L6;
  }

  /* "foolysh/animation.pyx":760
 *         if d1a and not d2a and not rela:
 *             self.add_depth_e(d1)
 *         elif d1a and d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_es(d1, d2)
 *         elif d1a and not d2a and rela:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_d2a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_rela != 0)) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":761
 *             self.add_depth_e(d1)
 *         elif d1a and d2a and not rela:
 *             self.add_depth_es(d1, d2)             # <<<<<<<<<<<<<<
 *         elif d1a and not d2a and rela:
 *             self.add_depth_er(d1, rel)
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_d1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_d2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_depth_es(__pyx_v_self, __pyx_t_3, __pyx_t_4);

    /* "foolysh/animation.pyx":760
 *         if d1a and not d2a and not rela:
 *             self.add_depth_e(d1)
 *         elif d1a and d2a and not rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_es(d1, d2)
 *         elif d1a and not d2a and rela:
 */
    goto __pyx_L6;
  }

  /* "foolysh/animation.pyx":762
 *         elif d1a and d2a and not rela:
 *             self.add_depth_es(d1, d2)
 *         elif d1a and not d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_er(d1, rel)
 *         elif d1a and d2a and rela:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_1 = ((!(__pyx_v_d2a != 0)) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_rela != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":763
 *             self.add_depth_es(d1, d2)
 *         elif d1a and not d2a and rela:
 *             self.add_depth_er(d1, rel)             # <<<<<<<<<<<<<<
 *         elif d1a and d2a and rela:
 *             self.add_depth_esr(d1, d2, rel)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_d1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 763, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_depth_er(__pyx_v_self, __pyx_t_4, ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":762
 *         elif d1a and d2a and not rela:
 *             self.add_depth_es(d1, d2)
 *         elif d1a and not d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_er(d1, rel)
 *         elif d1a and d2a and rela:
 */
    goto __pyx_L6;
  }

  /* "foolysh/animation.pyx":764
 *         elif d1a and not d2a and rela:
 *             self.add_depth_er(d1, rel)
 *         elif d1a and d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_esr(d1, d2, rel)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_d1a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_d2a != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_rela != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L16_bool_binop_done:;
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":765
 *             self.add_depth_er(d1, rel)
 *         elif d1a and d2a and rela:
 *             self.add_depth_esr(d1, d2, rel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_d1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 765, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_d2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 765, __pyx_L1_error)
    if (!(likely(((__pyx_v_rel) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rel, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 765, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationType *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_depth_esr(__pyx_v_self, __pyx_t_4, __pyx_t_3, ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_v_rel));

    /* "foolysh/animation.pyx":764
 *         elif d1a and not d2a and rela:
 *             self.add_depth_er(d1, rel)
 *         elif d1a and d2a and rela:             # <<<<<<<<<<<<<<
 *             self.add_depth_esr(d1, d2, rel)
 *         else:
 */
    goto __pyx_L6;
  }

  /* "foolysh/animation.pyx":767
 *             self.add_depth_esr(d1, d2, rel)
 *         else:
 *             raise TypeError('Illegal combination of arguments')             # <<<<<<<<<<<<<<
 *         self._modifiers['depth'] = (d1, d2, rel)
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 767, __pyx_L1_error)
  }
  __pyx_L6:;

  /* "foolysh/animation.pyx":768
 *         else:
 *             raise TypeError('Illegal combination of arguments')
 *         self._modifiers['depth'] = (d1, d2, rel)             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_depth_e(self, int d):
 */
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_d1);
  __Pyx_GIVEREF(__pyx_v_d1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_d1);
  __Pyx_INCREF(__pyx_v_d2);
  __Pyx_GIVEREF(__pyx_v_d2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_d2);
  __Pyx_INCREF(__pyx_v_rel);
  __Pyx_GIVEREF(__pyx_v_rel);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_rel);
  if (unlikely(__pyx_v_self->_modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 768, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->_modifiers, __pyx_n_u_depth, __pyx_t_5) < 0)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":730
 *             raise NotImplementedError
 * 
 *     def add_depth(self, d1, d2=None, rel=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add depth modifier to AnimationType.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":770
 *         self._modifiers['depth'] = (d1, d2, rel)
 * 
 *     cdef void add_depth_e(self, int d):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_e(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_depth_e", 0);

  /* "foolysh/animation.pyx":771
 * 
 *     cdef void add_depth_e(self, int d):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":772
 *     cdef void add_depth_e(self, int d):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(d)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":773
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 773, __pyx_L4_error)
        }
        __pyx_t_6->add_depth(__pyx_v_d);

        /* "foolysh/animation.pyx":772
 *     cdef void add_depth_e(self, int d):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(d)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":774
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 774, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":775
 *                 deref(__am).get_interval(self._id).add_depth(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 775, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":776
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 776, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":774
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":772
 *     cdef void add_depth_e(self, int d):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(d)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":771
 * 
 *     cdef void add_depth_e(self, int d):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":777
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":778
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(d)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":779
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 779, __pyx_L21_error)
        }
        __pyx_t_20->add_depth(__pyx_v_d);

        /* "foolysh/animation.pyx":778
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(d)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":780
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_e", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 780, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":781
 *                 deref(__am).get_animation(self._id).add_depth(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 781, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":782
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 782, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":780
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":778
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(d)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":777
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":784
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_depth_es(self, int d1, int d2):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 784, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":770
 *         self._modifiers['depth'] = (d1, d2, rel)
 * 
 *     cdef void add_depth_e(self, int d):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_depth_e", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":786
 *             raise NotImplementedError
 * 
 *     cdef void add_depth_es(self, int d1, int d2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_es(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d1, int __pyx_v_d2) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_depth_es", 0);

  /* "foolysh/animation.pyx":787
 * 
 *     cdef void add_depth_es(self, int d1, int d2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":788
 *     cdef void add_depth_es(self, int d1, int d2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":789
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 789, __pyx_L4_error)
        }
        __pyx_t_6->add_depth(__pyx_v_d1, __pyx_v_d2);

        /* "foolysh/animation.pyx":788
 *     cdef void add_depth_es(self, int d1, int d2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":790
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 790, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":791
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 791, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":792
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 792, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":790
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":788
 *     cdef void add_depth_es(self, int d1, int d2):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":787
 * 
 *     cdef void add_depth_es(self, int d1, int d2):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(d1, d2)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":793
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":794
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":795
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)             # <<<<<<<<<<<<<<
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 795, __pyx_L21_error)
        }
        __pyx_t_20->add_depth(__pyx_v_d1, __pyx_v_d2);

        /* "foolysh/animation.pyx":794
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":796
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_es", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 796, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":797
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 797, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":798
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 798, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":796
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":794
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 *             except ArithmeticError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":793
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(d1, d2)
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":800
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_depth_er(self, int d, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 800, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":786
 *             raise NotImplementedError
 * 
 *     cdef void add_depth_es(self, int d1, int d2):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_depth_es", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":802
 *             raise NotImplementedError
 * 
 *     cdef void add_depth_er(self, int d, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_er(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_depth_er", 0);

  /* "foolysh/animation.pyx":803
 * 
 *     cdef void add_depth_er(self, int d, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":804
 *     cdef void add_depth_er(self, int d, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(
 *                     d,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":805
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(             # <<<<<<<<<<<<<<
 *                     d,
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 805, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":807
 *                 deref(__am).get_interval(self._id).add_depth(
 *                     d,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_depth(__pyx_v_d, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":804
 *     cdef void add_depth_er(self, int d, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(
 *                     d,
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":809
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 809, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":810
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 810, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":811
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 811, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":809
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":804
 *     cdef void add_depth_er(self, int d, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(
 *                     d,
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":803
 * 
 *     cdef void add_depth_er(self, int d, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":812
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":813
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(
 *                     d,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":814
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(             # <<<<<<<<<<<<<<
 *                     d,
 *                     deref(rel.thisptr)
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 814, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":816
 *                 deref(__am).get_animation(self._id).add_depth(
 *                     d,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_depth(__pyx_v_d, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":813
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(
 *                     d,
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":818
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_er", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 818, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":819
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 819, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":820
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 820, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":818
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":813
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(
 *                     d,
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":812
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":822
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 822, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":802
 *             raise NotImplementedError
 * 
 *     cdef void add_depth_er(self, int d, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_depth_er", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":824
 *             raise NotImplementedError
 * 
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

static void __pyx_f_7foolysh_9animation_13AnimationType_add_depth_esr(struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, int __pyx_v_d1, int __pyx_v_d2, struct __pyx_obj_7foolysh_5scene_4node_Node *__pyx_v_rel) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_20;
  char const *__pyx_t_21;
  __Pyx_RefNannySetupContext("add_depth_esr", 0);

  /* "foolysh/animation.pyx":825
 * 
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":826
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(
 *                     d1,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "foolysh/animation.pyx":827
 *         if isinstance(self, Interval):
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(             # <<<<<<<<<<<<<<
 *                     d1,
 *                     d2,
 */
        try {
          __pyx_t_6 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 827, __pyx_L4_error)
        }

        /* "foolysh/animation.pyx":830
 *                     d1,
 *                     d2,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_6->add_depth(__pyx_v_d1, __pyx_v_d2, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":826
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(
 *                     d1,
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "foolysh/animation.pyx":832
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 832, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":833
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 833, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":834
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')
 *                 raise e             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Animation):
 *             try:
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 834, __pyx_L15_error)
        }

        /* "foolysh/animation.pyx":832
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Interval')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "foolysh/animation.pyx":826
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):
 *         if isinstance(self, Interval):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_interval(self._id).add_depth(
 *                     d1,
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "foolysh/animation.pyx":825
 * 
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):
 *         if isinstance(self, Interval):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_interval(self._id).add_depth(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":835
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "foolysh/animation.pyx":836
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(
 *                     d1,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "foolysh/animation.pyx":837
 *         elif isinstance(self, Animation):
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(             # <<<<<<<<<<<<<<
 *                     d1,
 *                     d2,
 */
        try {
          __pyx_t_20 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base._id);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 837, __pyx_L21_error)
        }

        /* "foolysh/animation.pyx":840
 *                     d1,
 *                     d2,
 *                     deref(rel.thisptr)             # <<<<<<<<<<<<<<
 *                 )
 *             except ArithmeticError as e:
 */
        __pyx_t_20->add_depth(__pyx_v_d1, __pyx_v_d2, (*__pyx_v_rel->thisptr));

        /* "foolysh/animation.pyx":836
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(
 *                     d1,
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L26_try_end;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "foolysh/animation.pyx":842
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("foolysh.animation.AnimationType.add_depth_esr", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 842, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_e = __pyx_t_9;
        /*try:*/ {

          /* "foolysh/animation.pyx":843
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 843, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "foolysh/animation.pyx":844
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')
 *                 raise e             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(0, 844, __pyx_L32_error)
        }

        /* "foolysh/animation.pyx":842
 *                     deref(rel.thisptr)
 *                 )
 *             except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *                 print('Unable to add depth to Animation')
 *                 raise e
 */
        /*finally:*/ {
          __pyx_L32_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_12 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
            }
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
            __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_21;
            goto __pyx_L23_except_error;
          }
        }
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "foolysh/animation.pyx":836
 *                 raise e
 *         elif isinstance(self, Animation):
 *             try:             # <<<<<<<<<<<<<<
 *                 deref(__am).get_animation(self._id).add_depth(
 *                     d1,
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L26_try_end:;
    }

    /* "foolysh/animation.pyx":835
 *                 print('Unable to add depth to Interval')
 *                 raise e
 *         elif isinstance(self, Animation):             # <<<<<<<<<<<<<<
 *             try:
 *                 deref(__am).get_animation(self._id).add_depth(
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":846
 *                 raise e
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 846, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":824
 *             raise NotImplementedError
 * 
 *     cdef void add_depth_esr(self, int d1, int d2, Node rel):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Interval):
 *             try:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationType.add_depth_esr", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_14__reduce_cython__[] = "AnimationType.__reduce_cython__(self)";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_14__reduce_cython__(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7foolysh_9animation_13AnimationType_16__setstate_cython__[] = "AnimationType.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7foolysh_9animation_13AnimationType_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_13AnimationType_16__setstate_cython__(((struct __pyx_obj_7foolysh_9animation_AnimationType *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_13AnimationType_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.AnimationType.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":862
 *     cdef float _duration
 * 
 *     def __cinit__(self, node, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._id = deref(__am).new_interval()
 *         self.set_node(node)
 */

/* Python wrapper */
static int __pyx_pw_7foolysh_9animation_8Interval_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7foolysh_9animation_8Interval_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 862, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 862, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("foolysh.animation.Interval.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_8Interval___cinit__(((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_self), __pyx_v_node, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7foolysh_9animation_8Interval___cinit__(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, PyObject *__pyx_v_node, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "foolysh/animation.pyx":863
 * 
 *     def __cinit__(self, node, *args, **kwargs):
 *         self._id = deref(__am).new_interval()             # <<<<<<<<<<<<<<
 *         self.set_node(node)
 *         self._node = node
 */
  __pyx_v_self->__pyx_base.__pyx_base._id = (*__pyx_v_7foolysh_9animation___am).new_interval();

  /* "foolysh/animation.pyx":864
 *     def __cinit__(self, node, *args, **kwargs):
 *         self._id = deref(__am).new_interval()
 *         self.set_node(node)             # <<<<<<<<<<<<<<
 *         self._node = node
 *         self._duration = 0.0
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_node); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_node);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":865
 *         self._id = deref(__am).new_interval()
 *         self.set_node(node)
 *         self._node = node             # <<<<<<<<<<<<<<
 *         self._duration = 0.0
 * 
 */
  if (!(likely(((__pyx_v_node) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_node, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 865, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_node;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._node);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._node));
  __pyx_v_self->__pyx_base.__pyx_base._node = ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":866
 *         self.set_node(node)
 *         self._node = node
 *         self._duration = 0.0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_duration = 0.0;

  /* "foolysh/animation.pyx":862
 *     cdef float _duration
 * 
 *     def __cinit__(self, node, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._id = deref(__am).new_interval()
 *         self.set_node(node)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("foolysh.animation.Interval.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":868
 *         self._duration = 0.0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         deref(__am).remove_interval(self._id)
 * 
 */

/* Python wrapper */
static void __pyx_pw_7foolysh_9animation_8Interval_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7foolysh_9animation_8Interval_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7foolysh_9animation_8Interval_2__dealloc__(((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7foolysh_9animation_8Interval_2__dealloc__(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "foolysh/animation.pyx":869
 * 
 *     def __dealloc__(self):
 *         deref(__am).remove_interval(self._id)             # <<<<<<<<<<<<<<
 * 
 *     def set_duration(self, d):
 */
  try {
    (*__pyx_v_7foolysh_9animation___am).remove_interval(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 869, __pyx_L1_error)
  }

  /* "foolysh/animation.pyx":868
 *         self._duration = 0.0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         deref(__am).remove_interval(self._id)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("foolysh.animation.Interval.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":871
 *         deref(__am).remove_interval(self._id)
 * 
 *     def set_duration(self, d):             # <<<<<<<<<<<<<<
 *         if not isinstance(d, (int, float)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_5set_duration(PyObject *__pyx_v_self, PyObject *__pyx_v_d); /*proto*/
static char __pyx_doc_7foolysh_9animation_8Interval_4set_duration[] = "Interval.set_duration(self, d)";
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_5set_duration(PyObject *__pyx_v_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_duration (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Interval_4set_duration(((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Interval_4set_duration(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  float __pyx_t_4;
  __Pyx_FakeReference<foolysh::animation::Interval> __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("set_duration", 0);

  /* "foolysh/animation.pyx":872
 * 
 *     def set_duration(self, d):
 *         if not isinstance(d, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._duration = d
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_d); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_d); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":873
 *     def set_duration(self, d):
 *         if not isinstance(d, (int, float)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         self._duration = d
 *         deref(__am).get_interval(self._id).set_duration(d)
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 873, __pyx_L1_error)

    /* "foolysh/animation.pyx":872
 * 
 *     def set_duration(self, d):
 *         if not isinstance(d, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._duration = d
 */
  }

  /* "foolysh/animation.pyx":874
 *         if not isinstance(d, (int, float)):
 *             raise TypeError
 *         self._duration = d             # <<<<<<<<<<<<<<
 *         deref(__am).get_interval(self._id).set_duration(d)
 * 
 */
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_d); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 874, __pyx_L1_error)
  __pyx_v_self->_duration = __pyx_t_4;

  /* "foolysh/animation.pyx":875
 *             raise TypeError
 *         self._duration = d
 *         deref(__am).get_interval(self._id).set_duration(d)             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, other):
 */
  try {
    __pyx_t_5 = (*__pyx_v_7foolysh_9animation___am).get_interval(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 875, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_d); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 875, __pyx_L1_error)
  __pyx_t_5->set_duration(__pyx_t_6);

  /* "foolysh/animation.pyx":871
 *         deref(__am).remove_interval(self._id)
 * 
 *     def set_duration(self, d):             # <<<<<<<<<<<<<<
 *         if not isinstance(d, (int, float)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("foolysh.animation.Interval.set_duration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":877
 *         deref(__am).get_interval(self._id).set_duration(d)
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, type(self)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_7__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_7__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Interval_6__iadd__(((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Interval_6__iadd__(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__iadd__", 0);

  /* "foolysh/animation.pyx":878
 * 
 *     def __iadd__(self, other):
 *         if not isinstance(other, type(self)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._iadd(other)
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_other, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self)))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 878, __pyx_L1_error)
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":879
 *     def __iadd__(self, other):
 *         if not isinstance(other, type(self)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         self._iadd(other)
 *         return self
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 879, __pyx_L1_error)

    /* "foolysh/animation.pyx":878
 * 
 *     def __iadd__(self, other):
 *         if not isinstance(other, type(self)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._iadd(other)
 */
  }

  /* "foolysh/animation.pyx":880
 *         if not isinstance(other, type(self)):
 *             raise TypeError
 *         self._iadd(other)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (!(likely(((__pyx_v_other) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_7foolysh_9animation_Interval))))) __PYX_ERR(0, 880, __pyx_L1_error)
  ((struct __pyx_vtabstruct_7foolysh_9animation_Interval *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_iadd(__pyx_v_self, ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_other));

  /* "foolysh/animation.pyx":881
 *             raise TypeError
 *         self._iadd(other)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef void _iadd(self, Interval other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":877
 *         deref(__am).get_interval(self._id).set_duration(d)
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, type(self)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("foolysh.animation.Interval.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":883
 *         return self
 * 
 *     cdef void _iadd(self, Interval other):             # <<<<<<<<<<<<<<
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 */

static void __pyx_f_7foolysh_9animation_8Interval__iadd(struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_other) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_iadd", 0);

  /* "foolysh/animation.pyx":884
 * 
 *     cdef void _iadd(self, Interval other):
 *         if other._node.node_id != self._node.node_id:             # <<<<<<<<<<<<<<
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other->__pyx_base.__pyx_base._node), __pyx_n_s_node_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._node), __pyx_n_s_node_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "foolysh/animation.pyx":885
 *     cdef void _iadd(self, Interval other):
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')             # <<<<<<<<<<<<<<
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 885, __pyx_L1_error)

    /* "foolysh/animation.pyx":884
 * 
 *     cdef void _iadd(self, Interval other):
 *         if other._node.node_id != self._node.node_id:             # <<<<<<<<<<<<<<
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:
 */
  }

  /* "foolysh/animation.pyx":886
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_pos(*other._modifiers['pos'])
 *         if 'scale' in other._modifiers:
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 886, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_pos, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "foolysh/animation.pyx":887
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])             # <<<<<<<<<<<<<<
 *         if 'scale' in other._modifiers:
 *             self.add_scale(*other._modifiers['scale'])
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 887, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "foolysh/animation.pyx":886
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_pos(*other._modifiers['pos'])
 *         if 'scale' in other._modifiers:
 */
  }

  /* "foolysh/animation.pyx":888
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])
 *         if 'scale' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_scale(*other._modifiers['scale'])
 *         if 'rotation' in other._modifiers:
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 888, __pyx_L1_error)
  }
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_scale, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 888, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":889
 *             self.add_pos(*other._modifiers['pos'])
 *         if 'scale' in other._modifiers:
 *             self.add_scale(*other._modifiers['scale'])             # <<<<<<<<<<<<<<
 *         if 'rotation' in other._modifiers:
 *             self.add_rotation(*other._modifiers['rotation'])
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 889, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":888
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])
 *         if 'scale' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_scale(*other._modifiers['scale'])
 *         if 'rotation' in other._modifiers:
 */
  }

  /* "foolysh/animation.pyx":890
 *         if 'scale' in other._modifiers:
 *             self.add_scale(*other._modifiers['scale'])
 *         if 'rotation' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation(*other._modifiers['rotation'])
 *         if 'rotation_center' in other._modifiers:
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 890, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_rotation, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 890, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "foolysh/animation.pyx":891
 *             self.add_scale(*other._modifiers['scale'])
 *         if 'rotation' in other._modifiers:
 *             self.add_rotation(*other._modifiers['rotation'])             # <<<<<<<<<<<<<<
 *         if 'rotation_center' in other._modifiers:
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_rotation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 891, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_rotation); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":890
 *         if 'scale' in other._modifiers:
 *             self.add_scale(*other._modifiers['scale'])
 *         if 'rotation' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation(*other._modifiers['rotation'])
 *         if 'rotation_center' in other._modifiers:
 */
  }

  /* "foolysh/animation.pyx":892
 *         if 'rotation' in other._modifiers:
 *             self.add_rotation(*other._modifiers['rotation'])
 *         if 'rotation_center' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *         if 'depth' in other._modifiers:
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 892, __pyx_L1_error)
  }
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_rotation_center, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":893
 *             self.add_rotation(*other._modifiers['rotation'])
 *         if 'rotation_center' in other._modifiers:
 *             self.add_rotation_center(*other._modifiers['rotation_center'])             # <<<<<<<<<<<<<<
 *         if 'depth' in other._modifiers:
 *             self.add_depth(*other._modifiers['depth'])
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_rotation_center); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 893, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_rotation_center); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "foolysh/animation.pyx":892
 *         if 'rotation' in other._modifiers:
 *             self.add_rotation(*other._modifiers['rotation'])
 *         if 'rotation_center' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *         if 'depth' in other._modifiers:
 */
  }

  /* "foolysh/animation.pyx":894
 *         if 'rotation_center' in other._modifiers:
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *         if 'depth' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_depth(*other._modifiers['depth'])
 * 
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 894, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_depth, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 894, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "foolysh/animation.pyx":895
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *         if 'depth' in other._modifiers:
 *             self.add_depth(*other._modifiers['depth'])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 895, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":894
 *         if 'rotation_center' in other._modifiers:
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *         if 'depth' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_depth(*other._modifiers['depth'])
 * 
 */
  }

  /* "foolysh/animation.pyx":883
 *         return self
 * 
 *     cdef void _iadd(self, Interval other):             # <<<<<<<<<<<<<<
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("foolysh.animation.Interval._iadd", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_8Interval_8__reduce_cython__[] = "Interval.__reduce_cython__(self)";
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Interval_8__reduce_cython__(((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Interval_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Interval.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7foolysh_9animation_8Interval_10__setstate_cython__[] = "Interval.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7foolysh_9animation_8Interval_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Interval_10__setstate_cython__(((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Interval_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Interval.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":915
 *     cdef float _depth_speed
 * 
 *     def __cinit__(self, node, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._pos_speed = 0.0
 *         self._scale_speed = 0.0
 */

/* Python wrapper */
static int __pyx_pw_7foolysh_9animation_9Animation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7foolysh_9animation_9Animation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 915, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 915, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("foolysh.animation.Animation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation___cinit__(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), __pyx_v_node, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7foolysh_9animation_9Animation___cinit__(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_node, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "foolysh/animation.pyx":916
 * 
 *     def __cinit__(self, node, *args, **kwargs):
 *         self._pos_speed = 0.0             # <<<<<<<<<<<<<<
 *         self._scale_speed = 0.0
 *         self._rotation_speed = 0.0
 */
  __pyx_v_self->_pos_speed = 0.0;

  /* "foolysh/animation.pyx":917
 *     def __cinit__(self, node, *args, **kwargs):
 *         self._pos_speed = 0.0
 *         self._scale_speed = 0.0             # <<<<<<<<<<<<<<
 *         self._rotation_speed = 0.0
 *         self._rotation_center_speed = 0.0
 */
  __pyx_v_self->_scale_speed = 0.0;

  /* "foolysh/animation.pyx":918
 *         self._pos_speed = 0.0
 *         self._scale_speed = 0.0
 *         self._rotation_speed = 0.0             # <<<<<<<<<<<<<<
 *         self._rotation_center_speed = 0.0
 *         self._depth_speed = 0.0
 */
  __pyx_v_self->_rotation_speed = 0.0;

  /* "foolysh/animation.pyx":919
 *         self._scale_speed = 0.0
 *         self._rotation_speed = 0.0
 *         self._rotation_center_speed = 0.0             # <<<<<<<<<<<<<<
 *         self._depth_speed = 0.0
 *         self._id = deref(__am).new_animation()
 */
  __pyx_v_self->_rotation_center_speed = 0.0;

  /* "foolysh/animation.pyx":920
 *         self._rotation_speed = 0.0
 *         self._rotation_center_speed = 0.0
 *         self._depth_speed = 0.0             # <<<<<<<<<<<<<<
 *         self._id = deref(__am).new_animation()
 *         self.set_node(node)
 */
  __pyx_v_self->_depth_speed = 0.0;

  /* "foolysh/animation.pyx":921
 *         self._rotation_center_speed = 0.0
 *         self._depth_speed = 0.0
 *         self._id = deref(__am).new_animation()             # <<<<<<<<<<<<<<
 *         self.set_node(node)
 *         self._node = node
 */
  __pyx_v_self->__pyx_base.__pyx_base._id = (*__pyx_v_7foolysh_9animation___am).new_animation();

  /* "foolysh/animation.pyx":922
 *         self._depth_speed = 0.0
 *         self._id = deref(__am).new_animation()
 *         self.set_node(node)             # <<<<<<<<<<<<<<
 *         self._node = node
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_node); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_node);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":923
 *         self._id = deref(__am).new_animation()
 *         self.set_node(node)
 *         self._node = node             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  if (!(likely(((__pyx_v_node) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_node, __pyx_ptype_7foolysh_5scene_4node_Node))))) __PYX_ERR(0, 923, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_node;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._node);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._node));
  __pyx_v_self->__pyx_base.__pyx_base._node = ((struct __pyx_obj_7foolysh_5scene_4node_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":915
 *     cdef float _depth_speed
 * 
 *     def __cinit__(self, node, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._pos_speed = 0.0
 *         self._scale_speed = 0.0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("foolysh.animation.Animation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":925
 *         self._node = node
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         deref(__am).remove_animation(self._id)
 * 
 */

/* Python wrapper */
static void __pyx_pw_7foolysh_9animation_9Animation_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7foolysh_9animation_9Animation_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7foolysh_9animation_9Animation_2__dealloc__(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7foolysh_9animation_9Animation_2__dealloc__(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "foolysh/animation.pyx":926
 * 
 *     def __dealloc__(self):
 *         deref(__am).remove_animation(self._id)             # <<<<<<<<<<<<<<
 * 
 *     def set_pos_speed(self, s):
 */
  try {
    (*__pyx_v_7foolysh_9animation___am).remove_animation(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 926, __pyx_L1_error)
  }

  /* "foolysh/animation.pyx":925
 *         self._node = node
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         deref(__am).remove_animation(self._id)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("foolysh.animation.Animation.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":928
 *         deref(__am).remove_animation(self._id)
 * 
 *     def set_pos_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_5set_pos_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_7foolysh_9animation_9Animation_4set_pos_speed[] = "Animation.set_pos_speed(self, s)";
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_5set_pos_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_pos_speed (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_4set_pos_speed(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_4set_pos_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_5;
  double __pyx_t_6;
  float __pyx_t_7;
  __Pyx_RefNannySetupContext("set_pos_speed", 0);

  /* "foolysh/animation.pyx":929
 * 
 *     def set_pos_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_s); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":930
 *     def set_pos_speed(self, s):
 *         if not isinstance(s, (int, float)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 930, __pyx_L1_error)

    /* "foolysh/animation.pyx":929
 * 
 *     def set_pos_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  }

  /* "foolysh/animation.pyx":931
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_pos_speed(s)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_s, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":932
 *             raise TypeError
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')             # <<<<<<<<<<<<<<
 *         deref(__am).get_animation(self._id).set_pos_speed(s)
 *         self._pos_speed = s
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 932, __pyx_L1_error)

    /* "foolysh/animation.pyx":931
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_pos_speed(s)
 */
  }

  /* "foolysh/animation.pyx":933
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_pos_speed(s)             # <<<<<<<<<<<<<<
 *         self._pos_speed = s
 * 
 */
  try {
    __pyx_t_5 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 933, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 933, __pyx_L1_error)
  __pyx_t_5->set_pos_speed(__pyx_t_6);

  /* "foolysh/animation.pyx":934
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_pos_speed(s)
 *         self._pos_speed = s             # <<<<<<<<<<<<<<
 * 
 *     def set_scale_speed(self, s):
 */
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_s); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L1_error)
  __pyx_v_self->_pos_speed = __pyx_t_7;

  /* "foolysh/animation.pyx":928
 *         deref(__am).remove_animation(self._id)
 * 
 *     def set_pos_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.Animation.set_pos_speed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":936
 *         self._pos_speed = s
 * 
 *     def set_scale_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_7set_scale_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_7foolysh_9animation_9Animation_6set_scale_speed[] = "Animation.set_scale_speed(self, s)";
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_7set_scale_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scale_speed (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_6set_scale_speed(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_6set_scale_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_5;
  double __pyx_t_6;
  float __pyx_t_7;
  __Pyx_RefNannySetupContext("set_scale_speed", 0);

  /* "foolysh/animation.pyx":937
 * 
 *     def set_scale_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_s); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":938
 *     def set_scale_speed(self, s):
 *         if not isinstance(s, (int, float)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 938, __pyx_L1_error)

    /* "foolysh/animation.pyx":937
 * 
 *     def set_scale_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  }

  /* "foolysh/animation.pyx":939
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_scale_speed(s)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_s, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":940
 *             raise TypeError
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')             # <<<<<<<<<<<<<<
 *         deref(__am).get_animation(self._id).set_scale_speed(s)
 *         self._scale_speed = s
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 940, __pyx_L1_error)

    /* "foolysh/animation.pyx":939
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_scale_speed(s)
 */
  }

  /* "foolysh/animation.pyx":941
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_scale_speed(s)             # <<<<<<<<<<<<<<
 *         self._scale_speed = s
 * 
 */
  try {
    __pyx_t_5 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 941, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 941, __pyx_L1_error)
  __pyx_t_5->set_scale_speed(__pyx_t_6);

  /* "foolysh/animation.pyx":942
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_scale_speed(s)
 *         self._scale_speed = s             # <<<<<<<<<<<<<<
 * 
 *     def set_rotation_speed(self, s):
 */
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_s); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L1_error)
  __pyx_v_self->_scale_speed = __pyx_t_7;

  /* "foolysh/animation.pyx":936
 *         self._pos_speed = s
 * 
 *     def set_scale_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.Animation.set_scale_speed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":944
 *         self._scale_speed = s
 * 
 *     def set_rotation_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_9set_rotation_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_7foolysh_9animation_9Animation_8set_rotation_speed[] = "Animation.set_rotation_speed(self, s)";
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_9set_rotation_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_speed (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_8set_rotation_speed(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_8set_rotation_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_5;
  double __pyx_t_6;
  float __pyx_t_7;
  __Pyx_RefNannySetupContext("set_rotation_speed", 0);

  /* "foolysh/animation.pyx":945
 * 
 *     def set_rotation_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_s); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":946
 *     def set_rotation_speed(self, s):
 *         if not isinstance(s, (int, float)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 946, __pyx_L1_error)

    /* "foolysh/animation.pyx":945
 * 
 *     def set_rotation_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  }

  /* "foolysh/animation.pyx":947
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_speed(s)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_s, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 947, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":948
 *             raise TypeError
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')             # <<<<<<<<<<<<<<
 *         deref(__am).get_animation(self._id).set_rotation_speed(s)
 *         self._rotation_speed = s
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 948, __pyx_L1_error)

    /* "foolysh/animation.pyx":947
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_speed(s)
 */
  }

  /* "foolysh/animation.pyx":949
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_speed(s)             # <<<<<<<<<<<<<<
 *         self._rotation_speed = s
 * 
 */
  try {
    __pyx_t_5 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 949, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L1_error)
  __pyx_t_5->set_rotation_speed(__pyx_t_6);

  /* "foolysh/animation.pyx":950
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_speed(s)
 *         self._rotation_speed = s             # <<<<<<<<<<<<<<
 * 
 *     def set_rotation_center_speed(self, s):
 */
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_s); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L1_error)
  __pyx_v_self->_rotation_speed = __pyx_t_7;

  /* "foolysh/animation.pyx":944
 *         self._scale_speed = s
 * 
 *     def set_rotation_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.Animation.set_rotation_speed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":952
 *         self._rotation_speed = s
 * 
 *     def set_rotation_center_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_11set_rotation_center_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_7foolysh_9animation_9Animation_10set_rotation_center_speed[] = "Animation.set_rotation_center_speed(self, s)";
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_11set_rotation_center_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rotation_center_speed (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_10set_rotation_center_speed(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_10set_rotation_center_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_5;
  double __pyx_t_6;
  float __pyx_t_7;
  __Pyx_RefNannySetupContext("set_rotation_center_speed", 0);

  /* "foolysh/animation.pyx":953
 * 
 *     def set_rotation_center_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_s); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":954
 *     def set_rotation_center_speed(self, s):
 *         if not isinstance(s, (int, float)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 954, __pyx_L1_error)

    /* "foolysh/animation.pyx":953
 * 
 *     def set_rotation_center_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  }

  /* "foolysh/animation.pyx":955
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_center_speed(s)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_s, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 955, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":956
 *             raise TypeError
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')             # <<<<<<<<<<<<<<
 *         deref(__am).get_animation(self._id).set_rotation_center_speed(s)
 *         self._rotation_center_speed = s
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 956, __pyx_L1_error)

    /* "foolysh/animation.pyx":955
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_center_speed(s)
 */
  }

  /* "foolysh/animation.pyx":957
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_center_speed(s)             # <<<<<<<<<<<<<<
 *         self._rotation_center_speed = s
 * 
 */
  try {
    __pyx_t_5 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 957, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 957, __pyx_L1_error)
  __pyx_t_5->set_rotation_center_speed(__pyx_t_6);

  /* "foolysh/animation.pyx":958
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_rotation_center_speed(s)
 *         self._rotation_center_speed = s             # <<<<<<<<<<<<<<
 * 
 *     def set_depth_speed(self, s):
 */
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_s); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_v_self->_rotation_center_speed = __pyx_t_7;

  /* "foolysh/animation.pyx":952
 *         self._rotation_speed = s
 * 
 *     def set_rotation_center_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.Animation.set_rotation_center_speed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":960
 *         self._rotation_center_speed = s
 * 
 *     def set_depth_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_13set_depth_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_7foolysh_9animation_9Animation_12set_depth_speed[] = "Animation.set_depth_speed(self, s)";
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_13set_depth_speed(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth_speed (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_12set_depth_speed(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_12set_depth_speed(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_FakeReference<foolysh::animation::Animation> __pyx_t_5;
  double __pyx_t_6;
  float __pyx_t_7;
  __Pyx_RefNannySetupContext("set_depth_speed", 0);

  /* "foolysh/animation.pyx":961
 * 
 *     def set_depth_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_s); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":962
 *     def set_depth_speed(self, s):
 *         if not isinstance(s, (int, float)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 962, __pyx_L1_error)

    /* "foolysh/animation.pyx":961
 * 
 *     def set_depth_speed(self, s):
 *         if not isinstance(s, (int, float)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if s <= 0:
 */
  }

  /* "foolysh/animation.pyx":963
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_depth_speed(s)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_s, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":964
 *             raise TypeError
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')             # <<<<<<<<<<<<<<
 *         deref(__am).get_animation(self._id).set_depth_speed(s)
 *         self._depth_speed = s
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 964, __pyx_L1_error)

    /* "foolysh/animation.pyx":963
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 *         if s <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_depth_speed(s)
 */
  }

  /* "foolysh/animation.pyx":965
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_depth_speed(s)             # <<<<<<<<<<<<<<
 *         self._depth_speed = s
 * 
 */
  try {
    __pyx_t_5 = (*__pyx_v_7foolysh_9animation___am).get_animation(__pyx_v_self->__pyx_base.__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 965, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 965, __pyx_L1_error)
  __pyx_t_5->set_depth_speed(__pyx_t_6);

  /* "foolysh/animation.pyx":966
 *             raise ValueError('Expected positive, non zero value')
 *         deref(__am).get_animation(self._id).set_depth_speed(s)
 *         self._depth_speed = s             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, other):
 */
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_s); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 966, __pyx_L1_error)
  __pyx_v_self->_depth_speed = __pyx_t_7;

  /* "foolysh/animation.pyx":960
 *         self._rotation_center_speed = s
 * 
 *     def set_depth_speed(self, s):             # <<<<<<<<<<<<<<
 *         if not isinstance(s, (int, float)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("foolysh.animation.Animation.set_depth_speed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":968
 *         self._depth_speed = s
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, type(self)):
 *             raise TypeError
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_15__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_15__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_14__iadd__(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_14__iadd__(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__iadd__", 0);

  /* "foolysh/animation.pyx":969
 * 
 *     def __iadd__(self, other):
 *         if not isinstance(other, type(self)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._iadd(other)
 */
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_other, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self)))); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 969, __pyx_L1_error)
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":970
 *     def __iadd__(self, other):
 *         if not isinstance(other, type(self)):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         self._iadd(other)
 *         return self
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 970, __pyx_L1_error)

    /* "foolysh/animation.pyx":969
 * 
 *     def __iadd__(self, other):
 *         if not isinstance(other, type(self)):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._iadd(other)
 */
  }

  /* "foolysh/animation.pyx":971
 *         if not isinstance(other, type(self)):
 *             raise TypeError
 *         self._iadd(other)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (!(likely(((__pyx_v_other) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_7foolysh_9animation_Animation))))) __PYX_ERR(0, 971, __pyx_L1_error)
  ((struct __pyx_vtabstruct_7foolysh_9animation_Animation *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_iadd(__pyx_v_self, ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_other));

  /* "foolysh/animation.pyx":972
 *             raise TypeError
 *         self._iadd(other)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef void _iadd(self, Animation other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":968
 *         self._depth_speed = s
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, type(self)):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("foolysh.animation.Animation.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":974
 *         return self
 * 
 *     cdef void _iadd(self, Animation other):             # <<<<<<<<<<<<<<
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 */

static void __pyx_f_7foolysh_9animation_9Animation__iadd(struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_other) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  float __pyx_t_6;
  __Pyx_RefNannySetupContext("_iadd", 0);

  /* "foolysh/animation.pyx":975
 * 
 *     cdef void _iadd(self, Animation other):
 *         if other._node.node_id != self._node.node_id:             # <<<<<<<<<<<<<<
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other->__pyx_base.__pyx_base._node), __pyx_n_s_node_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._node), __pyx_n_s_node_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "foolysh/animation.pyx":976
 *     cdef void _iadd(self, Animation other):
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')             # <<<<<<<<<<<<<<
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 976, __pyx_L1_error)

    /* "foolysh/animation.pyx":975
 * 
 *     cdef void _iadd(self, Animation other):
 *         if other._node.node_id != self._node.node_id:             # <<<<<<<<<<<<<<
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:
 */
  }

  /* "foolysh/animation.pyx":977
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_pos(*other._modifiers['pos'])
 *             self._pos_speed = other._pos_speed
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 977, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_pos, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 977, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "foolysh/animation.pyx":978
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])             # <<<<<<<<<<<<<<
 *             self._pos_speed = other._pos_speed
 *         if 'scale' in other._modifiers:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 978, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "foolysh/animation.pyx":979
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])
 *             self._pos_speed = other._pos_speed             # <<<<<<<<<<<<<<
 *         if 'scale' in other._modifiers:
 *             self.add_scale(*other._modifiers['scale'])
 */
    __pyx_t_6 = __pyx_v_other->_pos_speed;
    __pyx_v_self->_pos_speed = __pyx_t_6;

    /* "foolysh/animation.pyx":977
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 *         if 'pos' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_pos(*other._modifiers['pos'])
 *             self._pos_speed = other._pos_speed
 */
  }

  /* "foolysh/animation.pyx":980
 *             self.add_pos(*other._modifiers['pos'])
 *             self._pos_speed = other._pos_speed
 *         if 'scale' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_scale(*other._modifiers['scale'])
 *             self._scale_speed = other._scale_speed
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 980, __pyx_L1_error)
  }
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_scale, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":981
 *             self._pos_speed = other._pos_speed
 *         if 'scale' in other._modifiers:
 *             self.add_scale(*other._modifiers['scale'])             # <<<<<<<<<<<<<<
 *             self._scale_speed = other._scale_speed
 *         if 'rotation' in other._modifiers:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 981, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":982
 *         if 'scale' in other._modifiers:
 *             self.add_scale(*other._modifiers['scale'])
 *             self._scale_speed = other._scale_speed             # <<<<<<<<<<<<<<
 *         if 'rotation' in other._modifiers:
 *             self.add_rotation(*other._modifiers['rotation'])
 */
    __pyx_t_6 = __pyx_v_other->_scale_speed;
    __pyx_v_self->_scale_speed = __pyx_t_6;

    /* "foolysh/animation.pyx":980
 *             self.add_pos(*other._modifiers['pos'])
 *             self._pos_speed = other._pos_speed
 *         if 'scale' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_scale(*other._modifiers['scale'])
 *             self._scale_speed = other._scale_speed
 */
  }

  /* "foolysh/animation.pyx":983
 *             self.add_scale(*other._modifiers['scale'])
 *             self._scale_speed = other._scale_speed
 *         if 'rotation' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation(*other._modifiers['rotation'])
 *             self._rotation_speed = other._rotation_speed
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 983, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_rotation, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 983, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "foolysh/animation.pyx":984
 *             self._scale_speed = other._scale_speed
 *         if 'rotation' in other._modifiers:
 *             self.add_rotation(*other._modifiers['rotation'])             # <<<<<<<<<<<<<<
 *             self._rotation_speed = other._rotation_speed
 *         if 'rotation_center' in other._modifiers:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_rotation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 984, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_rotation); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":985
 *         if 'rotation' in other._modifiers:
 *             self.add_rotation(*other._modifiers['rotation'])
 *             self._rotation_speed = other._rotation_speed             # <<<<<<<<<<<<<<
 *         if 'rotation_center' in other._modifiers:
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 */
    __pyx_t_6 = __pyx_v_other->_rotation_speed;
    __pyx_v_self->_rotation_speed = __pyx_t_6;

    /* "foolysh/animation.pyx":983
 *             self.add_scale(*other._modifiers['scale'])
 *             self._scale_speed = other._scale_speed
 *         if 'rotation' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation(*other._modifiers['rotation'])
 *             self._rotation_speed = other._rotation_speed
 */
  }

  /* "foolysh/animation.pyx":986
 *             self.add_rotation(*other._modifiers['rotation'])
 *             self._rotation_speed = other._rotation_speed
 *         if 'rotation_center' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *             self._rotation_center_speed = other._rotation_center_speed
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 986, __pyx_L1_error)
  }
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_rotation_center, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 986, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "foolysh/animation.pyx":987
 *             self._rotation_speed = other._rotation_speed
 *         if 'rotation_center' in other._modifiers:
 *             self.add_rotation_center(*other._modifiers['rotation_center'])             # <<<<<<<<<<<<<<
 *             self._rotation_center_speed = other._rotation_center_speed
 *         if 'depth' in other._modifiers:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_rotation_center); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 987, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_rotation_center); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "foolysh/animation.pyx":988
 *         if 'rotation_center' in other._modifiers:
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *             self._rotation_center_speed = other._rotation_center_speed             # <<<<<<<<<<<<<<
 *         if 'depth' in other._modifiers:
 *             self.add_depth(*other._modifiers['depth'])
 */
    __pyx_t_6 = __pyx_v_other->_rotation_center_speed;
    __pyx_v_self->_rotation_center_speed = __pyx_t_6;

    /* "foolysh/animation.pyx":986
 *             self.add_rotation(*other._modifiers['rotation'])
 *             self._rotation_speed = other._rotation_speed
 *         if 'rotation_center' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *             self._rotation_center_speed = other._rotation_center_speed
 */
  }

  /* "foolysh/animation.pyx":989
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *             self._rotation_center_speed = other._rotation_center_speed
 *         if 'depth' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_depth(*other._modifiers['depth'])
 *             self._depth_speed = other._depth_speed
 */
  if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 989, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_depth, __pyx_v_other->__pyx_base._modifiers, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 989, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "foolysh/animation.pyx":990
 *             self._rotation_center_speed = other._rotation_center_speed
 *         if 'depth' in other._modifiers:
 *             self.add_depth(*other._modifiers['depth'])             # <<<<<<<<<<<<<<
 *             self._depth_speed = other._depth_speed
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_other->__pyx_base._modifiers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 990, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_other->__pyx_base._modifiers, __pyx_n_u_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":991
 *         if 'depth' in other._modifiers:
 *             self.add_depth(*other._modifiers['depth'])
 *             self._depth_speed = other._depth_speed             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __pyx_v_other->_depth_speed;
    __pyx_v_self->_depth_speed = __pyx_t_6;

    /* "foolysh/animation.pyx":989
 *             self.add_rotation_center(*other._modifiers['rotation_center'])
 *             self._rotation_center_speed = other._rotation_center_speed
 *         if 'depth' in other._modifiers:             # <<<<<<<<<<<<<<
 *             self.add_depth(*other._modifiers['depth'])
 *             self._depth_speed = other._depth_speed
 */
  }

  /* "foolysh/animation.pyx":974
 *         return self
 * 
 *     cdef void _iadd(self, Animation other):             # <<<<<<<<<<<<<<
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("foolysh.animation.Animation._iadd", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_9Animation_16__reduce_cython__[] = "Animation.__reduce_cython__(self)";
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_16__reduce_cython__(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Animation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7foolysh_9animation_9Animation_18__setstate_cython__[] = "Animation.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7foolysh_9animation_9Animation_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_9Animation_18__setstate_cython__(((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_9Animation_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Animation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1001
 *     :meth:`Sequence.append` method.
 *     """
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._id = deref(__am).new_sequence()
 *         for s in args:
 */

/* Python wrapper */
static int __pyx_pw_7foolysh_9animation_8Sequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7foolysh_9animation_8Sequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7foolysh_9animation_8Sequence___cinit__(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7foolysh_9animation_8Sequence___cinit__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_s = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "foolysh/animation.pyx":1002
 *     """
 *     def __cinit__(self, *args, **kwargs):
 *         self._id = deref(__am).new_sequence()             # <<<<<<<<<<<<<<
 *         for s in args:
 *             if isinstance(s, AnimationBase):
 */
  __pyx_v_self->__pyx_base._id = (*__pyx_v_7foolysh_9animation___am).new_sequence();

  /* "foolysh/animation.pyx":1003
 *     def __cinit__(self, *args, **kwargs):
 *         self._id = deref(__am).new_sequence()
 *         for s in args:             # <<<<<<<<<<<<<<
 *             if isinstance(s, AnimationBase):
 *                 self.append(s)
 */
  __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1003, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1004
 *         self._id = deref(__am).new_sequence()
 *         for s in args:
 *             if isinstance(s, AnimationBase):             # <<<<<<<<<<<<<<
 *                 self.append(s)
 * 
 */
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_s, __pyx_ptype_7foolysh_9animation_AnimationBase); 
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "foolysh/animation.pyx":1005
 *         for s in args:
 *             if isinstance(s, AnimationBase):
 *                 self.append(s)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_t_6 = __Pyx_PyObject_Append(((PyObject *)__pyx_v_self), __pyx_v_s); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1005, __pyx_L1_error)

      /* "foolysh/animation.pyx":1004
 *         self._id = deref(__am).new_sequence()
 *         for s in args:
 *             if isinstance(s, AnimationBase):             # <<<<<<<<<<<<<<
 *                 self.append(s)
 * 
 */
    }

    /* "foolysh/animation.pyx":1003
 *     def __cinit__(self, *args, **kwargs):
 *         self._id = deref(__am).new_sequence()
 *         for s in args:             # <<<<<<<<<<<<<<
 *             if isinstance(s, AnimationBase):
 *                 self.append(s)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1001
 *     :meth:`Sequence.append` method.
 *     """
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._id = deref(__am).new_sequence()
 *         for s in args:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("foolysh.animation.Sequence.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1007
 *                 self.append(s)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         deref(__am).remove_sequence(self._id)
 * 
 */

/* Python wrapper */
static void __pyx_pw_7foolysh_9animation_8Sequence_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7foolysh_9animation_8Sequence_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7foolysh_9animation_8Sequence_2__dealloc__(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7foolysh_9animation_8Sequence_2__dealloc__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "foolysh/animation.pyx":1008
 * 
 *     def __dealloc__(self):
 *         deref(__am).remove_sequence(self._id)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    (*__pyx_v_7foolysh_9animation___am).remove_sequence(__pyx_v_self->__pyx_base._id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1008, __pyx_L1_error)
  }

  /* "foolysh/animation.pyx":1007
 *                 self.append(s)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         deref(__am).remove_sequence(self._id)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("foolysh.animation.Sequence.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":1011
 * 
 *     @property
 *     def loop(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property to define whether a :class:`Sequence` should be looped when
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_4loop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_4loop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Sequence_4loop___get__(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_4loop___get__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "foolysh/animation.pyx":1019
 *             ``bool`` -> ``True`` = loops forever / until manually stopped.
 *         """
 *         return self._loop             # <<<<<<<<<<<<<<
 * 
 *     @loop.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base._loop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1011
 * 
 *     @property
 *     def loop(self):             # <<<<<<<<<<<<<<
 *         """
 *         Property to define whether a :class:`Sequence` should be looped when
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Sequence.loop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1022
 * 
 *     @loop.setter
 *     def loop(self, loop):             # <<<<<<<<<<<<<<
 *         if not isinstance(loop, bool):
 *             raise TypeError
 */

/* Python wrapper */
static int __pyx_pw_7foolysh_9animation_8Sequence_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_loop); /*proto*/
static int __pyx_pw_7foolysh_9animation_8Sequence_4loop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_loop) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Sequence_4loop_2__set__(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self), ((PyObject *)__pyx_v_loop));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7foolysh_9animation_8Sequence_4loop_2__set__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_loop) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "foolysh/animation.pyx":1023
 *     @loop.setter
 *     def loop(self, loop):
 *         if not isinstance(loop, bool):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._loop = loop
 */
  __pyx_t_1 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_loop, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "foolysh/animation.pyx":1024
 *     def loop(self, loop):
 *         if not isinstance(loop, bool):
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         self._loop = loop
 *         self._set_loop(loop)
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 1024, __pyx_L1_error)

    /* "foolysh/animation.pyx":1023
 *     @loop.setter
 *     def loop(self, loop):
 *         if not isinstance(loop, bool):             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         self._loop = loop
 */
  }

  /* "foolysh/animation.pyx":1025
 *         if not isinstance(loop, bool):
 *             raise TypeError
 *         self._loop = loop             # <<<<<<<<<<<<<<
 *         self._set_loop(loop)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_loop); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1025, __pyx_L1_error)
  __pyx_v_self->__pyx_base._loop = __pyx_t_3;

  /* "foolysh/animation.pyx":1026
 *             raise TypeError
 *         self._loop = loop
 *         self._set_loop(loop)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _set_loop(self, bint l):
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_loop); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1026, __pyx_L1_error)
  ((struct __pyx_vtabstruct_7foolysh_9animation_Sequence *)__pyx_v_self->__pyx_base.__pyx_vtab)->_set_loop(__pyx_v_self, __pyx_t_3);

  /* "foolysh/animation.pyx":1022
 * 
 *     @loop.setter
 *     def loop(self, loop):             # <<<<<<<<<<<<<<
 *         if not isinstance(loop, bool):
 *             raise TypeError
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Sequence.loop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1028
 *         self._set_loop(loop)
 * 
 *     cdef void _set_loop(self, bint l):             # <<<<<<<<<<<<<<
 *         try:
 *             deref(__am).get_sequence(self._id).loop(l)
 */

static void __pyx_f_7foolysh_9animation_8Sequence__set_loop(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, int __pyx_v_l) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_FakeReference<foolysh::animation::Sequence> __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("_set_loop", 0);

  /* "foolysh/animation.pyx":1029
 * 
 *     cdef void _set_loop(self, bint l):
 *         try:             # <<<<<<<<<<<<<<
 *             deref(__am).get_sequence(self._id).loop(l)
 *         except ArithmeticError as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "foolysh/animation.pyx":1030
 *     cdef void _set_loop(self, bint l):
 *         try:
 *             deref(__am).get_sequence(self._id).loop(l)             # <<<<<<<<<<<<<<
 *         except ArithmeticError as e:
 *             print('Unable to set loop to Sequence')
 */
      try {
        __pyx_t_4 = (*__pyx_v_7foolysh_9animation___am).get_sequence(__pyx_v_self->__pyx_base._id);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1030, __pyx_L3_error)
      }
      __pyx_t_4->loop(__pyx_v_l);

      /* "foolysh/animation.pyx":1029
 * 
 *     cdef void _set_loop(self, bint l):
 *         try:             # <<<<<<<<<<<<<<
 *             deref(__am).get_sequence(self._id).loop(l)
 *         except ArithmeticError as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "foolysh/animation.pyx":1031
 *         try:
 *             deref(__am).get_sequence(self._id).loop(l)
 *         except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *             print('Unable to set loop to Sequence')
 *             raise e
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ArithmeticError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("foolysh.animation.Sequence._set_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1031, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_v_e = __pyx_t_7;
      /*try:*/ {

        /* "foolysh/animation.pyx":1032
 *             deref(__am).get_sequence(self._id).loop(l)
 *         except ArithmeticError as e:
 *             print('Unable to set loop to Sequence')             # <<<<<<<<<<<<<<
 *             raise e
 * 
 */
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1032, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "foolysh/animation.pyx":1033
 *         except ArithmeticError as e:
 *             print('Unable to set loop to Sequence')
 *             raise e             # <<<<<<<<<<<<<<
 * 
 *     def append(self, item):
 */
        __Pyx_Raise(__pyx_v_e, 0, 0, 0);
        __PYX_ERR(0, 1033, __pyx_L14_error)
      }

      /* "foolysh/animation.pyx":1031
 *         try:
 *             deref(__am).get_sequence(self._id).loop(l)
 *         except ArithmeticError as e:             # <<<<<<<<<<<<<<
 *             print('Unable to set loop to Sequence')
 *             raise e
 */
      /*finally:*/ {
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __pyx_t_5 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          }
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
          __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
          goto __pyx_L5_except_error;
        }
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "foolysh/animation.pyx":1029
 * 
 *     cdef void _set_loop(self, bint l):
 *         try:             # <<<<<<<<<<<<<<
 *             deref(__am).get_sequence(self._id).loop(l)
 *         except ArithmeticError as e:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "foolysh/animation.pyx":1028
 *         self._set_loop(loop)
 * 
 *     cdef void _set_loop(self, bint l):             # <<<<<<<<<<<<<<
 *         try:
 *             deref(__am).get_sequence(self._id).loop(l)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("foolysh.animation.Sequence._set_loop", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":1035
 *             raise e
 * 
 *     def append(self, item):             # <<<<<<<<<<<<<<
 *         """
 *         Append a :class:`AnimationBase` instance to this sequence.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_5append(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static char __pyx_doc_7foolysh_9animation_8Sequence_4append[] = "Sequence.append(self, item)\n\n        Append a :class:`AnimationBase` instance to this sequence.\n        ";
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_5append(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Sequence_4append(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_4append(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("append", 0);

  /* "foolysh/animation.pyx":1039
 *         Append a :class:`AnimationBase` instance to this sequence.
 *         """
 *         if isinstance(item, Interval):             # <<<<<<<<<<<<<<
 *             self._append_interval(item)
 *         elif isinstance(item, Animation):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_7foolysh_9animation_Interval); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1040
 *         """
 *         if isinstance(item, Interval):
 *             self._append_interval(item)             # <<<<<<<<<<<<<<
 *         elif isinstance(item, Animation):
 *             self._append_animation(item)
 */
    if (!(likely(((__pyx_v_item) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_item, __pyx_ptype_7foolysh_9animation_Interval))))) __PYX_ERR(0, 1040, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_Sequence *)__pyx_v_self->__pyx_base.__pyx_vtab)->_append_interval(__pyx_v_self, ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_v_item));

    /* "foolysh/animation.pyx":1039
 *         Append a :class:`AnimationBase` instance to this sequence.
 *         """
 *         if isinstance(item, Interval):             # <<<<<<<<<<<<<<
 *             self._append_interval(item)
 *         elif isinstance(item, Animation):
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1041
 *         if isinstance(item, Interval):
 *             self._append_interval(item)
 *         elif isinstance(item, Animation):             # <<<<<<<<<<<<<<
 *             self._append_animation(item)
 *         elif isinstance(item, Sequence):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_7foolysh_9animation_Animation); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "foolysh/animation.pyx":1042
 *             self._append_interval(item)
 *         elif isinstance(item, Animation):
 *             self._append_animation(item)             # <<<<<<<<<<<<<<
 *         elif isinstance(item, Sequence):
 *             self._append_sequence(item)
 */
    if (!(likely(((__pyx_v_item) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_item, __pyx_ptype_7foolysh_9animation_Animation))))) __PYX_ERR(0, 1042, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_Sequence *)__pyx_v_self->__pyx_base.__pyx_vtab)->_append_animation(__pyx_v_self, ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_v_item));

    /* "foolysh/animation.pyx":1041
 *         if isinstance(item, Interval):
 *             self._append_interval(item)
 *         elif isinstance(item, Animation):             # <<<<<<<<<<<<<<
 *             self._append_animation(item)
 *         elif isinstance(item, Sequence):
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1043
 *         elif isinstance(item, Animation):
 *             self._append_animation(item)
 *         elif isinstance(item, Sequence):             # <<<<<<<<<<<<<<
 *             self._append_sequence(item)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_7foolysh_9animation_Sequence); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "foolysh/animation.pyx":1044
 *             self._append_animation(item)
 *         elif isinstance(item, Sequence):
 *             self._append_sequence(item)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError
 */
    if (!(likely(((__pyx_v_item) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_item, __pyx_ptype_7foolysh_9animation_Sequence))))) __PYX_ERR(0, 1044, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7foolysh_9animation_Sequence *)__pyx_v_self->__pyx_base.__pyx_vtab)->_append_sequence(__pyx_v_self, ((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_item));

    /* "foolysh/animation.pyx":1043
 *         elif isinstance(item, Animation):
 *             self._append_animation(item)
 *         elif isinstance(item, Sequence):             # <<<<<<<<<<<<<<
 *             self._append_sequence(item)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1046
 *             self._append_sequence(item)
 *         else:
 *             raise TypeError             # <<<<<<<<<<<<<<
 * 
 *     cdef void _append_interval(self, Interval item):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 1046, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1035
 *             raise e
 * 
 *     def append(self, item):             # <<<<<<<<<<<<<<
 *         """
 *         Append a :class:`AnimationBase` instance to this sequence.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("foolysh.animation.Sequence.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1048
 *             raise TypeError
 * 
 *     cdef void _append_interval(self, Interval item):             # <<<<<<<<<<<<<<
 *         deref(__am).append(self._id, item._id)
 * 
 */

static void __pyx_f_7foolysh_9animation_8Sequence__append_interval(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_item) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_append_interval", 0);

  /* "foolysh/animation.pyx":1049
 * 
 *     cdef void _append_interval(self, Interval item):
 *         deref(__am).append(self._id, item._id)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _append_animation(self, Animation item):
 */
  (*__pyx_v_7foolysh_9animation___am).append(__pyx_v_self->__pyx_base._id, __pyx_v_item->__pyx_base.__pyx_base._id);

  /* "foolysh/animation.pyx":1048
 *             raise TypeError
 * 
 *     cdef void _append_interval(self, Interval item):             # <<<<<<<<<<<<<<
 *         deref(__am).append(self._id, item._id)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":1051
 *         deref(__am).append(self._id, item._id)
 * 
 *     cdef void _append_animation(self, Animation item):             # <<<<<<<<<<<<<<
 *         deref(__am).append(self._id, item._id)
 * 
 */

static void __pyx_f_7foolysh_9animation_8Sequence__append_animation(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_item) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_append_animation", 0);

  /* "foolysh/animation.pyx":1052
 * 
 *     cdef void _append_animation(self, Animation item):
 *         deref(__am).append(self._id, item._id)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _append_sequence(self, Sequence item):
 */
  (*__pyx_v_7foolysh_9animation___am).append(__pyx_v_self->__pyx_base._id, __pyx_v_item->__pyx_base.__pyx_base._id);

  /* "foolysh/animation.pyx":1051
 *         deref(__am).append(self._id, item._id)
 * 
 *     cdef void _append_animation(self, Animation item):             # <<<<<<<<<<<<<<
 *         deref(__am).append(self._id, item._id)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":1054
 *         deref(__am).append(self._id, item._id)
 * 
 *     cdef void _append_sequence(self, Sequence item):             # <<<<<<<<<<<<<<
 *         deref(__am).append(self._id, item._id)
 * 
 */

static void __pyx_f_7foolysh_9animation_8Sequence__append_sequence(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_item) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_append_sequence", 0);

  /* "foolysh/animation.pyx":1055
 * 
 *     cdef void _append_sequence(self, Sequence item):
 *         deref(__am).append(self._id, item._id)             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, other):
 */
  (*__pyx_v_7foolysh_9animation___am).append(__pyx_v_self->__pyx_base._id, __pyx_v_item->__pyx_base._id);

  /* "foolysh/animation.pyx":1054
 *         deref(__am).append(self._id, item._id)
 * 
 *     cdef void _append_sequence(self, Sequence item):             # <<<<<<<<<<<<<<
 *         deref(__am).append(self._id, item._id)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":1057
 *         deref(__am).append(self._id, item._id)
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         self.append(other)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_7__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_7__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Sequence_6__iadd__(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_6__iadd__(struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__iadd__", 0);

  /* "foolysh/animation.pyx":1058
 * 
 *     def __iadd__(self, other):
 *         self.append(other)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Append(((PyObject *)__pyx_v_self), __pyx_v_other); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1058, __pyx_L1_error)

  /* "foolysh/animation.pyx":1059
 *     def __iadd__(self, other):
 *         self.append(other)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1057
 *         deref(__am).append(self._id, item._id)
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         self.append(other)
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("foolysh.animation.Sequence.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_8Sequence_8__reduce_cython__[] = "Sequence.__reduce_cython__(self)";
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Sequence_8__reduce_cython__(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Sequence.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7foolysh_9animation_8Sequence_10__setstate_cython__[] = "Sequence.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7foolysh_9animation_8Sequence_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_8Sequence_10__setstate_cython__(((struct __pyx_obj_7foolysh_9animation_Sequence *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8Sequence_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_Sequence *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.Sequence.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1062
 * 
 * 
 * def PosInterval(node, duration, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with position
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_1PosInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_PosInterval[] = "PosInterval(node, duration, v1, v2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Interval` instance with position\n    modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        duration: ``float`` duration of the Interval in seconds.\n        v1: :class:`~foolysh.tools.vec2.Vec2` the end or start position,\n            depending on whether `v2` is provided.\n        v2: see `v1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_1PosInterval = {"PosInterval", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_1PosInterval, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_PosInterval};
static PyObject *__pyx_pw_7foolysh_9animation_1PosInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_duration = 0;
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PosInterval (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_duration,&__pyx_n_s_v1,&__pyx_n_s_v2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_duration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PosInterval", 0, 3, 6, 1); __PYX_ERR(0, 1062, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PosInterval", 0, 3, 6, 2); __PYX_ERR(0, 1062, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "PosInterval") < 0)) __PYX_ERR(0, 1062, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_duration = values[1];
    __pyx_v_v1 = values[2];
    __pyx_v_v2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PosInterval", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1062, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.PosInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_PosInterval(__pyx_self, __pyx_v_node, __pyx_v_duration, __pyx_v_v1, __pyx_v_v2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_PosInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_ival = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("PosInterval", 0);

  /* "foolysh/animation.pyx":1076
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1077
 *     """
 *     if blend is None:
 *         ival = Interval(node)             # <<<<<<<<<<<<<<
 *     else:
 *         ival = Interval(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1076
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1079
 *         ival = Interval(node)
 *     else:
 *         ival = Interval(node, blend=blend)             # <<<<<<<<<<<<<<
 *     ival.set_duration(duration)
 *     ival.add_pos(v1, v2, rel)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1079, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1080
 *     else:
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)             # <<<<<<<<<<<<<<
 *     ival.add_pos(v1, v2, rel)
 *     return ival
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_set_duration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_duration) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_duration);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1081
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)
 *     ival.add_pos(v1, v2, rel)             # <<<<<<<<<<<<<<
 *     return ival
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_add_pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_v1);
    __Pyx_GIVEREF(__pyx_v_v1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_v1);
    __Pyx_INCREF(__pyx_v_v2);
    __Pyx_GIVEREF(__pyx_v_v2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_v2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1082
 *     ival.set_duration(duration)
 *     ival.add_pos(v1, v2, rel)
 *     return ival             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ival));
  __pyx_r = ((PyObject *)__pyx_v_ival);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1062
 * 
 * 
 * def PosInterval(node, duration, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with position
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.PosInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ival);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1085
 * 
 * 
 * def ScaleInterval(node, duration, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with scale modifier.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_3ScaleInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_2ScaleInterval[] = "ScaleInterval(node, duration, s1, s2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Interval` instance with scale modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        duration: ``float`` duration of the Interval in seconds.\n        s1: ``float``/``tuple`` the end or start scale, depending on whether\n            `s2` is provided.\n        s2: see `s1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_3ScaleInterval = {"ScaleInterval", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_3ScaleInterval, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_2ScaleInterval};
static PyObject *__pyx_pw_7foolysh_9animation_3ScaleInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_duration = 0;
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ScaleInterval (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_duration,&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_duration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ScaleInterval", 0, 3, 6, 1); __PYX_ERR(0, 1085, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ScaleInterval", 0, 3, 6, 2); __PYX_ERR(0, 1085, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ScaleInterval") < 0)) __PYX_ERR(0, 1085, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_duration = values[1];
    __pyx_v_s1 = values[2];
    __pyx_v_s2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ScaleInterval", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1085, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.ScaleInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_2ScaleInterval(__pyx_self, __pyx_v_node, __pyx_v_duration, __pyx_v_s1, __pyx_v_s2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_2ScaleInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_ival = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("ScaleInterval", 0);

  /* "foolysh/animation.pyx":1098
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1099
 *     """
 *     if blend is None:
 *         ival = Interval(node)             # <<<<<<<<<<<<<<
 *     else:
 *         ival = Interval(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1098
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1101
 *         ival = Interval(node)
 *     else:
 *         ival = Interval(node, blend=blend)             # <<<<<<<<<<<<<<
 *     ival.set_duration(duration)
 *     ival.add_scale(s1, s2, rel)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1101, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1102
 *     else:
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)             # <<<<<<<<<<<<<<
 *     ival.add_scale(s1, s2, rel)
 *     return ival
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_set_duration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_duration) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_duration);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1103
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)
 *     ival.add_scale(s1, s2, rel)             # <<<<<<<<<<<<<<
 *     return ival
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_add_scale); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_s1, __pyx_v_s2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_s1, __pyx_v_s2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_s1);
    __Pyx_GIVEREF(__pyx_v_s1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_s1);
    __Pyx_INCREF(__pyx_v_s2);
    __Pyx_GIVEREF(__pyx_v_s2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_s2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1104
 *     ival.set_duration(duration)
 *     ival.add_scale(s1, s2, rel)
 *     return ival             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ival));
  __pyx_r = ((PyObject *)__pyx_v_ival);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1085
 * 
 * 
 * def ScaleInterval(node, duration, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with scale modifier.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.ScaleInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ival);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1107
 * 
 * 
 * def RotationInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_5RotationInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_4RotationInterval[] = "RotationInterval(node, duration, d1, d2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Interval` instance with rotation\n    modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        duration: ``float`` duration of the Interval in seconds.\n        d1: ``float`` the end or start angle in degrees, depending on whether\n            `d2` is provided.\n        d2: see `d1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_5RotationInterval = {"RotationInterval", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_5RotationInterval, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_4RotationInterval};
static PyObject *__pyx_pw_7foolysh_9animation_5RotationInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_duration = 0;
  PyObject *__pyx_v_d1 = 0;
  PyObject *__pyx_v_d2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RotationInterval (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_duration,&__pyx_n_s_d1,&__pyx_n_s_d2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_duration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationInterval", 0, 3, 6, 1); __PYX_ERR(0, 1107, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationInterval", 0, 3, 6, 2); __PYX_ERR(0, 1107, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "RotationInterval") < 0)) __PYX_ERR(0, 1107, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_duration = values[1];
    __pyx_v_d1 = values[2];
    __pyx_v_d2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("RotationInterval", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.RotationInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_4RotationInterval(__pyx_self, __pyx_v_node, __pyx_v_duration, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_4RotationInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_ival = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("RotationInterval", 0);

  /* "foolysh/animation.pyx":1121
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1122
 *     """
 *     if blend is None:
 *         ival = Interval(node)             # <<<<<<<<<<<<<<
 *     else:
 *         ival = Interval(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1121
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1124
 *         ival = Interval(node)
 *     else:
 *         ival = Interval(node, blend=blend)             # <<<<<<<<<<<<<<
 *     ival.set_duration(duration)
 *     ival.add_rotation(d1, d2, rel)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1124, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1125
 *     else:
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)             # <<<<<<<<<<<<<<
 *     ival.add_rotation(d1, d2, rel)
 *     return ival
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_set_duration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_duration) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_duration);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1126
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)
 *     ival.add_rotation(d1, d2, rel)             # <<<<<<<<<<<<<<
 *     return ival
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_add_rotation); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_d1);
    __Pyx_GIVEREF(__pyx_v_d1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_d1);
    __Pyx_INCREF(__pyx_v_d2);
    __Pyx_GIVEREF(__pyx_v_d2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_d2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1127
 *     ival.set_duration(duration)
 *     ival.add_rotation(d1, d2, rel)
 *     return ival             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ival));
  __pyx_r = ((PyObject *)__pyx_v_ival);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1107
 * 
 * 
 * def RotationInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.RotationInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ival);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1130
 * 
 * 
 * def RotationCenterInterval(node, duration, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation center
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_7RotationCenterInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_6RotationCenterInterval[] = "RotationCenterInterval(node, duration, v1, v2=None, blend=None)\n\n    Factory method to create an :class:`Interval` instance with rotation center\n    modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        duration: ``float`` duration of the Interval in seconds.\n        v1: :class:`~foolysh.tools.vec2.Vec2` the end or start position of\n            the rotation center, depending on whether `v2` is provided.\n        v2: see `v1`\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_7RotationCenterInterval = {"RotationCenterInterval", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_7RotationCenterInterval, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_6RotationCenterInterval};
static PyObject *__pyx_pw_7foolysh_9animation_7RotationCenterInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_duration = 0;
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RotationCenterInterval (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_duration,&__pyx_n_s_v1,&__pyx_n_s_v2,&__pyx_n_s_blend,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_duration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationCenterInterval", 0, 3, 5, 1); __PYX_ERR(0, 1130, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationCenterInterval", 0, 3, 5, 2); __PYX_ERR(0, 1130, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "RotationCenterInterval") < 0)) __PYX_ERR(0, 1130, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_duration = values[1];
    __pyx_v_v1 = values[2];
    __pyx_v_v2 = values[3];
    __pyx_v_blend = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("RotationCenterInterval", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.RotationCenterInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_6RotationCenterInterval(__pyx_self, __pyx_v_node, __pyx_v_duration, __pyx_v_v1, __pyx_v_v2, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_6RotationCenterInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_ival = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("RotationCenterInterval", 0);

  /* "foolysh/animation.pyx":1143
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1144
 *     """
 *     if blend is None:
 *         ival = Interval(node)             # <<<<<<<<<<<<<<
 *     else:
 *         ival = Interval(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1143
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1146
 *         ival = Interval(node)
 *     else:
 *         ival = Interval(node, blend=blend)             # <<<<<<<<<<<<<<
 *     ival.set_duration(duration)
 *     ival.add_rotation_center(v1, v2)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1146, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1147
 *     else:
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)             # <<<<<<<<<<<<<<
 *     ival.add_rotation_center(v1, v2)
 *     return ival
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_set_duration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_duration) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_duration);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1148
 *         ival = Interval(node, blend=blend)
 *     ival.set_duration(duration)
 *     ival.add_rotation_center(v1, v2)             # <<<<<<<<<<<<<<
 *     return ival
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_add_rotation_center); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_v1);
    __Pyx_GIVEREF(__pyx_v_v1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_v1);
    __Pyx_INCREF(__pyx_v_v2);
    __Pyx_GIVEREF(__pyx_v_v2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_v2);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1149
 *     ival.set_duration(duration)
 *     ival.add_rotation_center(v1, v2)
 *     return ival             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ival));
  __pyx_r = ((PyObject *)__pyx_v_ival);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1130
 * 
 * 
 * def RotationCenterInterval(node, duration, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation center
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.RotationCenterInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ival);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1152
 * 
 * 
 * def DepthInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with depth modifier.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_9DepthInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_8DepthInterval[] = "DepthInterval(node, duration, d1, d2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Interval` instance with depth modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        duration: ``float`` duration of the Interval in seconds.\n        d1: ``int`` the end or start depth, depending on whether `d2` is\n            provided.\n        d2: see `d1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_9DepthInterval = {"DepthInterval", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_9DepthInterval, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_8DepthInterval};
static PyObject *__pyx_pw_7foolysh_9animation_9DepthInterval(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_duration = 0;
  PyObject *__pyx_v_d1 = 0;
  PyObject *__pyx_v_d2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("DepthInterval (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_duration,&__pyx_n_s_d1,&__pyx_n_s_d2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_duration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DepthInterval", 0, 3, 6, 1); __PYX_ERR(0, 1152, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DepthInterval", 0, 3, 6, 2); __PYX_ERR(0, 1152, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "DepthInterval") < 0)) __PYX_ERR(0, 1152, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_duration = values[1];
    __pyx_v_d1 = values[2];
    __pyx_v_d2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("DepthInterval", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.DepthInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_8DepthInterval(__pyx_self, __pyx_v_node, __pyx_v_duration, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_8DepthInterval(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_duration, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Interval *__pyx_v_ival = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("DepthInterval", 0);

  /* "foolysh/animation.pyx":1165
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1166
 *     """
 *     if blend is None:
 *         ival = Interval(node)             # <<<<<<<<<<<<<<
 *     else:
 *         ival = Interval(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1165
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         ival = Interval(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1168
 *         ival = Interval(node)
 *     else:
 *         ival = Interval(node, blend=blend)             # <<<<<<<<<<<<<<
 * 
 *     ival.set_duration(duration)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1168, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Interval), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ival = ((struct __pyx_obj_7foolysh_9animation_Interval *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1170
 *         ival = Interval(node, blend=blend)
 * 
 *     ival.set_duration(duration)             # <<<<<<<<<<<<<<
 *     ival.add_depth(d1, d2, rel)
 *     return ival
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_set_duration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_duration) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_duration);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1171
 * 
 *     ival.set_duration(duration)
 *     ival.add_depth(d1, d2, rel)             # <<<<<<<<<<<<<<
 *     return ival
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ival), __pyx_n_s_add_depth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_d1);
    __Pyx_GIVEREF(__pyx_v_d1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_d1);
    __Pyx_INCREF(__pyx_v_d2);
    __Pyx_GIVEREF(__pyx_v_d2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_d2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1172
 *     ival.set_duration(duration)
 *     ival.add_depth(d1, d2, rel)
 *     return ival             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ival));
  __pyx_r = ((PyObject *)__pyx_v_ival);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1152
 * 
 * 
 * def DepthInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with depth modifier.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.DepthInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ival);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1175
 * 
 * 
 * def PosAnimation(node, speed, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with position
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_11PosAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_10PosAnimation[] = "PosAnimation(node, speed, v1, v2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Animation` instance with position\n    modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        speed: ``float`` speed of the Animation in units per second.\n        v1: :class:`~foolysh.tools.vec2.Vec2` the end or start position,\n            depending on whether `v2` is provided.\n        v2: see `v1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_11PosAnimation = {"PosAnimation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_11PosAnimation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_10PosAnimation};
static PyObject *__pyx_pw_7foolysh_9animation_11PosAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_speed = 0;
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PosAnimation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_speed,&__pyx_n_s_v1,&__pyx_n_s_v2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_speed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PosAnimation", 0, 3, 6, 1); __PYX_ERR(0, 1175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PosAnimation", 0, 3, 6, 2); __PYX_ERR(0, 1175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "PosAnimation") < 0)) __PYX_ERR(0, 1175, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_speed = values[1];
    __pyx_v_v1 = values[2];
    __pyx_v_v2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PosAnimation", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.PosAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_10PosAnimation(__pyx_self, __pyx_v_node, __pyx_v_speed, __pyx_v_v1, __pyx_v_v2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_10PosAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_anim = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("PosAnimation", 0);

  /* "foolysh/animation.pyx":1189
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1190
 *     """
 *     if blend is None:
 *         anim = Animation(node)             # <<<<<<<<<<<<<<
 *     else:
 *         anim = Animation(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1189
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1192
 *         anim = Animation(node)
 *     else:
 *         anim = Animation(node, blend=blend)             # <<<<<<<<<<<<<<
 *     anim.set_pos_speed(speed)
 *     anim.add_pos(v1, v2, rel)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1192, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1193
 *     else:
 *         anim = Animation(node, blend=blend)
 *     anim.set_pos_speed(speed)             # <<<<<<<<<<<<<<
 *     anim.add_pos(v1, v2, rel)
 *     return anim
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_set_pos_speed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_speed) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_speed);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1194
 *         anim = Animation(node, blend=blend)
 *     anim.set_pos_speed(speed)
 *     anim.add_pos(v1, v2, rel)             # <<<<<<<<<<<<<<
 *     return anim
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_add_pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_v1);
    __Pyx_GIVEREF(__pyx_v_v1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_v1);
    __Pyx_INCREF(__pyx_v_v2);
    __Pyx_GIVEREF(__pyx_v_v2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_v2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1195
 *     anim.set_pos_speed(speed)
 *     anim.add_pos(v1, v2, rel)
 *     return anim             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_anim));
  __pyx_r = ((PyObject *)__pyx_v_anim);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1175
 * 
 * 
 * def PosAnimation(node, speed, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with position
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.PosAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_anim);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1198
 * 
 * 
 * def ScaleAnimation(node, speed, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with scale modifier.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_13ScaleAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_12ScaleAnimation[] = "ScaleAnimation(node, speed, s1, s2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Animation` instance with scale modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        speed: ``float`` speed of the Animation in units per second.\n        s1: ``float``/``tuple`` the end or start scale, depending on whether\n            `s2` is provided.\n        s2: see `s1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_13ScaleAnimation = {"ScaleAnimation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_13ScaleAnimation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_12ScaleAnimation};
static PyObject *__pyx_pw_7foolysh_9animation_13ScaleAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_speed = 0;
  PyObject *__pyx_v_s1 = 0;
  PyObject *__pyx_v_s2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ScaleAnimation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_speed,&__pyx_n_s_s1,&__pyx_n_s_s2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_speed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ScaleAnimation", 0, 3, 6, 1); __PYX_ERR(0, 1198, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ScaleAnimation", 0, 3, 6, 2); __PYX_ERR(0, 1198, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ScaleAnimation") < 0)) __PYX_ERR(0, 1198, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_speed = values[1];
    __pyx_v_s1 = values[2];
    __pyx_v_s2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ScaleAnimation", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.ScaleAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_12ScaleAnimation(__pyx_self, __pyx_v_node, __pyx_v_speed, __pyx_v_s1, __pyx_v_s2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_12ScaleAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_s1, PyObject *__pyx_v_s2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_anim = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("ScaleAnimation", 0);

  /* "foolysh/animation.pyx":1211
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1212
 *     """
 *     if blend is None:
 *         anim = Animation(node)             # <<<<<<<<<<<<<<
 *     else:
 *         anim = Animation(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1211
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1214
 *         anim = Animation(node)
 *     else:
 *         anim = Animation(node, blend=blend)             # <<<<<<<<<<<<<<
 *     anim.set_scale_speed(speed)
 *     anim.add_scale(s1, s2, rel)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1214, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1215
 *     else:
 *         anim = Animation(node, blend=blend)
 *     anim.set_scale_speed(speed)             # <<<<<<<<<<<<<<
 *     anim.add_scale(s1, s2, rel)
 *     return anim
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_set_scale_speed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_speed) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_speed);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1216
 *         anim = Animation(node, blend=blend)
 *     anim.set_scale_speed(speed)
 *     anim.add_scale(s1, s2, rel)             # <<<<<<<<<<<<<<
 *     return anim
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_add_scale); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_s1, __pyx_v_s2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_s1, __pyx_v_s2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_s1);
    __Pyx_GIVEREF(__pyx_v_s1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_s1);
    __Pyx_INCREF(__pyx_v_s2);
    __Pyx_GIVEREF(__pyx_v_s2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_s2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1217
 *     anim.set_scale_speed(speed)
 *     anim.add_scale(s1, s2, rel)
 *     return anim             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_anim));
  __pyx_r = ((PyObject *)__pyx_v_anim);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1198
 * 
 * 
 * def ScaleAnimation(node, speed, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with scale modifier.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.ScaleAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_anim);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1220
 * 
 * 
 * def RotationAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_15RotationAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_14RotationAnimation[] = "RotationAnimation(node, speed, d1, d2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Animation` instance with rotation\n    modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        speed: ``float`` speed of the Animation in units per second.\n        d1: ``float`` the end or start angle in degrees, depending on whether\n            `d2` is provided.\n        d2: see `d1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_15RotationAnimation = {"RotationAnimation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_15RotationAnimation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_14RotationAnimation};
static PyObject *__pyx_pw_7foolysh_9animation_15RotationAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_speed = 0;
  PyObject *__pyx_v_d1 = 0;
  PyObject *__pyx_v_d2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RotationAnimation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_speed,&__pyx_n_s_d1,&__pyx_n_s_d2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_speed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationAnimation", 0, 3, 6, 1); __PYX_ERR(0, 1220, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationAnimation", 0, 3, 6, 2); __PYX_ERR(0, 1220, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "RotationAnimation") < 0)) __PYX_ERR(0, 1220, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_speed = values[1];
    __pyx_v_d1 = values[2];
    __pyx_v_d2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("RotationAnimation", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1220, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.RotationAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_14RotationAnimation(__pyx_self, __pyx_v_node, __pyx_v_speed, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_14RotationAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_anim = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("RotationAnimation", 0);

  /* "foolysh/animation.pyx":1234
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1235
 *     """
 *     if blend is None:
 *         anim = Animation(node)             # <<<<<<<<<<<<<<
 *     else:
 *         anim = Animation(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1234
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1237
 *         anim = Animation(node)
 *     else:
 *         anim = Animation(node, blend=blend)             # <<<<<<<<<<<<<<
 *     anim.set_rotation_speed(speed)
 *     anim.add_rotation(d1, d2, rel)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1237, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1238
 *     else:
 *         anim = Animation(node, blend=blend)
 *     anim.set_rotation_speed(speed)             # <<<<<<<<<<<<<<
 *     anim.add_rotation(d1, d2, rel)
 *     return anim
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_set_rotation_speed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_speed) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_speed);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1239
 *         anim = Animation(node, blend=blend)
 *     anim.set_rotation_speed(speed)
 *     anim.add_rotation(d1, d2, rel)             # <<<<<<<<<<<<<<
 *     return anim
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_add_rotation); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_d1);
    __Pyx_GIVEREF(__pyx_v_d1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_d1);
    __Pyx_INCREF(__pyx_v_d2);
    __Pyx_GIVEREF(__pyx_v_d2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_d2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1240
 *     anim.set_rotation_speed(speed)
 *     anim.add_rotation(d1, d2, rel)
 *     return anim             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_anim));
  __pyx_r = ((PyObject *)__pyx_v_anim);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1220
 * 
 * 
 * def RotationAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.RotationAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_anim);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1243
 * 
 * 
 * def RotationCenterAnimation(node, speed, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation center
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_17RotationCenterAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_16RotationCenterAnimation[] = "RotationCenterAnimation(node, speed, v1, v2=None, blend=None)\n\n    Factory method to create an :class:`Animation` instance with rotation center\n    modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        speed: ``float`` speed of the Animation in units per second.\n        v1: :class:`~foolysh.tools.vec2.Vec2` the end or start position of\n            the rotation center, depending on whether `v2` is provided.\n        v2: see `v1`\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_17RotationCenterAnimation = {"RotationCenterAnimation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_17RotationCenterAnimation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_16RotationCenterAnimation};
static PyObject *__pyx_pw_7foolysh_9animation_17RotationCenterAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_speed = 0;
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RotationCenterAnimation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_speed,&__pyx_n_s_v1,&__pyx_n_s_v2,&__pyx_n_s_blend,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_speed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationCenterAnimation", 0, 3, 5, 1); __PYX_ERR(0, 1243, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RotationCenterAnimation", 0, 3, 5, 2); __PYX_ERR(0, 1243, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "RotationCenterAnimation") < 0)) __PYX_ERR(0, 1243, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_speed = values[1];
    __pyx_v_v1 = values[2];
    __pyx_v_v2 = values[3];
    __pyx_v_blend = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("RotationCenterAnimation", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1243, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.RotationCenterAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_16RotationCenterAnimation(__pyx_self, __pyx_v_node, __pyx_v_speed, __pyx_v_v1, __pyx_v_v2, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_16RotationCenterAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_anim = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("RotationCenterAnimation", 0);

  /* "foolysh/animation.pyx":1256
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1257
 *     """
 *     if blend is None:
 *         anim = Animation(node)             # <<<<<<<<<<<<<<
 *     else:
 *         anim = Animation(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1256
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1259
 *         anim = Animation(node)
 *     else:
 *         anim = Animation(node, blend=blend)             # <<<<<<<<<<<<<<
 *     anim.set_rotation_center_speed(speed)
 *     anim.add_rotation_center(v1, v2)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1259, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1260
 *     else:
 *         anim = Animation(node, blend=blend)
 *     anim.set_rotation_center_speed(speed)             # <<<<<<<<<<<<<<
 *     anim.add_rotation_center(v1, v2)
 *     return anim
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_set_rotation_center_speed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_speed) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_speed);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1261
 *         anim = Animation(node, blend=blend)
 *     anim.set_rotation_center_speed(speed)
 *     anim.add_rotation_center(v1, v2)             # <<<<<<<<<<<<<<
 *     return anim
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_add_rotation_center); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_v1, __pyx_v_v2};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_v1);
    __Pyx_GIVEREF(__pyx_v_v1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_v1);
    __Pyx_INCREF(__pyx_v_v2);
    __Pyx_GIVEREF(__pyx_v_v2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_v2);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1262
 *     anim.set_rotation_center_speed(speed)
 *     anim.add_rotation_center(v1, v2)
 *     return anim             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_anim));
  __pyx_r = ((PyObject *)__pyx_v_anim);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1243
 * 
 * 
 * def RotationCenterAnimation(node, speed, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation center
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.RotationCenterAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_anim);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1265
 * 
 * 
 * def DepthAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with depth modifier.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_19DepthAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_18DepthAnimation[] = "DepthAnimation(node, speed, d1, d2=None, rel=None, blend=None)\n\n    Factory method to create an :class:`Animation` instance with depth modifier.\n\n    Args:\n        node: :class:`~foolysh.scene.node.Node` the manipulated node instance.\n        speed: ``float`` speed of the Animation in units per second.\n        d1: ``int`` the end or start depth, depending on whether `d2` is\n            provided.\n        d2: see `d1`\n        rel: :class:`~foolysh.scene.node.Node` optional relative node.\n        blend: :class:`~foolysh.animation.BlendType` optional blending.\n    ";
static PyMethodDef __pyx_mdef_7foolysh_9animation_19DepthAnimation = {"DepthAnimation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_19DepthAnimation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_18DepthAnimation};
static PyObject *__pyx_pw_7foolysh_9animation_19DepthAnimation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node = 0;
  PyObject *__pyx_v_speed = 0;
  PyObject *__pyx_v_d1 = 0;
  PyObject *__pyx_v_d2 = 0;
  PyObject *__pyx_v_rel = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("DepthAnimation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_speed,&__pyx_n_s_d1,&__pyx_n_s_d2,&__pyx_n_s_rel,&__pyx_n_s_blend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_speed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DepthAnimation", 0, 3, 6, 1); __PYX_ERR(0, 1265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("DepthAnimation", 0, 3, 6, 2); __PYX_ERR(0, 1265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rel);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "DepthAnimation") < 0)) __PYX_ERR(0, 1265, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = values[0];
    __pyx_v_speed = values[1];
    __pyx_v_d1 = values[2];
    __pyx_v_d2 = values[3];
    __pyx_v_rel = values[4];
    __pyx_v_blend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("DepthAnimation", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.DepthAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_18DepthAnimation(__pyx_self, __pyx_v_node, __pyx_v_speed, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel, __pyx_v_blend);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_18DepthAnimation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node, PyObject *__pyx_v_speed, PyObject *__pyx_v_d1, PyObject *__pyx_v_d2, PyObject *__pyx_v_rel, PyObject *__pyx_v_blend) {
  struct __pyx_obj_7foolysh_9animation_Animation *__pyx_v_anim = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("DepthAnimation", 0);

  /* "foolysh/animation.pyx":1278
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_blend == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "foolysh/animation.pyx":1279
 *     """
 *     if blend is None:
 *         anim = Animation(node)             # <<<<<<<<<<<<<<
 *     else:
 *         anim = Animation(node, blend=blend)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "foolysh/animation.pyx":1278
 *         blend: :class:`~foolysh.animation.BlendType` optional blending.
 *     """
 *     if blend is None:             # <<<<<<<<<<<<<<
 *         anim = Animation(node)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "foolysh/animation.pyx":1281
 *         anim = Animation(node)
 *     else:
 *         anim = Animation(node, blend=blend)             # <<<<<<<<<<<<<<
 *     anim.set_depth_speed(speed)
 *     anim.add_depth(d1, d2, rel)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_node);
    __Pyx_GIVEREF(__pyx_v_node);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_node);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_blend, __pyx_v_blend) < 0) __PYX_ERR(0, 1281, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7foolysh_9animation_Animation), __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_anim = ((struct __pyx_obj_7foolysh_9animation_Animation *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "foolysh/animation.pyx":1282
 *     else:
 *         anim = Animation(node, blend=blend)
 *     anim.set_depth_speed(speed)             # <<<<<<<<<<<<<<
 *     anim.add_depth(d1, d2, rel)
 *     return anim
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_set_depth_speed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_speed) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_speed);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1283
 *         anim = Animation(node, blend=blend)
 *     anim.set_depth_speed(speed)
 *     anim.add_depth(d1, d2, rel)             # <<<<<<<<<<<<<<
 *     return anim
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_anim), __pyx_n_s_add_depth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_d1, __pyx_v_d2, __pyx_v_rel};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_d1);
    __Pyx_GIVEREF(__pyx_v_d1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_d1);
    __Pyx_INCREF(__pyx_v_d2);
    __Pyx_GIVEREF(__pyx_v_d2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_d2);
    __Pyx_INCREF(__pyx_v_rel);
    __Pyx_GIVEREF(__pyx_v_rel);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_rel);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "foolysh/animation.pyx":1284
 *     anim.set_depth_speed(speed)
 *     anim.add_depth(d1, d2, rel)
 *     return anim             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_anim));
  __pyx_r = ((PyObject *)__pyx_v_anim);
  goto __pyx_L0;

  /* "foolysh/animation.pyx":1265
 * 
 * 
 * def DepthAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with depth modifier.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("foolysh.animation.DepthAnimation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_anim);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1298
 *         automatically.
 *     """
 *     def animate(self, dt, **kwargs):             # <<<<<<<<<<<<<<
 *         self._animate(dt)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_16AnimationManager_1animate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_16AnimationManager_animate[] = "AnimationManager.animate(self, dt, **kwargs)";
static PyObject *__pyx_pw_7foolysh_9animation_16AnimationManager_1animate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dt = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("animate (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dt,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "animate") < 0)) __PYX_ERR(0, 1298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_dt = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("animate", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("foolysh.animation.AnimationManager.animate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_16AnimationManager_animate(((struct __pyx_obj_7foolysh_9animation_AnimationManager *)__pyx_v_self), __pyx_v_dt, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_16AnimationManager_animate(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self, PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("animate", 0);

  /* "foolysh/animation.pyx":1299
 *     """
 *     def animate(self, dt, **kwargs):
 *         self._animate(dt)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _animate(self, const double dt):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1299, __pyx_L1_error)
  ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationManager *)__pyx_v_self->__pyx_vtab)->_animate(__pyx_v_self, __pyx_t_1);

  /* "foolysh/animation.pyx":1298
 *         automatically.
 *     """
 *     def animate(self, dt, **kwargs):             # <<<<<<<<<<<<<<
 *         self._animate(dt)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("foolysh.animation.AnimationManager.animate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "foolysh/animation.pyx":1301
 *         self._animate(dt)
 * 
 *     cdef void _animate(self, const double dt):             # <<<<<<<<<<<<<<
 *         """Advance active animations by `dt` seconds."""
 *         deref(__am).animate(dt)
 */

static void __pyx_f_7foolysh_9animation_16AnimationManager__animate(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self, double const __pyx_v_dt) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_animate", 0);

  /* "foolysh/animation.pyx":1303
 *     cdef void _animate(self, const double dt):
 *         """Advance active animations by `dt` seconds."""
 *         deref(__am).animate(dt)             # <<<<<<<<<<<<<<
 *         self.clean_up()
 * 
 */
  (*__pyx_v_7foolysh_9animation___am).animate(__pyx_v_dt);

  /* "foolysh/animation.pyx":1304
 *         """Advance active animations by `dt` seconds."""
 *         deref(__am).animate(dt)
 *         self.clean_up()             # <<<<<<<<<<<<<<
 * 
 *     cdef void clean_up(self):
 */
  ((struct __pyx_vtabstruct_7foolysh_9animation_AnimationManager *)__pyx_v_self->__pyx_vtab)->clean_up(__pyx_v_self);

  /* "foolysh/animation.pyx":1301
 *         self._animate(dt)
 * 
 *     cdef void _animate(self, const double dt):             # <<<<<<<<<<<<<<
 *         """Advance active animations by `dt` seconds."""
 *         deref(__am).animate(dt)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "foolysh/animation.pyx":1306
 *         self.clean_up()
 * 
 *     cdef void clean_up(self):             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef list r = []
 */

static void __pyx_f_7foolysh_9animation_16AnimationManager_clean_up(CYTHON_UNUSED struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self) {
  char __pyx_v_c;
  PyObject *__pyx_v_r = 0;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_k = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  char __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("clean_up", 0);

  /* "foolysh/animation.pyx":1308
 *     cdef void clean_up(self):
 *         cdef char c
 *         cdef list r = []             # <<<<<<<<<<<<<<
 *         for d in (__ivals, __anims, __seqs):
 *             r = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1309
 *         cdef char c
 *         cdef list r = []
 *         for d in (__ivals, __anims, __seqs):             # <<<<<<<<<<<<<<
 *             r = []
 *             for k in d:
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_7foolysh_9animation___ivals);
  __Pyx_GIVEREF(__pyx_v_7foolysh_9animation___ivals);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_7foolysh_9animation___ivals);
  __Pyx_INCREF(__pyx_v_7foolysh_9animation___anims);
  __Pyx_GIVEREF(__pyx_v_7foolysh_9animation___anims);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_7foolysh_9animation___anims);
  __Pyx_INCREF(__pyx_v_7foolysh_9animation___seqs);
  __Pyx_GIVEREF(__pyx_v_7foolysh_9animation___seqs);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_7foolysh_9animation___seqs);
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= 3) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1309, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_d, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":1310
 *         cdef list r = []
 *         for d in (__ivals, __anims, __seqs):
 *             r = []             # <<<<<<<<<<<<<<
 *             for k in d:
 *                 c = d[k].status()
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_r, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":1311
 *         for d in (__ivals, __anims, __seqs):
 *             r = []
 *             for k in d:             # <<<<<<<<<<<<<<
 *                 c = d[k].status()
 *                 if c == 0 or c == 4:
 */
    __pyx_t_4 = 0;
    if (unlikely(__pyx_v_d == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1311, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_d, 1, ((PyObject *)NULL), (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, NULL, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "foolysh/animation.pyx":1312
 *             r = []
 *             for k in d:
 *                 c = d[k].status()             # <<<<<<<<<<<<<<
 *                 if c == 0 or c == 4:
 *                     r.append(k)
 */
      if (unlikely(__pyx_v_d == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1312, __pyx_L1_error)
      }
      __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_d, __pyx_v_k); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_status); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_PyInt_As_char(__pyx_t_7); if (unlikely((__pyx_t_11 == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 1312, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_c = __pyx_t_11;

      /* "foolysh/animation.pyx":1313
 *             for k in d:
 *                 c = d[k].status()
 *                 if c == 0 or c == 4:             # <<<<<<<<<<<<<<
 *                     r.append(k)
 *             for k in r:
 */
      switch (__pyx_v_c) {
        case 0:
        case 4:

        /* "foolysh/animation.pyx":1314
 *                 c = d[k].status()
 *                 if c == 0 or c == 4:
 *                     r.append(k)             # <<<<<<<<<<<<<<
 *             for k in r:
 *                 d.pop(k)
 */
        __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_r, __pyx_v_k); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1314, __pyx_L1_error)

        /* "foolysh/animation.pyx":1313
 *             for k in d:
 *                 c = d[k].status()
 *                 if c == 0 or c == 4:             # <<<<<<<<<<<<<<
 *                     r.append(k)
 *             for k in r:
 */
        break;
        default: break;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":1315
 *                 if c == 0 or c == 4:
 *                     r.append(k)
 *             for k in r:             # <<<<<<<<<<<<<<
 *                 d.pop(k)
 */
    __pyx_t_1 = __pyx_v_r; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    for (;;) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1315, __pyx_L1_error)
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "foolysh/animation.pyx":1316
 *                     r.append(k)
 *             for k in r:
 *                 d.pop(k)             # <<<<<<<<<<<<<<
 */
      if (unlikely(__pyx_v_d == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
        __PYX_ERR(0, 1316, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyDict_Pop(__pyx_v_d, __pyx_v_k, ((PyObject *)NULL)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "foolysh/animation.pyx":1315
 *                 if c == 0 or c == 4:
 *                     r.append(k)
 *             for k in r:             # <<<<<<<<<<<<<<
 *                 d.pop(k)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "foolysh/animation.pyx":1309
 *         cdef char c
 *         cdef list r = []
 *         for d in (__ivals, __anims, __seqs):             # <<<<<<<<<<<<<<
 *             r = []
 *             for k in d:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "foolysh/animation.pyx":1306
 *         self.clean_up()
 * 
 *     cdef void clean_up(self):             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef list r = []
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("foolysh.animation.AnimationManager.clean_up", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_16AnimationManager_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7foolysh_9animation_16AnimationManager_2__reduce_cython__[] = "AnimationManager.__reduce_cython__(self)";
static PyObject *__pyx_pw_7foolysh_9animation_16AnimationManager_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_16AnimationManager_2__reduce_cython__(((struct __pyx_obj_7foolysh_9animation_AnimationManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_16AnimationManager_2__reduce_cython__(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_AnimationManager); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AnimationManager__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_AnimationManager); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("foolysh.animation.AnimationManager.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AnimationManager__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_16AnimationManager_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7foolysh_9animation_16AnimationManager_4__setstate_cython__[] = "AnimationManager.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7foolysh_9animation_16AnimationManager_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7foolysh_9animation_16AnimationManager_4__setstate_cython__(((struct __pyx_obj_7foolysh_9animation_AnimationManager *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_16AnimationManager_4__setstate_cython__(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AnimationManager__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7foolysh_9animation___pyx_unpickle_AnimationManager__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AnimationManager, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AnimationManager__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("foolysh.animation.AnimationManager.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_AnimationManager(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7foolysh_9animation_21__pyx_unpickle_AnimationManager(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7foolysh_9animation_20__pyx_unpickle_AnimationManager[] = "__pyx_unpickle_AnimationManager(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_7foolysh_9animation_21__pyx_unpickle_AnimationManager = {"__pyx_unpickle_AnimationManager", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_21__pyx_unpickle_AnimationManager, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_20__pyx_unpickle_AnimationManager};
static PyObject *__pyx_pw_7foolysh_9animation_21__pyx_unpickle_AnimationManager(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_AnimationManager (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AnimationManager", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AnimationManager", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_AnimationManager") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AnimationManager", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("foolysh.animation.__pyx_unpickle_AnimationManager", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7foolysh_9animation_20__pyx_unpickle_AnimationManager(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7foolysh_9animation_20__pyx_unpickle_AnimationManager(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AnimationManager", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = AnimationManager.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = AnimationManager.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = AnimationManager.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AnimationManager__set_state(<AnimationManager> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7foolysh_9animation_AnimationManager), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = AnimationManager.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AnimationManager__set_state(<AnimationManager> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = AnimationManager.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AnimationManager__set_state(<AnimationManager> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_AnimationManager__set_state(AnimationManager __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7foolysh_9animation___pyx_unpickle_AnimationManager__set_state(((struct __pyx_obj_7foolysh_9animation_AnimationManager *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = AnimationManager.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AnimationManager__set_state(<AnimationManager> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AnimationManager__set_state(<AnimationManager> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_AnimationManager__set_state(AnimationManager __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_AnimationManager(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("foolysh.animation.__pyx_unpickle_AnimationManager", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_AnimationManager__set_state(<AnimationManager> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AnimationManager__set_state(AnimationManager __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7foolysh_9animation___pyx_unpickle_AnimationManager__set_state(struct __pyx_obj_7foolysh_9animation_AnimationManager *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AnimationManager__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_AnimationManager__set_state(AnimationManager __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_AnimationManager__set_state(AnimationManager __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_AnimationManager__set_state(AnimationManager __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_AnimationManager__set_state(<AnimationManager> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AnimationManager__set_state(AnimationManager __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("foolysh.animation.__pyx_unpickle_AnimationManager__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase __pyx_vtable_7foolysh_9animation_AnimationBase;

static PyObject *__pyx_tp_new_7foolysh_9animation_AnimationBase(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7foolysh_9animation_AnimationBase *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7foolysh_9animation_AnimationBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_7foolysh_9animation_AnimationBase;
  p->_node = ((struct __pyx_obj_7foolysh_5scene_4node_Node *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7foolysh_9animation_13AnimationBase_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7foolysh_9animation_AnimationBase(PyObject *o) {
  struct __pyx_obj_7foolysh_9animation_AnimationBase *p = (struct __pyx_obj_7foolysh_9animation_AnimationBase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_node);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7foolysh_9animation_AnimationBase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7foolysh_9animation_AnimationBase *p = (struct __pyx_obj_7foolysh_9animation_AnimationBase *)o;
  if (p->_node) {
    e = (*v)(((PyObject *)p->_node), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7foolysh_9animation_AnimationBase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7foolysh_9animation_AnimationBase *p = (struct __pyx_obj_7foolysh_9animation_AnimationBase *)o;
  tmp = ((PyObject*)p->_node);
  p->_node = ((struct __pyx_obj_7foolysh_5scene_4node_Node *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7foolysh_9animation_AnimationBase[] = {
  {"play", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationBase_3play, METH_NOARGS, __pyx_doc_7foolysh_9animation_13AnimationBase_2play},
  {"stop", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationBase_5stop, METH_NOARGS, __pyx_doc_7foolysh_9animation_13AnimationBase_4stop},
  {"pause", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationBase_7pause, METH_NOARGS, __pyx_doc_7foolysh_9animation_13AnimationBase_6pause},
  {"resume", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationBase_9resume, METH_NOARGS, __pyx_doc_7foolysh_9animation_13AnimationBase_8resume},
  {"status", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationBase_11status, METH_NOARGS, __pyx_doc_7foolysh_9animation_13AnimationBase_10status},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationBase_13__reduce_cython__, METH_NOARGS, __pyx_doc_7foolysh_9animation_13AnimationBase_12__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationBase_15__setstate_cython__, METH_O, __pyx_doc_7foolysh_9animation_13AnimationBase_14__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7foolysh_9animation_AnimationBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "foolysh.animation.AnimationBase", /*tp_name*/
  sizeof(struct __pyx_obj_7foolysh_9animation_AnimationBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7foolysh_9animation_AnimationBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Provides basic playback control for animations.\n    ", /*tp_doc*/
  __pyx_tp_traverse_7foolysh_9animation_AnimationBase, /*tp_traverse*/
  __pyx_tp_clear_7foolysh_9animation_AnimationBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7foolysh_9animation_AnimationBase, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7foolysh_9animation_AnimationBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7foolysh_9animation_AnimationType __pyx_vtable_7foolysh_9animation_AnimationType;

static PyObject *__pyx_tp_new_7foolysh_9animation_AnimationType(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7foolysh_9animation_AnimationType *p;
  PyObject *o = __pyx_tp_new_7foolysh_9animation_AnimationBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7foolysh_9animation_AnimationType *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase*)__pyx_vtabptr_7foolysh_9animation_AnimationType;
  p->_modifiers = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7foolysh_9animation_13AnimationType_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7foolysh_9animation_AnimationType(PyObject *o) {
  struct __pyx_obj_7foolysh_9animation_AnimationType *p = (struct __pyx_obj_7foolysh_9animation_AnimationType *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_modifiers);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7foolysh_9animation_AnimationBase(o);
}

static int __pyx_tp_traverse_7foolysh_9animation_AnimationType(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7foolysh_9animation_AnimationType *p = (struct __pyx_obj_7foolysh_9animation_AnimationType *)o;
  e = __pyx_tp_traverse_7foolysh_9animation_AnimationBase(o, v, a); if (e) return e;
  if (p->_modifiers) {
    e = (*v)(p->_modifiers, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7foolysh_9animation_AnimationType(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7foolysh_9animation_AnimationType *p = (struct __pyx_obj_7foolysh_9animation_AnimationType *)o;
  __pyx_tp_clear_7foolysh_9animation_AnimationBase(o);
  tmp = ((PyObject*)p->_modifiers);
  p->_modifiers = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7foolysh_9animation_13AnimationType_blend(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7foolysh_9animation_13AnimationType_5blend_1__get__(o);
}

static int __pyx_setprop_7foolysh_9animation_13AnimationType_blend(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7foolysh_9animation_13AnimationType_5blend_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7foolysh_9animation_AnimationType[] = {
  {"set_node", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationType_3set_node, METH_O, __pyx_doc_7foolysh_9animation_13AnimationType_2set_node},
  {"add_pos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_13AnimationType_5add_pos, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_13AnimationType_4add_pos},
  {"add_scale", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_13AnimationType_7add_scale, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_13AnimationType_6add_scale},
  {"add_rotation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_13AnimationType_9add_rotation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_13AnimationType_8add_rotation},
  {"add_rotation_center", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_13AnimationType_11add_rotation_center, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_13AnimationType_10add_rotation_center},
  {"add_depth", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_13AnimationType_13add_depth, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_13AnimationType_12add_depth},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationType_15__reduce_cython__, METH_NOARGS, __pyx_doc_7foolysh_9animation_13AnimationType_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_13AnimationType_17__setstate_cython__, METH_O, __pyx_doc_7foolysh_9animation_13AnimationType_16__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7foolysh_9animation_AnimationType[] = {
  {(char *)"blend", __pyx_getprop_7foolysh_9animation_13AnimationType_blend, __pyx_setprop_7foolysh_9animation_13AnimationType_blend, (char *)"\n        :class:`BlendType` to be used.\n\n        :setter:\n            :class:`BlendType` -> sets the blend type being used.\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7foolysh_9animation_AnimationType = {
  PyVarObject_HEAD_INIT(0, 0)
  "foolysh.animation.AnimationType", /*tp_name*/
  sizeof(struct __pyx_obj_7foolysh_9animation_AnimationType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7foolysh_9animation_AnimationType, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Provides shared functionality for :class:`Interval` and :class:`Animation`\n    ", /*tp_doc*/
  __pyx_tp_traverse_7foolysh_9animation_AnimationType, /*tp_traverse*/
  __pyx_tp_clear_7foolysh_9animation_AnimationType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7foolysh_9animation_AnimationType, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7foolysh_9animation_AnimationType, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7foolysh_9animation_AnimationType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7foolysh_9animation_Interval __pyx_vtable_7foolysh_9animation_Interval;

static PyObject *__pyx_tp_new_7foolysh_9animation_Interval(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7foolysh_9animation_Interval *p;
  PyObject *o = __pyx_tp_new_7foolysh_9animation_AnimationType(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7foolysh_9animation_Interval *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase*)__pyx_vtabptr_7foolysh_9animation_Interval;
  if (unlikely(__pyx_pw_7foolysh_9animation_8Interval_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7foolysh_9animation_Interval(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7foolysh_9animation_8Interval_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7foolysh_9animation_AnimationType(o);
}

static PyMethodDef __pyx_methods_7foolysh_9animation_Interval[] = {
  {"set_duration", (PyCFunction)__pyx_pw_7foolysh_9animation_8Interval_5set_duration, METH_O, __pyx_doc_7foolysh_9animation_8Interval_4set_duration},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_8Interval_9__reduce_cython__, METH_NOARGS, __pyx_doc_7foolysh_9animation_8Interval_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_8Interval_11__setstate_cython__, METH_O, __pyx_doc_7foolysh_9animation_8Interval_10__setstate_cython__},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Interval = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  __pyx_pw_7foolysh_9animation_8Interval_7__iadd__, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_7foolysh_9animation_Interval = {
  PyVarObject_HEAD_INIT(0, 0)
  "foolysh.animation.Interval", /*tp_name*/
  sizeof(struct __pyx_obj_7foolysh_9animation_Interval), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7foolysh_9animation_Interval, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Interval, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Interval that allows for fixed time Node manipulation.\n    Provides overloaded ``__iadd__`` operator for easy combination of several\n    different Intervals to be executed in parallel.\n\n    .. note::\n        When combining Intervals, the duration of the left hand side will be\n        used in the combined Interval, while ignoring the potentially different\n        duration from the right hand side Interval.\n    ", /*tp_doc*/
  __pyx_tp_traverse_7foolysh_9animation_AnimationType, /*tp_traverse*/
  __pyx_tp_clear_7foolysh_9animation_AnimationType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7foolysh_9animation_Interval, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7foolysh_9animation_Interval, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7foolysh_9animation_Animation __pyx_vtable_7foolysh_9animation_Animation;

static PyObject *__pyx_tp_new_7foolysh_9animation_Animation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7foolysh_9animation_Animation *p;
  PyObject *o = __pyx_tp_new_7foolysh_9animation_AnimationType(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7foolysh_9animation_Animation *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase*)__pyx_vtabptr_7foolysh_9animation_Animation;
  if (unlikely(__pyx_pw_7foolysh_9animation_9Animation_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7foolysh_9animation_Animation(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7foolysh_9animation_9Animation_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7foolysh_9animation_AnimationType(o);
}

static PyMethodDef __pyx_methods_7foolysh_9animation_Animation[] = {
  {"set_pos_speed", (PyCFunction)__pyx_pw_7foolysh_9animation_9Animation_5set_pos_speed, METH_O, __pyx_doc_7foolysh_9animation_9Animation_4set_pos_speed},
  {"set_scale_speed", (PyCFunction)__pyx_pw_7foolysh_9animation_9Animation_7set_scale_speed, METH_O, __pyx_doc_7foolysh_9animation_9Animation_6set_scale_speed},
  {"set_rotation_speed", (PyCFunction)__pyx_pw_7foolysh_9animation_9Animation_9set_rotation_speed, METH_O, __pyx_doc_7foolysh_9animation_9Animation_8set_rotation_speed},
  {"set_rotation_center_speed", (PyCFunction)__pyx_pw_7foolysh_9animation_9Animation_11set_rotation_center_speed, METH_O, __pyx_doc_7foolysh_9animation_9Animation_10set_rotation_center_speed},
  {"set_depth_speed", (PyCFunction)__pyx_pw_7foolysh_9animation_9Animation_13set_depth_speed, METH_O, __pyx_doc_7foolysh_9animation_9Animation_12set_depth_speed},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_9Animation_17__reduce_cython__, METH_NOARGS, __pyx_doc_7foolysh_9animation_9Animation_16__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_9Animation_19__setstate_cython__, METH_O, __pyx_doc_7foolysh_9animation_9Animation_18__setstate_cython__},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Animation = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  __pyx_pw_7foolysh_9animation_9Animation_15__iadd__, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_7foolysh_9animation_Animation = {
  PyVarObject_HEAD_INIT(0, 0)
  "foolysh.animation.Animation", /*tp_name*/
  sizeof(struct __pyx_obj_7foolysh_9animation_Animation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7foolysh_9animation_Animation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Animation, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Animation that allows for speed based Node manipulation.\n    Provides overloaded ``__iadd__`` operator for easy combination of several\n    different Animations to be executed in parallel.\n\n    .. note::\n        Since animations are speed based, parallel animations might finish at\n        different times during execution. This might matter, when using combined\n        animations in a :class:`~foolysh.animation.Sequence`.\n    ", /*tp_doc*/
  __pyx_tp_traverse_7foolysh_9animation_AnimationType, /*tp_traverse*/
  __pyx_tp_clear_7foolysh_9animation_AnimationType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7foolysh_9animation_Animation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7foolysh_9animation_Animation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7foolysh_9animation_Sequence __pyx_vtable_7foolysh_9animation_Sequence;

static PyObject *__pyx_tp_new_7foolysh_9animation_Sequence(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7foolysh_9animation_Sequence *p;
  PyObject *o = __pyx_tp_new_7foolysh_9animation_AnimationBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7foolysh_9animation_Sequence *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7foolysh_9animation_AnimationBase*)__pyx_vtabptr_7foolysh_9animation_Sequence;
  if (unlikely(__pyx_pw_7foolysh_9animation_8Sequence_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7foolysh_9animation_Sequence(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7foolysh_9animation_8Sequence_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7foolysh_9animation_AnimationBase(o);
}

static PyObject *__pyx_getprop_7foolysh_9animation_8Sequence_loop(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7foolysh_9animation_8Sequence_4loop_1__get__(o);
}

static int __pyx_setprop_7foolysh_9animation_8Sequence_loop(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7foolysh_9animation_8Sequence_4loop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7foolysh_9animation_Sequence[] = {
  {"append", (PyCFunction)__pyx_pw_7foolysh_9animation_8Sequence_5append, METH_O, __pyx_doc_7foolysh_9animation_8Sequence_4append},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_8Sequence_9__reduce_cython__, METH_NOARGS, __pyx_doc_7foolysh_9animation_8Sequence_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_8Sequence_11__setstate_cython__, METH_O, __pyx_doc_7foolysh_9animation_8Sequence_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7foolysh_9animation_Sequence[] = {
  {(char *)"loop", __pyx_getprop_7foolysh_9animation_8Sequence_loop, __pyx_setprop_7foolysh_9animation_8Sequence_loop, (char *)"\n        Property to define whether a :class:`Sequence` should be looped when\n        playback reaches the end.\n\n        :setter:\n            ``bool`` -> ``True`` = loops forever / until manually stopped.\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Sequence = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  __pyx_pw_7foolysh_9animation_8Sequence_7__iadd__, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_7foolysh_9animation_Sequence = {
  PyVarObject_HEAD_INIT(0, 0)
  "foolysh.animation.Sequence", /*tp_name*/
  sizeof(struct __pyx_obj_7foolysh_9animation_Sequence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7foolysh_9animation_Sequence, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Sequence, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Sequence that allows for playing multiple instances of descendants of\n    :class:`AnimationBase` in sequence.\n    Provides the ``__iadd__`` operator with the same functionality as the\n    :meth:`Sequence.append` method.\n    ", /*tp_doc*/
  __pyx_tp_traverse_7foolysh_9animation_AnimationBase, /*tp_traverse*/
  __pyx_tp_clear_7foolysh_9animation_AnimationBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7foolysh_9animation_Sequence, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7foolysh_9animation_Sequence, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7foolysh_9animation_Sequence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_7foolysh_9animation_AnimationManager __pyx_vtable_7foolysh_9animation_AnimationManager;

static PyObject *__pyx_tp_new_7foolysh_9animation_AnimationManager(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7foolysh_9animation_AnimationManager *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7foolysh_9animation_AnimationManager *)o);
  p->__pyx_vtab = __pyx_vtabptr_7foolysh_9animation_AnimationManager;
  return o;
}

static void __pyx_tp_dealloc_7foolysh_9animation_AnimationManager(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7foolysh_9animation_AnimationManager[] = {
  {"animate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7foolysh_9animation_16AnimationManager_1animate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7foolysh_9animation_16AnimationManager_animate},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_16AnimationManager_3__reduce_cython__, METH_NOARGS, __pyx_doc_7foolysh_9animation_16AnimationManager_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7foolysh_9animation_16AnimationManager_5__setstate_cython__, METH_O, __pyx_doc_7foolysh_9animation_16AnimationManager_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7foolysh_9animation_AnimationManager = {
  PyVarObject_HEAD_INIT(0, 0)
  "foolysh.animation.AnimationManager", /*tp_name*/
  sizeof(struct __pyx_obj_7foolysh_9animation_AnimationManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7foolysh_9animation_AnimationManager, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Provides control when to update all currently active :class:`AnimationBase`\n    instances (:class:`Interval`, :class:`Animation`, :class:`Sequence`).\n\n    .. note::\n        Normally there is no need to use this class, as the functionality is\n        already provided when subclassing :class:`~foolysh.app.App` in your\n        application and :meth:`AnimationManager.animate` is called each frame\n        automatically.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7foolysh_9animation_AnimationManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7foolysh_9animation_AnimationManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_animation(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_animation},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "animation",
    __pyx_k_Provides_wrapper_for_the_Animat, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_0_1, __pyx_k_0_1, sizeof(__pyx_k_0_1), 0, 1, 0, 0},
  {&__pyx_kp_u_An_exception_prevented_pausing_t, __pyx_k_An_exception_prevented_pausing_t, sizeof(__pyx_k_An_exception_prevented_pausing_t), 0, 1, 0, 0},
  {&__pyx_kp_u_An_exception_prevented_pausing_t_2, __pyx_k_An_exception_prevented_pausing_t_2, sizeof(__pyx_k_An_exception_prevented_pausing_t_2), 0, 1, 0, 0},
  {&__pyx_kp_u_An_exception_prevented_pausing_t_3, __pyx_k_An_exception_prevented_pausing_t_3, sizeof(__pyx_k_An_exception_prevented_pausing_t_3), 0, 1, 0, 0},
  {&__pyx_kp_u_An_exception_prevented_resuming, __pyx_k_An_exception_prevented_resuming, sizeof(__pyx_k_An_exception_prevented_resuming), 0, 1, 0, 0},
  {&__pyx_kp_u_An_exception_prevented_resuming_2, __pyx_k_An_exception_prevented_resuming_2, sizeof(__pyx_k_An_exception_prevented_resuming_2), 0, 1, 0, 0},
  {&__pyx_kp_u_An_exception_prevented_resuming_3, __pyx_k_An_exception_prevented_resuming_3, sizeof(__pyx_k_An_exception_prevented_resuming_3), 0, 1, 0, 0},
  {&__pyx_n_s_Animation, __pyx_k_Animation, sizeof(__pyx_k_Animation), 0, 0, 1, 1},
  {&__pyx_n_s_AnimationBase, __pyx_k_AnimationBase, sizeof(__pyx_k_AnimationBase), 0, 0, 1, 1},
  {&__pyx_n_s_AnimationManager, __pyx_k_AnimationManager, sizeof(__pyx_k_AnimationManager), 0, 0, 1, 1},
  {&__pyx_n_s_AnimationType, __pyx_k_AnimationType, sizeof(__pyx_k_AnimationType), 0, 0, 1, 1},
  {&__pyx_n_s_ArithmeticError, __pyx_k_ArithmeticError, sizeof(__pyx_k_ArithmeticError), 0, 0, 1, 1},
  {&__pyx_n_s_BlendType, __pyx_k_BlendType, sizeof(__pyx_k_BlendType), 0, 0, 1, 1},
  {&__pyx_kp_u_Copyright_c_2020_Tiziano_Bettio, __pyx_k_Copyright_c_2020_Tiziano_Bettio, sizeof(__pyx_k_Copyright_c_2020_Tiziano_Bettio), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_pause_Animation, __pyx_k_Could_not_pause_Animation, sizeof(__pyx_k_Could_not_pause_Animation), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_pause_Interval, __pyx_k_Could_not_pause_Interval, sizeof(__pyx_k_Could_not_pause_Interval), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_pause_Sequence, __pyx_k_Could_not_pause_Sequence, sizeof(__pyx_k_Could_not_pause_Sequence), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_play_Animation, __pyx_k_Could_not_play_Animation, sizeof(__pyx_k_Could_not_play_Animation), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_play_Interval, __pyx_k_Could_not_play_Interval, sizeof(__pyx_k_Could_not_play_Interval), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_play_Sequence, __pyx_k_Could_not_play_Sequence, sizeof(__pyx_k_Could_not_play_Sequence), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_resume_Animation, __pyx_k_Could_not_resume_Animation, sizeof(__pyx_k_Could_not_resume_Animation), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_resume_Interval, __pyx_k_Could_not_resume_Interval, sizeof(__pyx_k_Could_not_resume_Interval), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_resume_Sequence, __pyx_k_Could_not_resume_Sequence, sizeof(__pyx_k_Could_not_resume_Sequence), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_stop_Animation, __pyx_k_Could_not_stop_Animation, sizeof(__pyx_k_Could_not_stop_Animation), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_stop_Interval, __pyx_k_Could_not_stop_Interval, sizeof(__pyx_k_Could_not_stop_Interval), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_stop_Sequence, __pyx_k_Could_not_stop_Sequence, sizeof(__pyx_k_Could_not_stop_Sequence), 0, 1, 0, 0},
  {&__pyx_n_s_DepthAnimation, __pyx_k_DepthAnimation, sizeof(__pyx_k_DepthAnimation), 0, 0, 1, 1},
  {&__pyx_n_s_DepthInterval, __pyx_k_DepthInterval, sizeof(__pyx_k_DepthInterval), 0, 0, 1, 1},
  {&__pyx_n_s_EASE_IN, __pyx_k_EASE_IN, sizeof(__pyx_k_EASE_IN), 0, 0, 1, 1},
  {&__pyx_n_s_EASE_IN_OUT, __pyx_k_EASE_IN_OUT, sizeof(__pyx_k_EASE_IN_OUT), 0, 0, 1, 1},
  {&__pyx_n_s_EASE_OUT, __pyx_k_EASE_OUT, sizeof(__pyx_k_EASE_OUT), 0, 0, 1, 1},
  {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
  {&__pyx_kp_s_Enumerations_of_blend_types, __pyx_k_Enumerations_of_blend_types, sizeof(__pyx_k_Enumerations_of_blend_types), 0, 0, 1, 0},
  {&__pyx_kp_u_Expected_positive_non_zero_value, __pyx_k_Expected_positive_non_zero_value, sizeof(__pyx_k_Expected_positive_non_zero_value), 0, 1, 0, 0},
  {&__pyx_kp_u_Illegal_combination_of_arguments, __pyx_k_Illegal_combination_of_arguments, sizeof(__pyx_k_Illegal_combination_of_arguments), 0, 1, 0, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_Interval, __pyx_k_Interval, sizeof(__pyx_k_Interval), 0, 0, 1, 1},
  {&__pyx_n_u_MIT, __pyx_k_MIT, sizeof(__pyx_k_MIT), 0, 1, 0, 1},
  {&__pyx_n_s_NO_BLEND, __pyx_k_NO_BLEND, sizeof(__pyx_k_NO_BLEND), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_u_Not_the_same_Node, __pyx_k_Not_the_same_Node, sizeof(__pyx_k_Not_the_same_Node), 0, 1, 0, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PosAnimation, __pyx_k_PosAnimation, sizeof(__pyx_k_PosAnimation), 0, 0, 1, 1},
  {&__pyx_n_s_PosInterval, __pyx_k_PosInterval, sizeof(__pyx_k_PosInterval), 0, 0, 1, 1},
  {&__pyx_n_s_RotationAnimation, __pyx_k_RotationAnimation, sizeof(__pyx_k_RotationAnimation), 0, 0, 1, 1},
  {&__pyx_n_s_RotationCenterAnimation, __pyx_k_RotationCenterAnimation, sizeof(__pyx_k_RotationCenterAnimation), 0, 0, 1, 1},
  {&__pyx_n_s_RotationCenterInterval, __pyx_k_RotationCenterInterval, sizeof(__pyx_k_RotationCenterInterval), 0, 0, 1, 1},
  {&__pyx_n_s_RotationInterval, __pyx_k_RotationInterval, sizeof(__pyx_k_RotationInterval), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_ScaleAnimation, __pyx_k_ScaleAnimation, sizeof(__pyx_k_ScaleAnimation), 0, 0, 1, 1},
  {&__pyx_n_s_ScaleInterval, __pyx_k_ScaleInterval, sizeof(__pyx_k_ScaleInterval), 0, 0, 1, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_kp_u_Tiziano_Bettio, __pyx_k_Tiziano_Bettio, sizeof(__pyx_k_Tiziano_Bettio), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Unable_to_add_depth_to_Animation, __pyx_k_Unable_to_add_depth_to_Animation, sizeof(__pyx_k_Unable_to_add_depth_to_Animation), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_depth_to_Interval, __pyx_k_Unable_to_add_depth_to_Interval, sizeof(__pyx_k_Unable_to_add_depth_to_Interval), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_position_to_Animat, __pyx_k_Unable_to_add_position_to_Animat, sizeof(__pyx_k_Unable_to_add_position_to_Animat), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_position_to_Interv, __pyx_k_Unable_to_add_position_to_Interv, sizeof(__pyx_k_Unable_to_add_position_to_Interv), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_rotation_center_to, __pyx_k_Unable_to_add_rotation_center_to, sizeof(__pyx_k_Unable_to_add_rotation_center_to), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_rotation_center_to_2, __pyx_k_Unable_to_add_rotation_center_to_2, sizeof(__pyx_k_Unable_to_add_rotation_center_to_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_rotation_to_Animat, __pyx_k_Unable_to_add_rotation_to_Animat, sizeof(__pyx_k_Unable_to_add_rotation_to_Animat), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_rotation_to_Interv, __pyx_k_Unable_to_add_rotation_to_Interv, sizeof(__pyx_k_Unable_to_add_rotation_to_Interv), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_scale_to_Animation, __pyx_k_Unable_to_add_scale_to_Animation, sizeof(__pyx_k_Unable_to_add_scale_to_Animation), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_add_scale_to_Interval, __pyx_k_Unable_to_add_scale_to_Interval, sizeof(__pyx_k_Unable_to_add_scale_to_Interval), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_retrieve_Animation_sta, __pyx_k_Unable_to_retrieve_Animation_sta, sizeof(__pyx_k_Unable_to_retrieve_Animation_sta), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_retrieve_Interval_stat, __pyx_k_Unable_to_retrieve_Interval_stat, sizeof(__pyx_k_Unable_to_retrieve_Interval_stat), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_retrieve_Sequence_stat, __pyx_k_Unable_to_retrieve_Sequence_stat, sizeof(__pyx_k_Unable_to_retrieve_Sequence_stat), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_set_BlendType_to_Anima, __pyx_k_Unable_to_set_BlendType_to_Anima, sizeof(__pyx_k_Unable_to_set_BlendType_to_Anima), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_set_BlendType_to_Inter, __pyx_k_Unable_to_set_BlendType_to_Inter, sizeof(__pyx_k_Unable_to_set_BlendType_to_Inter), 0, 1, 0, 0},
  {&__pyx_kp_u_Unable_to_set_loop_to_Sequence, __pyx_k_Unable_to_set_loop_to_Sequence, sizeof(__pyx_k_Unable_to_set_loop_to_Sequence), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_n_s_add_depth, __pyx_k_add_depth, sizeof(__pyx_k_add_depth), 0, 0, 1, 1},
  {&__pyx_n_s_add_pos, __pyx_k_add_pos, sizeof(__pyx_k_add_pos), 0, 0, 1, 1},
  {&__pyx_n_s_add_rotation, __pyx_k_add_rotation, sizeof(__pyx_k_add_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_add_rotation_center, __pyx_k_add_rotation_center, sizeof(__pyx_k_add_rotation_center), 0, 0, 1, 1},
  {&__pyx_n_s_add_scale, __pyx_k_add_scale, sizeof(__pyx_k_add_scale), 0, 0, 1, 1},
  {&__pyx_n_s_anim, __pyx_k_anim, sizeof(__pyx_k_anim), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_blend, __pyx_k_blend, sizeof(__pyx_k_blend), 0, 0, 1, 1},
  {&__pyx_n_u_blend, __pyx_k_blend, sizeof(__pyx_k_blend), 0, 1, 0, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_copyright, __pyx_k_copyright, sizeof(__pyx_k_copyright), 0, 0, 1, 1},
  {&__pyx_n_s_d1, __pyx_k_d1, sizeof(__pyx_k_d1), 0, 0, 1, 1},
  {&__pyx_n_s_d2, __pyx_k_d2, sizeof(__pyx_k_d2), 0, 0, 1, 1},
  {&__pyx_n_u_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_duration, __pyx_k_duration, sizeof(__pyx_k_duration), 0, 0, 1, 1},
  {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
  {&__pyx_n_s_foolysh_animation, __pyx_k_foolysh_animation, sizeof(__pyx_k_foolysh_animation), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_ival, __pyx_k_ival, sizeof(__pyx_k_ival), 0, 0, 1, 1},
  {&__pyx_n_s_license, __pyx_k_license, sizeof(__pyx_k_license), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_node_id, __pyx_k_node_id, sizeof(__pyx_k_node_id), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_u_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 1, 0, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_AnimationManager, __pyx_k_pyx_unpickle_AnimationManager, sizeof(__pyx_k_pyx_unpickle_AnimationManager), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rel, __pyx_k_rel, sizeof(__pyx_k_rel), 0, 0, 1, 1},
  {&__pyx_n_u_rotation, __pyx_k_rotation, sizeof(__pyx_k_rotation), 0, 1, 0, 1},
  {&__pyx_n_u_rotation_center, __pyx_k_rotation_center, sizeof(__pyx_k_rotation_center), 0, 1, 0, 1},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
  {&__pyx_n_u_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 1, 0, 1},
  {&__pyx_n_s_set_depth_speed, __pyx_k_set_depth_speed, sizeof(__pyx_k_set_depth_speed), 0, 0, 1, 1},
  {&__pyx_n_s_set_duration, __pyx_k_set_duration, sizeof(__pyx_k_set_duration), 0, 0, 1, 1},
  {&__pyx_n_s_set_node, __pyx_k_set_node, sizeof(__pyx_k_set_node), 0, 0, 1, 1},
  {&__pyx_n_s_set_pos_speed, __pyx_k_set_pos_speed, sizeof(__pyx_k_set_pos_speed), 0, 0, 1, 1},
  {&__pyx_n_s_set_rotation_center_speed, __pyx_k_set_rotation_center_speed, sizeof(__pyx_k_set_rotation_center_speed), 0, 0, 1, 1},
  {&__pyx_n_s_set_rotation_speed, __pyx_k_set_rotation_speed, sizeof(__pyx_k_set_rotation_speed), 0, 0, 1, 1},
  {&__pyx_n_s_set_scale_speed, __pyx_k_set_scale_speed, sizeof(__pyx_k_set_scale_speed), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_speed, __pyx_k_speed, sizeof(__pyx_k_speed), 0, 0, 1, 1},
  {&__pyx_kp_s_src_foolysh_animation_pyx, __pyx_k_src_foolysh_animation_pyx, sizeof(__pyx_k_src_foolysh_animation_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_v1, __pyx_k_v1, sizeof(__pyx_k_v1), 0, 0, 1, 1},
  {&__pyx_n_s_v2, __pyx_k_v2, sizeof(__pyx_k_v2), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ArithmeticError = __Pyx_GetBuiltinName(__pyx_n_s_ArithmeticError); if (!__pyx_builtin_ArithmeticError) __PYX_ERR(0, 83, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 885, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "foolysh/animation.pyx":84
 *                 deref(__am).play_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not play Interval')             # <<<<<<<<<<<<<<
 *                 __ivals.pop(self._id)
 *                 raise e
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Could_not_play_Interval); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "foolysh/animation.pyx":92
 *                 deref(__am).play_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not play Animation')             # <<<<<<<<<<<<<<
 *                 __anims.pop(self._id)
 *                 raise e
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Could_not_play_Animation); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "foolysh/animation.pyx":100
 *                 deref(__am).play_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not play Sequence')             # <<<<<<<<<<<<<<
 *                 __seqs.pop(self._id)
 *                 raise e
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Could_not_play_Sequence); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "foolysh/animation.pyx":117
 *                 deref(__am).stop_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not stop Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Could_not_stop_Interval); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "foolysh/animation.pyx":125
 *                 deref(__am).stop_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not stop Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Sequence):
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Could_not_stop_Animation); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "foolysh/animation.pyx":133
 *                 deref(__am).stop_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not stop Sequence')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Could_not_stop_Sequence); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "foolysh/animation.pyx":144
 *                 deref(__am).pause_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not pause Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Could_not_pause_Interval); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "foolysh/animation.pyx":152
 *                 deref(__am).pause_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not pause Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Could_not_pause_Animation); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "foolysh/animation.pyx":160
 *                 deref(__am).pause_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not pause Sequence')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Could_not_pause_Sequence); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "foolysh/animation.pyx":173
 *                 deref(__am).resume_interval(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not resume Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Could_not_resume_Interval); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "foolysh/animation.pyx":181
 *                 deref(__am).resume_animation(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not resume Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Could_not_resume_Animation); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "foolysh/animation.pyx":189
 *                 deref(__am).resume_sequence(self._id)
 *             except ArithmeticError as e:
 *                 print('Could not resume Sequence')             # <<<<<<<<<<<<<<
 *                 raise e
 *             except RuntimeError as e:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Could_not_resume_Sequence); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "foolysh/animation.pyx":204
 *                 return deref(__am).get_interval_status(self._id)
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Interval status')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_retrieve_Interval_stat); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "foolysh/animation.pyx":210
 *                 return deref(__am).get_animation_status(self._id)
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Animation status')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Sequence):
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_retrieve_Animation_sta); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "foolysh/animation.pyx":216
 *                 return deref(__am).get_sequence_status(self._id)
 *             except ArithmeticError as e:
 *                 print('Unable to retrieve Sequence status')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_retrieve_Sequence_stat); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "foolysh/animation.pyx":259
 *                 deref(__am).get_interval(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_set_BlendType_to_Inter); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "foolysh/animation.pyx":265
 *                 deref(__am).get_animation(self._id).set_blend(blend)
 *             except ArithmeticError as e:
 *                 print('Unable to set BlendType to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_set_BlendType_to_Anima); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "foolysh/animation.pyx":308
 *             self.add_pos_esr(v1, v2, rel)
 *         else:
 *             raise TypeError('Illegal combination of arguments')             # <<<<<<<<<<<<<<
 *         self._modifiers['pos'] = (v1, v2, rel)
 * 
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_Illegal_combination_of_arguments); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "foolysh/animation.pyx":316
 *                 deref(__am).get_interval(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_position_to_Interv); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "foolysh/animation.pyx":322
 *                 deref(__am).get_animation(self._id).add_pos(deref(v.thisptr))
 *             except ArithmeticError as e:
 *                 print('Unable to add position to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_position_to_Animat); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "foolysh/animation.pyx":452
 *                 deref(__am).get_interval(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_scale_to_Interval); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "foolysh/animation.pyx":458
 *                 deref(__am).get_animation(self._id).add_scale(_s)
 *             except ArithmeticError as e:
 *                 print('Unable to add scale to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_scale_to_Animation); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "foolysh/animation.pyx":586
 *                 deref(__am).get_interval(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_rotation_to_Interv); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "foolysh/animation.pyx":592
 *                 deref(__am).get_animation(self._id).add_rotation(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_rotation_to_Animat); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "foolysh/animation.pyx":695
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_rotation_center_to); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "foolysh/animation.pyx":703
 *                 )
 *             except ArithmeticError as e:
 *                 print('Unable to add rotation center to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_rotation_center_to_2); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "foolysh/animation.pyx":775
 *                 deref(__am).get_interval(self._id).add_depth(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Interval')             # <<<<<<<<<<<<<<
 *                 raise e
 *         elif isinstance(self, Animation):
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_depth_to_Interval); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "foolysh/animation.pyx":781
 *                 deref(__am).get_animation(self._id).add_depth(d)
 *             except ArithmeticError as e:
 *                 print('Unable to add depth to Animation')             # <<<<<<<<<<<<<<
 *                 raise e
 *         else:
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_add_depth_to_Animation); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "foolysh/animation.pyx":885
 *     cdef void _iadd(self, Interval other):
 *         if other._node.node_id != self._node.node_id:
 *             raise ValueError('Not the same Node')             # <<<<<<<<<<<<<<
 *         if 'pos' in other._modifiers:
 *             self.add_pos(*other._modifiers['pos'])
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_Not_the_same_Node); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "foolysh/animation.pyx":932
 *             raise TypeError
 *         if s <= 0:
 *             raise ValueError('Expected positive, non zero value')             # <<<<<<<<<<<<<<
 *         deref(__am).get_animation(self._id).set_pos_speed(s)
 *         self._pos_speed = s
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_Expected_positive_non_zero_value); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "foolysh/animation.pyx":1032
 *             deref(__am).get_sequence(self._id).loop(l)
 *         except ArithmeticError as e:
 *             print('Unable to set loop to Sequence')             # <<<<<<<<<<<<<<
 *             raise e
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_Unable_to_set_loop_to_Sequence); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "foolysh/animation.pyx":1062
 * 
 * 
 * def PosInterval(node, duration, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with position
 */
  __pyx_tuple__43 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_duration, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_ival); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_PosInterval, 1062, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 1062, __pyx_L1_error)

  /* "foolysh/animation.pyx":1085
 * 
 * 
 * def ScaleInterval(node, duration, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with scale modifier.
 */
  __pyx_tuple__45 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_duration, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_ival); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_ScaleInterval, 1085, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 1085, __pyx_L1_error)

  /* "foolysh/animation.pyx":1107
 * 
 * 
 * def RotationInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation
 */
  __pyx_tuple__47 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_duration, __pyx_n_s_d1, __pyx_n_s_d2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_ival); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_RotationInterval, 1107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 1107, __pyx_L1_error)

  /* "foolysh/animation.pyx":1130
 * 
 * 
 * def RotationCenterInterval(node, duration, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation center
 */
  __pyx_tuple__49 = PyTuple_Pack(6, __pyx_n_s_node, __pyx_n_s_duration, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_blend, __pyx_n_s_ival); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_RotationCenterInterval, 1130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 1130, __pyx_L1_error)

  /* "foolysh/animation.pyx":1152
 * 
 * 
 * def DepthInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with depth modifier.
 */
  __pyx_tuple__51 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_duration, __pyx_n_s_d1, __pyx_n_s_d2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_ival); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_DepthInterval, 1152, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 1152, __pyx_L1_error)

  /* "foolysh/animation.pyx":1175
 * 
 * 
 * def PosAnimation(node, speed, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with position
 */
  __pyx_tuple__53 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_speed, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_anim); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_PosAnimation, 1175, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 1175, __pyx_L1_error)

  /* "foolysh/animation.pyx":1198
 * 
 * 
 * def ScaleAnimation(node, speed, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with scale modifier.
 */
  __pyx_tuple__55 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_speed, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_anim); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_ScaleAnimation, 1198, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 1198, __pyx_L1_error)

  /* "foolysh/animation.pyx":1220
 * 
 * 
 * def RotationAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation
 */
  __pyx_tuple__57 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_speed, __pyx_n_s_d1, __pyx_n_s_d2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_anim); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_RotationAnimation, 1220, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 1220, __pyx_L1_error)

  /* "foolysh/animation.pyx":1243
 * 
 * 
 * def RotationCenterAnimation(node, speed, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation center
 */
  __pyx_tuple__59 = PyTuple_Pack(6, __pyx_n_s_node, __pyx_n_s_speed, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_blend, __pyx_n_s_anim); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_RotationCenterAnimation, 1243, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 1243, __pyx_L1_error)

  /* "foolysh/animation.pyx":1265
 * 
 * 
 * def DepthAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with depth modifier.
 */
  __pyx_tuple__61 = PyTuple_Pack(7, __pyx_n_s_node, __pyx_n_s_speed, __pyx_n_s_d1, __pyx_n_s_d2, __pyx_n_s_rel, __pyx_n_s_blend, __pyx_n_s_anim); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_foolysh_animation_pyx, __pyx_n_s_DepthAnimation, 1265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 1265, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_AnimationManager(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__63 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_AnimationManager, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_7foolysh_9animation___ivals = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7foolysh_9animation___anims = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7foolysh_9animation___seqs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7foolysh_9animation_AnimationBase = &__pyx_vtable_7foolysh_9animation_AnimationBase;
  __pyx_vtable_7foolysh_9animation_AnimationBase._status = (char (*)(struct __pyx_obj_7foolysh_9animation_AnimationBase *))__pyx_f_7foolysh_9animation_13AnimationBase__status;
  if (PyType_Ready(&__pyx_type_7foolysh_9animation_AnimationBase) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7foolysh_9animation_AnimationBase.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7foolysh_9animation_AnimationBase.tp_dictoffset && __pyx_type_7foolysh_9animation_AnimationBase.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7foolysh_9animation_AnimationBase.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7foolysh_9animation_AnimationBase.tp_dict, __pyx_vtabptr_7foolysh_9animation_AnimationBase) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimationBase, (PyObject *)&__pyx_type_7foolysh_9animation_AnimationBase) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7foolysh_9animation_AnimationBase) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_ptype_7foolysh_9animation_AnimationBase = &__pyx_type_7foolysh_9animation_AnimationBase;
  __pyx_vtabptr_7foolysh_9animation_AnimationType = &__pyx_vtable_7foolysh_9animation_AnimationType;
  __pyx_vtable_7foolysh_9animation_AnimationType.__pyx_base = *__pyx_vtabptr_7foolysh_9animation_AnimationBase;
  __pyx_vtable_7foolysh_9animation_AnimationType._set_blend = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, enum foolysh::animation::BlendType))__pyx_f_7foolysh_9animation_13AnimationType__set_blend;
  __pyx_vtable_7foolysh_9animation_AnimationType._set_node = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType__set_node;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_pos_e = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *))__pyx_f_7foolysh_9animation_13AnimationType_add_pos_e;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_pos_es = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *))__pyx_f_7foolysh_9animation_13AnimationType_add_pos_es;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_pos_er = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_pos_er;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_pos_esr = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_pos_esr;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_scale_e = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *))__pyx_f_7foolysh_9animation_13AnimationType_add_scale_e;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_scale_es = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *, PyObject *))__pyx_f_7foolysh_9animation_13AnimationType_add_scale_es;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_scale_er = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_scale_er;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_scale_esr = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, PyObject *, PyObject *, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_scale_esr;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_rotation_e = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float))__pyx_f_7foolysh_9animation_13AnimationType_add_rotation_e;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_rotation_es = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float, float))__pyx_f_7foolysh_9animation_13AnimationType_add_rotation_es;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_rotation_er = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_rotation_er;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_rotation_esr = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, float, float, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_rotation_esr;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_rot_center_e = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *))__pyx_f_7foolysh_9animation_13AnimationType_add_rot_center_e;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_rot_center_es = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *, struct __pyx_obj_7foolysh_5tools_4vec2_Vec2 *))__pyx_f_7foolysh_9animation_13AnimationType_add_rot_center_es;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_depth_e = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int))__pyx_f_7foolysh_9animation_13AnimationType_add_depth_e;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_depth_es = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int, int))__pyx_f_7foolysh_9animation_13AnimationType_add_depth_es;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_depth_er = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_depth_er;
  __pyx_vtable_7foolysh_9animation_AnimationType.add_depth_esr = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationType *, int, int, struct __pyx_obj_7foolysh_5scene_4node_Node *))__pyx_f_7foolysh_9animation_13AnimationType_add_depth_esr;
  __pyx_type_7foolysh_9animation_AnimationType.tp_base = __pyx_ptype_7foolysh_9animation_AnimationBase;
  if (PyType_Ready(&__pyx_type_7foolysh_9animation_AnimationType) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7foolysh_9animation_AnimationType.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7foolysh_9animation_AnimationType.tp_dictoffset && __pyx_type_7foolysh_9animation_AnimationType.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7foolysh_9animation_AnimationType.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7foolysh_9animation_AnimationType.tp_dict, __pyx_vtabptr_7foolysh_9animation_AnimationType) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimationType, (PyObject *)&__pyx_type_7foolysh_9animation_AnimationType) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7foolysh_9animation_AnimationType) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_ptype_7foolysh_9animation_AnimationType = &__pyx_type_7foolysh_9animation_AnimationType;
  __pyx_vtabptr_7foolysh_9animation_Interval = &__pyx_vtable_7foolysh_9animation_Interval;
  __pyx_vtable_7foolysh_9animation_Interval.__pyx_base = *__pyx_vtabptr_7foolysh_9animation_AnimationType;
  __pyx_vtable_7foolysh_9animation_Interval._iadd = (void (*)(struct __pyx_obj_7foolysh_9animation_Interval *, struct __pyx_obj_7foolysh_9animation_Interval *))__pyx_f_7foolysh_9animation_8Interval__iadd;
  __pyx_type_7foolysh_9animation_Interval.tp_base = __pyx_ptype_7foolysh_9animation_AnimationType;
  if (PyType_Ready(&__pyx_type_7foolysh_9animation_Interval) < 0) __PYX_ERR(0, 849, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7foolysh_9animation_Interval.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7foolysh_9animation_Interval.tp_dictoffset && __pyx_type_7foolysh_9animation_Interval.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7foolysh_9animation_Interval.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7foolysh_9animation_Interval.tp_dict, __pyx_vtabptr_7foolysh_9animation_Interval) < 0) __PYX_ERR(0, 849, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Interval, (PyObject *)&__pyx_type_7foolysh_9animation_Interval) < 0) __PYX_ERR(0, 849, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7foolysh_9animation_Interval) < 0) __PYX_ERR(0, 849, __pyx_L1_error)
  __pyx_ptype_7foolysh_9animation_Interval = &__pyx_type_7foolysh_9animation_Interval;
  __pyx_vtabptr_7foolysh_9animation_Animation = &__pyx_vtable_7foolysh_9animation_Animation;
  __pyx_vtable_7foolysh_9animation_Animation.__pyx_base = *__pyx_vtabptr_7foolysh_9animation_AnimationType;
  __pyx_vtable_7foolysh_9animation_Animation._iadd = (void (*)(struct __pyx_obj_7foolysh_9animation_Animation *, struct __pyx_obj_7foolysh_9animation_Animation *))__pyx_f_7foolysh_9animation_9Animation__iadd;
  __pyx_type_7foolysh_9animation_Animation.tp_base = __pyx_ptype_7foolysh_9animation_AnimationType;
  if (PyType_Ready(&__pyx_type_7foolysh_9animation_Animation) < 0) __PYX_ERR(0, 898, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7foolysh_9animation_Animation.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7foolysh_9animation_Animation.tp_dictoffset && __pyx_type_7foolysh_9animation_Animation.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7foolysh_9animation_Animation.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7foolysh_9animation_Animation.tp_dict, __pyx_vtabptr_7foolysh_9animation_Animation) < 0) __PYX_ERR(0, 898, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Animation, (PyObject *)&__pyx_type_7foolysh_9animation_Animation) < 0) __PYX_ERR(0, 898, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7foolysh_9animation_Animation) < 0) __PYX_ERR(0, 898, __pyx_L1_error)
  __pyx_ptype_7foolysh_9animation_Animation = &__pyx_type_7foolysh_9animation_Animation;
  __pyx_vtabptr_7foolysh_9animation_Sequence = &__pyx_vtable_7foolysh_9animation_Sequence;
  __pyx_vtable_7foolysh_9animation_Sequence.__pyx_base = *__pyx_vtabptr_7foolysh_9animation_AnimationBase;
  __pyx_vtable_7foolysh_9animation_Sequence._set_loop = (void (*)(struct __pyx_obj_7foolysh_9animation_Sequence *, int))__pyx_f_7foolysh_9animation_8Sequence__set_loop;
  __pyx_vtable_7foolysh_9animation_Sequence._append_interval = (void (*)(struct __pyx_obj_7foolysh_9animation_Sequence *, struct __pyx_obj_7foolysh_9animation_Interval *))__pyx_f_7foolysh_9animation_8Sequence__append_interval;
  __pyx_vtable_7foolysh_9animation_Sequence._append_animation = (void (*)(struct __pyx_obj_7foolysh_9animation_Sequence *, struct __pyx_obj_7foolysh_9animation_Animation *))__pyx_f_7foolysh_9animation_8Sequence__append_animation;
  __pyx_vtable_7foolysh_9animation_Sequence._append_sequence = (void (*)(struct __pyx_obj_7foolysh_9animation_Sequence *, struct __pyx_obj_7foolysh_9animation_Sequence *))__pyx_f_7foolysh_9animation_8Sequence__append_sequence;
  __pyx_type_7foolysh_9animation_Sequence.tp_base = __pyx_ptype_7foolysh_9animation_AnimationBase;
  if (PyType_Ready(&__pyx_type_7foolysh_9animation_Sequence) < 0) __PYX_ERR(0, 994, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7foolysh_9animation_Sequence.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7foolysh_9animation_Sequence.tp_dictoffset && __pyx_type_7foolysh_9animation_Sequence.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7foolysh_9animation_Sequence.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7foolysh_9animation_Sequence.tp_dict, __pyx_vtabptr_7foolysh_9animation_Sequence) < 0) __PYX_ERR(0, 994, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sequence, (PyObject *)&__pyx_type_7foolysh_9animation_Sequence) < 0) __PYX_ERR(0, 994, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7foolysh_9animation_Sequence) < 0) __PYX_ERR(0, 994, __pyx_L1_error)
  __pyx_ptype_7foolysh_9animation_Sequence = &__pyx_type_7foolysh_9animation_Sequence;
  __pyx_vtabptr_7foolysh_9animation_AnimationManager = &__pyx_vtable_7foolysh_9animation_AnimationManager;
  __pyx_vtable_7foolysh_9animation_AnimationManager._animate = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationManager *, double const ))__pyx_f_7foolysh_9animation_16AnimationManager__animate;
  __pyx_vtable_7foolysh_9animation_AnimationManager.clean_up = (void (*)(struct __pyx_obj_7foolysh_9animation_AnimationManager *))__pyx_f_7foolysh_9animation_16AnimationManager_clean_up;
  if (PyType_Ready(&__pyx_type_7foolysh_9animation_AnimationManager) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7foolysh_9animation_AnimationManager.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7foolysh_9animation_AnimationManager.tp_dictoffset && __pyx_type_7foolysh_9animation_AnimationManager.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7foolysh_9animation_AnimationManager.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7foolysh_9animation_AnimationManager.tp_dict, __pyx_vtabptr_7foolysh_9animation_AnimationManager) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimationManager, (PyObject *)&__pyx_type_7foolysh_9animation_AnimationManager) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7foolysh_9animation_AnimationManager) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __pyx_ptype_7foolysh_9animation_AnimationManager = &__pyx_type_7foolysh_9animation_AnimationManager;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("foolysh.tools.aabb"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7foolysh_5tools_4aabb_AABB = __Pyx_ImportType(__pyx_t_1, "foolysh.tools.aabb", "AABB", sizeof(struct __pyx_obj_7foolysh_5tools_4aabb_AABB), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7foolysh_5tools_4aabb_AABB) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_vtabptr_7foolysh_5tools_4aabb_AABB = (struct __pyx_vtabstruct_7foolysh_5tools_4aabb_AABB*)__Pyx_GetVtable(__pyx_ptype_7foolysh_5tools_4aabb_AABB->tp_dict); if (unlikely(!__pyx_vtabptr_7foolysh_5tools_4aabb_AABB)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("foolysh.tools.vec2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7foolysh_5tools_4vec2_Vec2 = __Pyx_ImportType(__pyx_t_1, "foolysh.tools.vec2", "Vec2", sizeof(struct __pyx_obj_7foolysh_5tools_4vec2_Vec2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7foolysh_5tools_4vec2_Vec2) __PYX_ERR(3, 34, __pyx_L1_error)
  __pyx_vtabptr_7foolysh_5tools_4vec2_Vec2 = (struct __pyx_vtabstruct_7foolysh_5tools_4vec2_Vec2*)__Pyx_GetVtable(__pyx_ptype_7foolysh_5tools_4vec2_Vec2->tp_dict); if (unlikely(!__pyx_vtabptr_7foolysh_5tools_4vec2_Vec2)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("foolysh.scene.node"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7foolysh_5scene_4node_SceneGraphDataHandler = __Pyx_ImportType(__pyx_t_1, "foolysh.scene.node", "SceneGraphDataHandler", sizeof(struct __pyx_obj_7foolysh_5scene_4node_SceneGraphDataHandler), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7foolysh_5scene_4node_SceneGraphDataHandler) __PYX_ERR(4, 12, __pyx_L1_error)
  __pyx_ptype_7foolysh_5scene_4node_Node = __Pyx_ImportType(__pyx_t_1, "foolysh.scene.node", "Node", sizeof(struct __pyx_obj_7foolysh_5scene_4node_Node), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7foolysh_5scene_4node_Node) __PYX_ERR(4, 16, __pyx_L1_error)
  __pyx_vtabptr_7foolysh_5scene_4node_Node = (struct __pyx_vtabstruct_7foolysh_5scene_4node_Node*)__Pyx_GetVtable(__pyx_ptype_7foolysh_5scene_4node_Node->tp_dict); if (unlikely(!__pyx_vtabptr_7foolysh_5scene_4node_Node)) __PYX_ERR(4, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initanimation(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initanimation(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_animation(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_animation(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_animation(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  foolysh::animation::AnimationManager *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'animation' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_animation(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("animation", __pyx_methods, __pyx_k_Provides_wrapper_for_the_Animat, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_foolysh__animation) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "foolysh.animation")) {
      if (unlikely(PyDict_SetItemString(modules, "foolysh.animation", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "foolysh/animation.pyx":7
 * """
 * 
 * from enum import Enum             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Enum);
  __Pyx_GIVEREF(__pyx_n_s_Enum);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Enum);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_enum, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Enum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Enum, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "foolysh/animation.pyx":25
 * 
 * 
 * __author__ = 'Tiziano Bettio'             # <<<<<<<<<<<<<<
 * __license__ = 'MIT'
 * __version__ = '0.1'
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_u_Tiziano_Bettio) < 0) __PYX_ERR(0, 25, __pyx_L1_error)

  /* "foolysh/animation.pyx":26
 * 
 * __author__ = 'Tiziano Bettio'
 * __license__ = 'MIT'             # <<<<<<<<<<<<<<
 * __version__ = '0.1'
 * __copyright__ = """Copyright (c) 2020 Tiziano Bettio
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_n_u_MIT) < 0) __PYX_ERR(0, 26, __pyx_L1_error)

  /* "foolysh/animation.pyx":27
 * __author__ = 'Tiziano Bettio'
 * __license__ = 'MIT'
 * __version__ = '0.1'             # <<<<<<<<<<<<<<
 * __copyright__ = """Copyright (c) 2020 Tiziano Bettio
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_kp_u_0_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)

  /* "foolysh/animation.pyx":28
 * __license__ = 'MIT'
 * __version__ = '0.1'
 * __copyright__ = """Copyright (c) 2020 Tiziano Bettio             # <<<<<<<<<<<<<<
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_u_Copyright_c_2020_Tiziano_Bettio) < 0) __PYX_ERR(0, 28, __pyx_L1_error)

  /* "foolysh/animation.pyx":49
 * 
 * cdef unique_ptr[_AnimationManager] __am
 * __am.reset(new _AnimationManager())             # <<<<<<<<<<<<<<
 * cdef dict __ivals = {}
 * cdef dict __anims = {}
 */
  try {
    __pyx_t_3 = new foolysh::animation::AnimationManager();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 49, __pyx_L1_error)
  }
  __pyx_v_7foolysh_9animation___am.reset(__pyx_t_3);

  /* "foolysh/animation.pyx":50
 * cdef unique_ptr[_AnimationManager] __am
 * __am.reset(new _AnimationManager())
 * cdef dict __ivals = {}             # <<<<<<<<<<<<<<
 * cdef dict __anims = {}
 * cdef dict __seqs = {}
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_7foolysh_9animation___ivals);
  __Pyx_DECREF_SET(__pyx_v_7foolysh_9animation___ivals, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "foolysh/animation.pyx":51
 * __am.reset(new _AnimationManager())
 * cdef dict __ivals = {}
 * cdef dict __anims = {}             # <<<<<<<<<<<<<<
 * cdef dict __seqs = {}
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_7foolysh_9animation___anims);
  __Pyx_DECREF_SET(__pyx_v_7foolysh_9animation___anims, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "foolysh/animation.pyx":52
 * cdef dict __ivals = {}
 * cdef dict __anims = {}
 * cdef dict __seqs = {}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_7foolysh_9animation___seqs);
  __Pyx_DECREF_SET(__pyx_v_7foolysh_9animation___seqs, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "foolysh/animation.pyx":55
 * 
 * 
 * class BlendType(Enum):             # <<<<<<<<<<<<<<
 *     """Enumerations of blend types."""
 *     NO_BLEND = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Enum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_BlendType, __pyx_n_s_BlendType, (PyObject *) NULL, __pyx_n_s_foolysh_animation, __pyx_kp_s_Enumerations_of_blend_types); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "foolysh/animation.pyx":57
 * class BlendType(Enum):
 *     """Enumerations of blend types."""
 *     NO_BLEND = 0             # <<<<<<<<<<<<<<
 *     EASE_IN = 1
 *     EASE_OUT = 2
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_NO_BLEND, __pyx_int_0) < 0) __PYX_ERR(0, 57, __pyx_L1_error)

  /* "foolysh/animation.pyx":58
 *     """Enumerations of blend types."""
 *     NO_BLEND = 0
 *     EASE_IN = 1             # <<<<<<<<<<<<<<
 *     EASE_OUT = 2
 *     EASE_IN_OUT = 3
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_EASE_IN, __pyx_int_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)

  /* "foolysh/animation.pyx":59
 *     NO_BLEND = 0
 *     EASE_IN = 1
 *     EASE_OUT = 2             # <<<<<<<<<<<<<<
 *     EASE_IN_OUT = 3
 * 
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_EASE_OUT, __pyx_int_2) < 0) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "foolysh/animation.pyx":60
 *     EASE_IN = 1
 *     EASE_OUT = 2
 *     EASE_IN_OUT = 3             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_EASE_IN_OUT, __pyx_int_3) < 0) __PYX_ERR(0, 60, __pyx_L1_error)

  /* "foolysh/animation.pyx":55
 * 
 * 
 * class BlendType(Enum):             # <<<<<<<<<<<<<<
 *     """Enumerations of blend types."""
 *     NO_BLEND = 0
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_BlendType, __pyx_t_1, __pyx_t_4, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BlendType, __pyx_t_5) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1062
 * 
 * 
 * def PosInterval(node, duration, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with position
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_1PosInterval, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PosInterval, __pyx_t_1) < 0) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1085
 * 
 * 
 * def ScaleInterval(node, duration, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with scale modifier.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_3ScaleInterval, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ScaleInterval, __pyx_t_1) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1107
 * 
 * 
 * def RotationInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_5RotationInterval, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RotationInterval, __pyx_t_1) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1130
 * 
 * 
 * def RotationCenterInterval(node, duration, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with rotation center
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_7RotationCenterInterval, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RotationCenterInterval, __pyx_t_1) < 0) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1152
 * 
 * 
 * def DepthInterval(node, duration, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Interval` instance with depth modifier.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_9DepthInterval, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DepthInterval, __pyx_t_1) < 0) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1175
 * 
 * 
 * def PosAnimation(node, speed, v1, v2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with position
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_11PosAnimation, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PosAnimation, __pyx_t_1) < 0) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1198
 * 
 * 
 * def ScaleAnimation(node, speed, s1, s2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with scale modifier.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_13ScaleAnimation, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ScaleAnimation, __pyx_t_1) < 0) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1220
 * 
 * 
 * def RotationAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_15RotationAnimation, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RotationAnimation, __pyx_t_1) < 0) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1243
 * 
 * 
 * def RotationCenterAnimation(node, speed, v1, v2=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with rotation center
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_17RotationCenterAnimation, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RotationCenterAnimation, __pyx_t_1) < 0) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1265
 * 
 * 
 * def DepthAnimation(node, speed, d1, d2=None, rel=None, blend=None):             # <<<<<<<<<<<<<<
 *     """
 *     Factory method to create an :class:`Animation` instance with depth modifier.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_19DepthAnimation, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DepthAnimation, __pyx_t_1) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_AnimationManager(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7foolysh_9animation_21__pyx_unpickle_AnimationManager, NULL, __pyx_n_s_foolysh_animation); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_AnimationManager, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "foolysh/animation.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * """
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init foolysh.animation", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init foolysh.animation");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* py_dict_pop */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B3
    if ((1)) {
        return _PyDict_Pop(d, key, default_value);
    } else
#endif
    if (default_value) {
        return __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_pop, d, key, default_value);
    } else {
        return __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_pop, d, key);
    }
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto __PYX_BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto __PYX_BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__foolysh_3a__3a_animation_3a__3a_BlendType(enum foolysh::animation::BlendType value) {
    const enum foolysh::animation::BlendType neg_one = (enum foolysh::animation::BlendType) ((enum foolysh::animation::BlendType) 0 - (enum foolysh::animation::BlendType) 1), const_zero = (enum foolysh::animation::BlendType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum foolysh::animation::BlendType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum foolysh::animation::BlendType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum foolysh::animation::BlendType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum foolysh::animation::BlendType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum foolysh::animation::BlendType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum foolysh::animation::BlendType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum foolysh::animation::BlendType __Pyx_PyInt_As_enum__foolysh_3a__3a_animation_3a__3a_BlendType(PyObject *x) {
    const enum foolysh::animation::BlendType neg_one = (enum foolysh::animation::BlendType) ((enum foolysh::animation::BlendType) 0 - (enum foolysh::animation::BlendType) 1), const_zero = (enum foolysh::animation::BlendType) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum foolysh::animation::BlendType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum foolysh::animation::BlendType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum foolysh::animation::BlendType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum foolysh::animation::BlendType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) >= 2 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) (((((enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum foolysh::animation::BlendType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) >= 3 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) (((((((enum foolysh::animation::BlendType)digits[2]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum foolysh::animation::BlendType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) >= 4 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) (((((((((enum foolysh::animation::BlendType)digits[3]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[2]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum foolysh::animation::BlendType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum foolysh::animation::BlendType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum foolysh::animation::BlendType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum foolysh::animation::BlendType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum foolysh::animation::BlendType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum foolysh::animation::BlendType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) (((enum foolysh::animation::BlendType)-1)*(((((enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum foolysh::animation::BlendType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) ((((((enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) (((enum foolysh::animation::BlendType)-1)*(((((((enum foolysh::animation::BlendType)digits[2]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum foolysh::animation::BlendType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) ((((((((enum foolysh::animation::BlendType)digits[2]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) (((enum foolysh::animation::BlendType)-1)*(((((((((enum foolysh::animation::BlendType)digits[3]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[2]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum foolysh::animation::BlendType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum foolysh::animation::BlendType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum foolysh::animation::BlendType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum foolysh::animation::BlendType) ((((((((((enum foolysh::animation::BlendType)digits[3]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[2]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[1]) << PyLong_SHIFT) | (enum foolysh::animation::BlendType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum foolysh::animation::BlendType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum foolysh::animation::BlendType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum foolysh::animation::BlendType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum foolysh::animation::BlendType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum foolysh::animation::BlendType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum foolysh::animation::BlendType) -1;
        }
    } else {
        enum foolysh::animation::BlendType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum foolysh::animation::BlendType) -1;
        val = __Pyx_PyInt_As_enum__foolysh_3a__3a_animation_3a__3a_BlendType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum foolysh::animation::BlendType");
    return (enum foolysh::animation::BlendType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum foolysh::animation::BlendType");
    return (enum foolysh::animation::BlendType) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
